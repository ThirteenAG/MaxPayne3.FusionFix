module;

#include <common.hxx>

export module natives;

import common;
import comvars;

export using Any = int32_t;
export using Weapon = int32_t;
export using Player = int32_t;
export using Entity = int32_t;
export using FireId = int32_t;
export using Ped = int32_t;
export using Vehicle = int32_t;
export using Cam = int32_t;
export using CarGenerator = int32_t;
export using Group = int32_t;
export using Train = int32_t;
export using Pickup = int32_t;
export using Object = int32_t;
export using Interior = int32_t;
export using Blip = int32_t;
export using Texture = int32_t;
export using TextureDict = int32_t;
export using CoverPoint = int32_t;
export using DecisionMaker = int32_t;
export using Camera = int32_t;
export using TaskSequence = int32_t;
export using Char = int32_t;
export using Car = int32_t;
export using ColourIndex = int32_t;
export using Sphere = int32_t;
export using ExplosionType = int32_t;
export using ShootMode = int32_t;
export using RelationshipGroup = int32_t;
export using QuadChar = int32_t;
export using GtaThread = int32_t;
export using ScrHandle = int32_t;
export using Hash = uint32_t;
export using Rope = int32_t;
export using Entity = int32_t;

export struct Request_s
{
    int index;
    int unk;
};

export struct Vector3 
{
    float fX;
    float fY;
    float fZ;
};

export struct Vector4
 {
    float fX;
    float fY;
    float fZ;
    float fW;
};

export struct Color32
{
    uint8_t b;
    uint8_t g;
    uint8_t r;
    uint8_t a;
};

export class scrNativeCallContext
{
protected:
    GtaThread* m_pThread;
    void* m_pReturn;
    uint32_t m_nArgCount;
    void* m_pArgs;
    uint32_t m_nDataCount;
    Vector3* m_pOriginalData[4];
    Vector4 m_TemporaryData[4];

public:
    template<typename T>
    inline T GetArgument(int idx)
    {
        auto arguments = (intptr_t*)m_pArgs;
        return *reinterpret_cast<T*>(&arguments[idx]);
    }

    inline void* GetArgumentBuffer()
    {
        return m_pArgs;
    }

    template<typename T>
    inline void SetResult(int idx, T value)
    {
        auto returnValues = (intptr_t*)m_pReturn;
        *reinterpret_cast<T*>(&returnValues[idx]) = value;
    }

    inline int GetArgumentCount()
    {
        return m_nArgCount;
    }

    template<typename T>
    inline T GetResult(int idx)
    {
        while (m_nDataCount > 0)
        {
            m_nDataCount--;
            Vector3* pVec3 = m_pOriginalData[m_nDataCount];
            Vector4* pVec4 = &m_TemporaryData[m_nDataCount];
            pVec3->fX = pVec4->fX;
            pVec3->fY = pVec4->fY;
            pVec3->fZ = pVec4->fZ;
        }
        auto returnValues = (intptr_t*)m_pReturn;
        return *reinterpret_cast<T*>(&returnValues[idx]);
    }
};

export class NativeContext : public scrNativeCallContext
{
private:
    // Configuration
    enum
    {
        MaxNativeParams = 16,
        ArgSize = 4,
    };

    // Anything temporary that we need
    uint8_t m_TempStack[MaxNativeParams * ArgSize] = {};

public:
    inline NativeContext()
    {
        m_pThread = (GtaThread*)&m_TempStack;
        m_pArgs = &m_TempStack;
        m_pReturn = &m_TempStack;		// It's okay to point both args and return at the same pointer. The game should handle this.
        m_nArgCount = 0;
        m_nDataCount = 0;
    }

    template <typename T>
    inline void Push(T value)
    {
        if (sizeof(T) > ArgSize)
        {
            // We only accept sized 4 or less arguments... that means no double/f64 or large structs are allowed.
            throw "Argument has an invalid size";
        }
        else if (sizeof(T) < ArgSize)
        {
            // Ensure we don't have any stray data
            *reinterpret_cast<uintptr_t*>(m_TempStack + ArgSize * m_nArgCount) = 0;
        }

        *reinterpret_cast<T*>(m_TempStack + ArgSize * m_nArgCount) = value;
        m_nArgCount++;
    }

    template <typename T>
    inline T GetResult()
    {
        return *reinterpret_cast<T*>(m_TempStack);
    }
};

export class NativeInvoke
{
private:
    struct sncall 
    {
        int32_t i;
        int32_t(*fun)(NativeContext*);
    };

    static inline auto m_IndexTable = std::unordered_map<uint32_t, sncall*>();
public:
    static sncall* GetNativeHandler(uint32_t Hash)
    {
        if (getNativeAddress)
            return reinterpret_cast<sncall*>(getNativeAddress(nativeHandlerPtrAddress, 0, Hash));

        return nullptr;
    }
public:
    template<uint32_t Hash, typename R, typename... Args>
    static inline R Invoke(Args... args)
    {
        NativeContext cxt;
        (cxt.Push(args), ...);

        //if (CTimer__m_CodePause && !*CTimer__m_CodePause)
        //{
            if (!m_IndexTable[Hash])
            {
                auto fn = GetNativeHandler(Hash);
                if (fn) {
                    m_IndexTable[Hash] = fn;
                    fn->fun(&cxt);
                }
            }
            else
            {
                m_IndexTable[Hash]->fun(&cxt);
            }
        //}

        if constexpr (!std::is_void_v<R>)
        {
            return cxt.GetResult<R>();
        }
    }
};

export class NativeOverride
{
public:
    static auto Register(auto hash, auto fn, std::string_view dest_pattern_str, size_t fn_size)
    {
        auto nativeHash = std::to_underlying(hash);
        auto pattern = hook::pattern(pattern_str(0x68, to_bytes(nativeHash))); // push 0x...
        auto addr = *pattern.get_first<uintptr_t>(-4);
        auto range = hook::range_pattern(addr, addr + fn_size, dest_pattern_str);
        if (!range.empty())
        {
            if (dest_pattern_str.starts_with("E8"))
                return injector::MakeCALL(range.get_first(0), fn, true).get();
            else if (dest_pattern_str.starts_with("E9"))
                return injector::MakeJMP(range.get_first(0), fn, true).get();
        }
        return injector::auto_pointer(nullptr);
    }
};

export class Natives
{
public:
    enum class NativeHashes : uint32_t {
        ABSF = 0xAF6F6E0B,
        ABSI = 0xB44677C5,
        ACOS = 0xF4038776,
        ACTION_TREE_FORCE_UNLOAD = 0xD99BD3AF,
        ACTION_TREE_LOAD = 0x8520911A,
        ACTION_TREE_UNLOAD = 0x620BE3A3,
        ACTIVATE_BULLET_TIME = 0xFF9FE21C,
        ACTIVATE_BULLET_TIME_AS_PLAYER = 0x25B796C8,
        ACTIVATE_DETONATOR = 0x1C5D5D2D,
        ACTIVATE_LOADOUT_SCREEN = 0xD3C74E5D,
        ADD_ADRENALINE = 0x9818A492,
        ADD_AMMO_TO_PED = 0x7F0580C7,
        ADD_ARMOUR_TO_PED = 0xF686B26E,
        ADD_BLIP_FOR_CONTACT = 0x6295B365,
        ADD_BLIP_FOR_COORD = 0xC6F43D0E,
        ADD_BLIP_FOR_GANG_TERRITORY = 0x63EBC4FA,
        ADD_BLIP_FOR_OBJECT = 0x0E5372EC,
        ADD_BLIP_FOR_PED = 0x8A6ED1DF,
        ADD_BLIP_FOR_PICKUP = 0x16693C3A,
        ADD_BLIP_FOR_VEHICLE = 0xA338238C,
        ADD_BLOOD_POOL = 0xBD6B7E68,
        ADD_BULLET_CAM_TEXT = 0x3A5A1CDB,
        ADD_CAM_SPLINE_NODE = 0xAD3C7EAA,
        ADD_COVER_BLOCKING_AREA = 0x3536946F,
        ADD_EXPLOSION = 0x10AF5258,
        ADD_EXPLOSION_WITH_CAUSE = 0x0BF9BBF0,
        ADD_FOLLOW_NAVMESH_TO_PHONE_TASK = 0x00D7303F,
        ADD_GROUND_PLANE_COLLISION_TO_PARTICLE_FX = 0x6DF10D45,
        ADD_GROUP_TO_NETWORK_RESTART_NODE_GROUP_LIST = 0x3105DC1F,
        ADD_KILLXP_RULE = 0x216F295D,
        ADD_KILLXP_RULE_ANYKILLER = 0xCEB6BD96,
        ADD_KILLXP_RULE_ANYVICTIM = 0x3558D8E8,
        ADD_LINE_TO_CONVERSATION = 0x96CD0513,
        ADD_MULTIPLAYER_MESSAGE = 0xDFE98FBC,
        ADD_NEARBY_COLLISION_TO_PARTICLE_FX = 0xA3D7374F,
        ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS = 0xB58B25BD,
        ADD_OBJECT_TO_EXPLOSION_OCCLUSION_TESTS = 0xC88787A4,
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_KEY = 0xF062047C,
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME = 0x27F07BD9,
        ADD_PATROL_ROUTE_LINK = 0xD8761BB3,
        ADD_PATROL_ROUTE_NODE = 0x21B48F10,
        ADD_PAYNEKILLER = 0xEFBF6795,
        ADD_PED_CLONE = 0x0201A0FC,
        ADD_PED_DECISION_MAKER_EVENT_RESPONSE = 0x2B02F9D4,
        ADD_PED_IGNORE_COVER_ENTRY = 0x89C1F145,
        ADD_PED_TO_CONVERSATION = 0xF8D5EB86,
        ADD_PED_TO_CONVERSATION_ENUM = 0x53CF1845,
        ADD_PED_TO_MISSION_DELETION_LIST = 0x302E8AC8,
        ADD_PED_USE_COVER_ENTRY = 0x71F647CC,
        ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME = 0xE4961E79,
        ADD_PLAYER_SCORE = 0x692414AA,
        ADD_ROPE = 0xA592EC74,
        ADD_SCENARIO_BLOCKING_AREA = 0xA38C0234,
        ADD_SCRIPT_TO_OBJECT = 0x68D34980,
        ADD_SCRIPT_TO_RANDOM_PED = 0xECC76C3D,
        ADD_SCRIPT_TUNABLE_BOOL = 0x9F25E66C,
        ADD_SCRIPT_TUNABLE_CRC_BOOL = 0x754B769B,
        ADD_SCRIPT_TUNABLE_CRC_FLOAT = 0xB16DFC67,
        ADD_SCRIPT_TUNABLE_CRC_INT = 0x07A49981,
        ADD_SCRIPT_TUNABLE_FLOAT = 0x7DA01BE3,
        ADD_SCRIPT_TUNABLE_INT = 0x84C024B8,
        ADD_SCRIPTED_WEAPON_MODIFIER = 0xDC9BD147,
        ADD_SPATIALDATA_COVER_POINT = 0x184DE0A6,
        ADD_SPAWN_BLOCKING_AREA = 0xDAA55B46,
        ADD_SPECIAL_FX_MODIFIER = 0xAC7F5BB8,
        ADD_STRING_TO_NEWS_SCROLLBAR = 0x00DDFD22,
        ADD_TEXT_WIDGET = 0xE178AA0F,
        ADD_TICKER_MESSAGE = 0x151A8CA9,
        ADD_TO_PREVIOUS_BRIEF = 0xFE33CF4A,
        ADD_TO_PREVIOUS_BRIEF_WITH_UNDERSCORE = 0xB12B4573,
        ADD_TO_WIDGET_COMBO = 0xE136E83E,
        ADD_VEHICLE_STUCK_CHECK = 0x3619F647,
        ADD_VEHICLE_STUCK_CHECK_WITH_WARP = 0xC8B789AD,
        ADD_VEHICLE_SUBTASK_ATTACK_COORD = 0x50779A2C,
        ADD_VEHICLE_SUBTASK_ATTACK_PED = 0x80461113,
        ADD_VEHICLE_SUBTASK_STRAFE_COORDS = 0xDDA8AA23,
        ADD_VEHICLE_TO_MISSION_DELETION_LIST = 0xF6E45147,
        ADD_VEHICLE_UPSIDEDOWN_CHECK = 0x3A13D384,
        ADD_WIDGET_BOOL = 0xECBF5BB2,
        ADD_WIDGET_FLOAT_READ_ONLY = 0xEF2D8DEA,
        ADD_WIDGET_FLOAT_SLIDER = 0x67865135,
        ADD_WIDGET_INT_READ_ONLY = 0xB3F4D0DF,
        ADD_WIDGET_INT_SLIDER = 0xF6A6C926,
        ADD_WIDGET_STRING = 0xC541594C,
        ADD_WIND_THERMAL = 0xF355A848,
        ADJUST_AMMO_ATTEMPTS = 0xF4BFDBAD,
        ADJUST_PAIN_KILLERS_ATTEMPTS = 0x36620C4E,
        ADJUST_TIMECYCLE_MODIFIER_OVERRIDE = 0xFE471B6E,
        ALLOCATE_VEHICLE_INST_LIGHT_TUNE_DATA = 0x33837FD9,
        ALLOW_BULLET_CAMERA_CHEAT = 0x3A19D0D1,
        ALLOW_BULLET_CAMERA_SLOWDOWN = 0xC6AB9205,
        ALLOW_BULLET_CAMERA_TO_GAMEPLAY = 0x2BB2C58F,
        ALLOW_BULLET_CAMERA_TUTORIAL_MSG = 0xB20B0BD2,
        APPLY_DAMAGE_TO_PED = 0x4DC27FCF,
        APPLY_DAMAGE_TO_PED_BODY_PART = 0x6B997326,
        APPLY_DAMAGE_TO_PED_WITH_HASH = 0x78C7D607,
        APPLY_FORCE_TO_OBJECT = 0xB4FCA1F9,
        APPLY_FORCE_TO_PED = 0x343ABB0E,
        APPLY_FORCE_TO_VEHICLE = 0x3130AB0A,
        APPLY_PLAYER_PRELOAD_VARIATION = 0xAC6A7AD3,
        APPLY_UNIFORMLY_DISTRIBUTED_IMPULSE_TO_RAGDOLL = 0x5B121A4C,
        ARE_ALL_NAVMESH_REGIONS_LOADED = 0x34C4E789,
        ARE_CREDITS_ACTIVE = 0xD53CA5A2,
        ARE_MP_STATS_LOADED = 0x2469CD25,
        ARE_PLAYER_COVER_MOVEMENT_TRANSITIONS_BLOCKED = 0x047D2668,
        ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP = 0xE13A71C7,
        ARE_PLAYER_STARS_GREYED_OUT = 0x5E72AB72,
        ARE_SP_STATS_LOADED = 0xA73A7E53,
        ARE_STRINGS_EQUAL = 0x877C0BC5,
        ARE_UNIT_TESTS_RUNNING = 0x4F4C7FA4,
        ARE_VEHICLE_HEADLIGHTS_BROKEN = 0xE9C0A5A0,
        ARE_WIDESCREEN_BORDERS_ACTIVE = 0x4E26746C,
        ASIN = 0x998E5CAD,
        ASSISTED_MOVEMENT_ADD_POINT = 0xD48E643D,
        ASSISTED_MOVEMENT_CLOSE_ROUTE = 0xF23277F3,
        ASSISTED_MOVEMENT_FLUSH_ROUTE = 0xD04568B9,
        ASSISTED_MOVEMENT_IS_ON_ANY_ROUTE = 0x7B3F0F02,
        ASSISTED_MOVEMENT_IS_ON_SCRIPTED_ROUTE = 0x1EFF3C50,
        ASSISTED_MOVEMENT_OPEN_ROUTE = 0x830DDFC9,
        ASSISTED_MOVEMENT_SET_WIDTH = 0x76FFD005,
        ATAN = 0x7A03CC8E,
        ATAN2 = 0x2508AC81,
        ATTACH_CAM_TO_OBJECT = 0xD8AD0661,
        ATTACH_CAM_TO_PED = 0xAFE56AF8,
        ATTACH_CAM_TO_VEHICLE = 0x8D33A0B5,
        ATTACH_EXPLOSIVE_INTERACT_VOLUME_TO_PED = 0x13BAF8E2,
        ATTACH_INTERACT_VOLUME_TO_PED = 0x05167446,
        ATTACH_LASER_TO_OBJECT = 0xCF6AD373,
        ATTACH_LASER_TO_OBJECT_BONE = 0xE3667257,
        ATTACH_OBJECT_TO_OBJECT = 0x75F6A13E,
        ATTACH_OBJECT_TO_OBJECT_PHYSICALLY = 0x7C98BD8E,
        ATTACH_OBJECT_TO_PED = 0xDB806B1D,
        ATTACH_OBJECT_TO_VEHICLE = 0x3DC7AC96,
        ATTACH_OBJECT_TO_VEHICLE_PHYSICALLY = 0xF903C741,
        ATTACH_OBJECT_VEHICLE_TO_ROPE = 0x81F6E920,
        ATTACH_OBJECTS_TO_ROPE = 0xFCE5C3CF,
        ATTACH_PED_TO_OBJECT = 0x107FDC53,
        ATTACH_PED_TO_OBJECT_PHYSICALLY = 0x37F17899,
        ATTACH_PED_TO_PED = 0xAFB33CC2,
        ATTACH_PED_TO_PED_PHYSICALLY = 0x10673612,
        ATTACH_PED_TO_VEHICLE = 0x07A41569,
        ATTACH_PED_TO_VEHICLE_PHYSICALLY = 0x7A9DBF0D,
        ATTACH_PED_TO_WORLD_PHYSICALLY = 0xAF7B92C2,
        ATTACH_ROPE_TO_OBJECT = 0x611D5E90,
        ATTACH_VEHICLE_TO_OBJECT = 0x0923DE0E,
        ATTACH_VEHICLE_TO_VEHICLE = 0x016B0817,
        ATTACH_VEHICLE_TO_VEHICLE_PHYSICALLY = 0x9C548435,
        ATTACH_VEHICLES_TO_ROPE = 0xA21BCE5F,
        ATTACH_WEAPON_TO_VEHICLE = 0x0A4A9A08,
        AUD_ENABLE_PRE_BINK_SHUTDOWN = 0xC3BDC70F,
        AUD_GET_ANIM_MARKER_LEVEL = 0x8A44F752,
        AUD_SET_IS_POWER_ON = 0xAB429BE9,
        AUDIO_CHANGE_PORTAL_SETTINGS = 0xD0DF16AD,
        AUDIO_DISABLE_WADING_SOUNDS = 0x6A9FF2B8,
        AUDIO_ENABLE_FE_MUSIC = 0x2F7AFED9,
        AUDIO_ENABLE_HEALTH_MIX = 0xA7D06400,
        AUDIO_ENABLE_TV_MOVIE = 0x63979E44,
        AUDIO_IGNORE_NEXT_WARP_TRANSITION_SOUND = 0xA9CC919C,
        AUDIO_IS_CUTSCENE_PLAYING = 0xE026C62E,
        AUDIO_IS_FRONTEND_MUSIC_PLAYING = 0x9EC502D6,
        AUDIO_IS_MUSIC_PLAYING = 0x84435231,
        AUDIO_IS_SCRIPTED_MUSIC_PLAYING = 0x86E995D1,
        AUDIO_LOAD_BANK = 0x0F418A70,
        AUDIO_LOAD_METADATA = 0xE8424B87,
        AUDIO_LOAD_SPEECH_DATA = 0x94C4FDB5,
        AUDIO_MAKE_SLOT_STATIC = 0x943F7EB0,
        AUDIO_MUSIC_ADJUST_VOLUME = 0xA34A3F55,
        AUDIO_MUSIC_CLEAR_AUDIO_SYNC_VARIABLES = 0xE73CA44B,
        AUDIO_MUSIC_FORCE_TRACK = 0xA2A356A7,
        AUDIO_MUSIC_FORCE_TRACK_HASH = 0x6CEFA97A,
        AUDIO_MUSIC_GET_MS_UNTIL_AUDIO_SYNC = 0x02CBEC97,
        AUDIO_MUSIC_IS_AUDIO_SYNC_NOW = 0xED9CA16F,
        AUDIO_MUSIC_IS_MARKER_IN_RANGE = 0xAAB5C232,
        AUDIO_MUSIC_IS_ONESHOT_PREPARED = 0x0CF2727F,
        AUDIO_MUSIC_IS_PREPARED = 0xBF316157,
        AUDIO_MUSIC_ONE_SHOT = 0x714DA5BB,
        AUDIO_MUSIC_PLAY_ONESHOT = 0x8229B903,
        AUDIO_MUSIC_PLAY_PREPARED = 0x7CC2738F,
        AUDIO_MUSIC_PLAY_UNSCRIPTED_NOW = 0xE2A37056,
        AUDIO_MUSIC_PRELOAD_ONESHOT = 0x404A0AE6,
        AUDIO_MUSIC_RELEASE_CONTROL = 0xA3A2984E,
        AUDIO_MUSIC_REQUEST_ONESHOT = 0x607773A0,
        AUDIO_MUSIC_RESUME = 0x5F48A85B,
        AUDIO_MUSIC_SET_MOOD = 0x633B8905,
        AUDIO_MUSIC_SET_STATE = 0x789C753C,
        AUDIO_MUSIC_SET_SUSPENSE_ALLOWED = 0xE0DE16BD,
        AUDIO_MUSIC_STOP_ONESHOT = 0xD92E534F,
        AUDIO_MUSIC_SUSPEND = 0x56E3D235,
        AUDIO_RESET_PED_DEAD_SPEECH_FLAG = 0x15256E0C,
        AUDIO_SET_BREATHING_STATUS = 0x22A622F1,
        AUDIO_SET_PED_FOOTSTEPS_ON = 0x17FEF7EA,
        AUDIO_SET_PED_FOOTSTEPS_ROLLOFF = 0xB125E896,
        AUDIO_SET_PED_FOOTSTEPS_VOLUME = 0x85DA7899,
        AUDIO_SET_PED_HAS_MP_BURST_GROUNDED = 0x4FF98558,
        AUDIO_SET_PLAYER_PAIN_NAME = 0xE8A10A1A,
        AUDIO_SET_SIDEKICK_PAIN_NAME = 0x7C64FB16,
        AUDIO_SET_SINGLE_PED_FOOTSTEPS_ON = 0x0B15ADFA,
        AUDIO_UNLOAD_METADATA = 0xD1A72EA2,
        BG_SCRIPT_ADJUST_BY_UNIT = 0x6124EBD6,
        BIND_SCRIPT_DATABASE = 0x56D42F14,
        BLOCK_PLAYER_COVER_MOVEMENT_TRANSITIONS = 0x51C32D10,
        BLOOD_DECAL_ON_PED_BONE = 0xF2372566,
        BOOBY_TRAP_ALL_CORPSE_VOLUMES = 0x3D89B3C3,
        BOT_SET_INPUT = 0x3D8F266F,
        BOT_UPDATE_INPUT = 0x03C4F17C,
        BREAK_ROPE = 0xA5691881,
        BREAKPOINT = 0xEFEAFB91,
        BROADCAST_UNIT_TEST_MESSAGE = 0x44E68F92,
        BULLET_CAMERA_ALLOW_TRACK_BULLET = 0x5754CF87,
        BULLET_CAMERA_PRELOAD_TEXT_BINK = 0x8CD8006E,
        BULLET_CAMERA_TRACK_UNTIL_GROUNDED = 0xF32B2C96,
        CAMERA_AIM_OVERRIDE = 0x8DA8FA57,
        CAMERA_ANIMATED_CURRENT_TIME = 0x79AF1166,
        CAMERA_ANIMATED_LENGTH = 0xA6DA5494,
        CAMERA_ANIMATED_RECORD_SRL = 0x0816DFBD,
        CAMERA_ANIMATED_START_FOV = 0x083EC5A3,
        CAMERA_ANIMATED_START_HEADING = 0xA7596ABA,
        CAMERA_ANIMATED_START_POSITION = 0xCA7616AE,
        CAMERA_ANIMATED_STOP = 0x70990C57,
        CAMERA_ANIMATED_USE_DOF = 0xFB7557B5,
        CAMERA_CAN_TARGET_OBJECT = 0x484A10F1,
        CAMERA_CAN_TARGET_PROJECTILES = 0xA931C3F2,
        CAMERA_CAN_TARGET_TIRES = 0x13CBB1CD,
        CAMERA_CAN_TARGET_VEHICLE = 0x49845055,
        CAMERA_CLEAR_POINT_AT_TARGET = 0x09013E7F,
        CAMERA_ENABLE_FIRST_TIME_AIM_LOCK = 0x8F5BB594,
        CAMERA_ENABLE_SHOULDER_MODE = 0xD33A2B48,
        CAMERA_FIRST_PERSON_TRACK_RATE = 0xD9D54F5A,
        CAMERA_FREEZE_FRAME = 0xDDFE747D,
        CAMERA_IS_POINTING_AT_TARGET = 0x6C7043F0,
        CAMERA_OVERRIDE_EFFECT_OBSTRUCTION = 0x24770C0D,
        CAMERA_PLAY_ANIMATED = 0x07481CC8,
        CAMERA_PLAY_ANIMATED_ATTACHED_PED_RELATIVE = 0xC6F70F9A,
        CAMERA_PLAY_ANIMATED_ATTACHED_VEHICLE = 0x26C4B9FA,
        CAMERA_PLAY_ANIMATED_ATTACHED_VEHICLE_RELATIVE = 0xAE338F48,
        CAMERA_PLAY_ANIMATED_WITH_SRL = 0xAE16D609,
        CAMERA_POINT_AT_COORD = 0x5F3C6D7A,
        CAMERA_POINT_AT_GRENADE = 0x57EB9828,
        CAMERA_POINT_AT_OBJECT = 0xFF7BF49E,
        CAMERA_POINT_AT_PED = 0x8B002BD2,
        CAMERA_POINT_AT_VEHICLE = 0xC006BBFD,
        CAMERA_SET_HIGH_COVER_LOCK_ON_ANGLE_LIMIT = 0x18B57920,
        CAMERA_SETTINGS_IS_HARD_LOCK_ENABLED = 0x1A2E23B0,
        CAMERA_SNAP_POINT_AT_COORD = 0x8025901F,
        CAMERA_USE_HANDY_CAM = 0x4AF9573A,
        CAN_CREATE_RANDOM_COPS = 0xAA73DAD9,
        CAN_CREATE_RANDOM_PED = 0xF9ABE88F,
        CAN_PED_SEE_OTHER_PED = 0xFF36A652,
        CAN_PLAYER_START_MISSION = 0x39E3CB3F,
        CAN_SET_ENTER_STATE_FOR_CUTSCENE_PED = 0xE3F828A8,
        CAN_SET_EXIT_STATE_FOR_CUTSCENE_PED = 0xDD1F0C79,
        CEIL = 0xD536A1DF,
        CHANGE_AMBIENT_STREAM_SOUND = 0xAAA16BCB,
        CHANGE_STATIC_EMITTER_SOUND = 0x05788865,
        CHECKPOINT_STORAGE_LOAD = 0x08FE3BFF,
        CHECKPOINT_STORAGE_SAVE = 0x2C0A7F20,
        CLEAR_ADDITIONAL_TEXT = 0x518141E0,
        CLEAR_ALL_PED_PROPS = 0x81DF8B43,
        CLEAR_ALL_RINGICON_WORLD = 0xA87B2666,
        CLEAR_ALL_SPAWN_BLOCKING_AREAS = 0xF00D7922,
        CLEAR_ANGLED_AREA_OF_VEHICLES = 0xF11A3018,
        CLEAR_AREA = 0x854E9AB8,
        CLEAR_AREA_OF_COPS = 0x95C53824,
        CLEAR_AREA_OF_FIRES_AND_EXPLOSIONS = 0xAE40D6A1,
        CLEAR_AREA_OF_OBJECTS = 0xBB720FE7,
        CLEAR_AREA_OF_PEDS = 0x25BE7FA8,
        CLEAR_AREA_OF_VEHICLES = 0x63320F3C,
        CLEAR_BIT = 0x8BC9E618,
        CLEAR_BRIEF = 0x9F75A929,
        CLEAR_CENTRAL_MESSAGES = 0x2BCCCD02,
        CLEAR_COLLECTABLE_STATS = 0x9535509B,
        CLEAR_CURRENT_WIDGET_GROUP = 0x345CAE26,
        CLEAR_DEATH_RECORDS = 0x58BB6879,
        CLEAR_HELP = 0xE6D85741,
        CLEAR_IK_ATTACH_TARGET = 0x923D602F,
        CLEAR_INTERIOR_COLLISION_REQUIRED = 0xA868D193,
        CLEAR_KILL_STREAK_RECORDS = 0xD3B3E2DB,
        CLEAR_KILLXP_RULES = 0x77886D8E,
        CLEAR_LEVEL_COMPLETION = 0xCDA1884F,
        CLEAR_LOCKED_TARGET = 0xCEC0CF8C,
        CLEAR_NAMED_CUTSCENE = 0x268CC696,
        CLEAR_NAMED_DEBUG_FILE = 0xD62B95EB,
        CLEAR_NETWORK_OBJECT_TERRITORY_EFFECT = 0xE095DEAC,
        CLEAR_NETWORK_RESTART_NODE_GROUP_LIST = 0x5B4D98C0,
        CLEAR_NEWS_SCROLLBAR = 0xD70532E8,
        CLEAR_OBJECT_LAST_DAMAGE_ENTITY = 0x0FAB3AA7,
        CLEAR_PED_DECISION_MAKER_EVENT_RESPONSE = 0x6BEC1C96,
        CLEAR_PED_DEFAULT_AIM = 0xC7E6D674,
        CLEAR_PED_LAST_DAMAGE_BONE = 0x56CB715E,
        CLEAR_PED_LAST_DAMAGE_ENTITY = 0xBDB4D36B,
        CLEAR_PED_LAST_WEAPON_DAMAGE = 0x52C68832,
        CLEAR_PED_NON_CREATION_AREA = 0x6F7043A3,
        CLEAR_PED_NON_REMOVAL_AREA = 0xB5BA896B,
        CLEAR_PED_PRIMARY_LOOKAT = 0xFFFE3FBF,
        CLEAR_PED_PROP = 0x2D23D743,
        CLEAR_PED_RELATIONSHIP = 0xD7EF3057,
        CLEAR_PED_SECONDARY_LOOKAT = 0x0D7D2CA7,
        CLEAR_PED_SECONDARY_TASK = 0xA635F451,
        CLEAR_PED_TASKS = 0xDE3316AB,
        CLEAR_PED_TASKS_IMMEDIATELY = 0xBC045625,
        CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED = 0x1D31CBBD,
        CLEAR_PLAYER_WANTED_LEVEL = 0x54EA5BCC,
        CLEAR_PRINTS = 0x216CB1C5,
        CLEAR_PROJECTILES = 0xDE0D76C3,
        CLEAR_RELATIONSHIP_BETWEEN_REL_GROUPS = 0x1AB5F830,
        CLEAR_RINGICON_OBJECT = 0x284B05F3,
        CLEAR_RINGICON_PLAYER = 0x913B00BA,
        CLEAR_RINGICON_WORLD = 0x879CB1D1,
        CLEAR_ROOM_FOR_OBJECT = 0x4CF50AEB,
        CLEAR_ROOM_FOR_PED = 0xAABFC73C,
        CLEAR_ROOM_FOR_VEHICLE = 0x7F01E3CF,
        CLEAR_SCRIPT_ARRAY_FROM_SCRATCHPAD = 0x50770E90,
        CLEAR_SCRIPT_STREAM_REQUESTS = 0x108F237A,
        CLEAR_SCRIPTED_CONVERSION_COORD = 0xBFA2E595,
        CLEAR_SEQUENCE_TASK = 0x47ED03CE,
        CLEAR_SMALL_PRINTS = 0xA869A238,
        CLEAR_TEXT_LABEL = 0xA66AAE8F,
        CLEAR_THIS_PRINT = 0x06878327,
        CLEAR_TICKER_MESSAGES = 0xFACE788D,
        CLEAR_TIMECYCLE_MODIFIER = 0x8D8DF8EE,
        CLEAR_TIMECYCLE_MODIFIER_OVERRIDE = 0xF1AE66DC,
        CLEAR_TUTORIAL_COMPLETE = 0xF29F7694,
        CLEAR_VEHICLE_LAST_DAMAGE_ENTITY = 0xC041027A,
        CLEAR_VEHICLE_LAST_WEAPON_DAMAGE = 0xE59FA6AF,
        CLEAR_WEATHER_TYPE_PERSIST = 0x6AB757D8,
        CLOSE_DEBUG_FILE = 0xAFDE128D,
        CLOSE_PATROL_ROUTE = 0x67305E59,
        CLOSE_SEQUENCE_TASK = 0x1A7CEBD0,
        COMMIT_EXPERIENCE = 0x494CD629,
        COMPARE_AGAINST_SCORE_PARAM = 0xD79D2DA4,
        COMPARE_AND_SWAP = 0xC3FFAA9F,
        COPY_ANIMATIONS = 0x2ED971A5,
        COPY_GROUP_PED_DECISION_MAKER = 0xFC573D85,
        COPY_PED_DECISION_MAKER = 0x95C28AAA,
        COS = 0x00238FE9,
        CREATE_AICOMBATACTION_COVERENTER = 0xB1F504D9,
        CREATE_AMMOBAG_PLACEMENT = 0x4976E3EC,
        CREATE_AMMOBAG_PLACEMENT_ROTATE = 0x85481503,
        CREATE_ANIMATED_TEXT = 0xDF9EC686,
        CREATE_CAM = 0xE9BF2A7D,
        CREATE_CAM_WITH_PARAMS = 0x23B02F15,
        CREATE_CHECKPOINT = 0xF541B690,
        CREATE_COORD_INTERACTION_VOLUME = 0xBBB2AA68,
        CREATE_DIRECTIONS_TO_COORD = 0x0AE0E17F,
        CREATE_DYNAMIC_PATH_OBSTRUCTION = 0x94C84500,
        CREATE_GLINT = 0x4D85E438,
        CREATE_GROUP = 0x8DC0368D,
        CREATE_LASER = 0xC530B3B5,
        CREATE_LOADOUT_SCREEN = 0x0D6A8ACE,
        CREATE_MISSION_TRAIN = 0xD4C2EAFD,
        CREATE_NEW_SCRIPTED_CONVERSATION = 0xB2BC25F8,
        CREATE_NM_MESSAGE = 0x1CFBFD4B,
        CREATE_OBJECT = 0x2F7AA05C,
        CREATE_OBJECT_MOVER = 0x757194AC,
        CREATE_OBJECT_NO_OFFSET = 0x58040420,
        CREATE_PATROL_ROUTE = 0x0A6C7864,
        CREATE_PED = 0x0389EF71,
        CREATE_PED_CORPSE = 0x48B657A1,
        CREATE_PED_INSIDE_VEHICLE = 0x3000F092,
        CREATE_PLACEMENT = 0xD8BC413C,
        CREATE_PLACEMENT_ROTATE = 0xA460F7A8,
        CREATE_PLAYER = 0x584BA966,
        CREATE_PLAYER_WITH_AVATAR = 0x3A072305,
        CREATE_PLAYER_WITH_MODEL = 0xE043534F,
        CREATE_RANDOM_FEMALE_PED = 0x5847ADE0,
        CREATE_RANDOM_MALE_PED = 0xD5E380F3,
        CREATE_RANDOM_PED = 0x5A949543,
        CREATE_RANDOM_PED_AS_DRIVER = 0xB927CE9A,
        CREATE_SCRIPT_VEHICLE_GENERATOR = 0x25A9A261,
        CREATE_SIMPLE_PED = 0x43010177,
        CREATE_VEHICLE = 0xDD75460A,
        CUTSCENE_DISABLE_CROSSHAIR = 0x78181012,
        CUTSCENE_DISABLE_FADE_IN_GAME_AT_END = 0xBAC5D71B,
        CUTSCENE_ENABLE_SKIP = 0xE9BB90DF,
        CUTSCENE_EXIST = 0xE3978BF6,
        CUTSCENE_FORCE_GAMEPLAY_HEADING_PITCH_UPDATE = 0xA46CA588,
        CUTSCENE_FORCE_PLAYER_INVISIBLE = 0xBB8277DA,
        CUTSCENE_IS_LOADED = 0xDFC021D1,
        CUTSCENE_IS_LOADING = 0x8515977D,
        CUTSCENE_IS_WAITING_FOR_MOVIE = 0x04C1C831,
        CUTSCENE_MODEL_NO_LONGER_NEEDED = 0xB8E657C2,
        CUTSCENE_NAMED_IS_LOADING = 0x9DE1B716,
        CUTSCENE_OBJECT_OVERRIDE_VISIBILITY = 0x0C63BD13,
        CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE = 0x14FC9F8B,
        CUTSCENE_REGISTER_INTERACTIVE_SEQUENCE = 0x32062668,
        CUTSCENE_REGISTER_ISEQ = 0x90CE65B1,
        CUTSCENE_REGISTER_OBJECT_ANIM = 0x5D7E7FD3,
        CUTSCENE_REGISTER_PED_ACTION_INTENTION = 0x737F461C,
        CUTSCENE_REGISTER_PED_ATTACH_TO_VEHICLE = 0xA1C12621,
        CUTSCENE_REGISTER_PED_TELEPORT = 0x7D0480F2,
        CUTSCENE_REGISTER_PED_WEAPON_HAND = 0xE4D4A26B,
        CUTSCENE_REGISTER_SET_PED_IN_COVER = 0x7DCAE70A,
        CUTSCENE_REGISTER_SET_PLAYER_IN_COVER = 0xDE14FB1B,
        CUTSCENE_REGISTER_STREAM_HELPER = 0xA8181C23,
        CUTSCENE_REGISTER_SWITCH_TO_LEVEL = 0x529E9877,
        CUTSCENE_REGISTER_SWITCH_TO_LEVEL_NAME = 0x459608C7,
        CUTSCENE_REGISTER_VEHICLE_COPY = 0xF18EBF23,
        CUTSCENE_SET_COVER_CAMERA_DIRECTION = 0x041B496A,
        CUTSCENE_SET_IS_UNAPPROVED = 0xF0CC36A5,
        CUTSCENE_SET_OVERLAY_TYPE = 0xC3E5AA5C,
        CUTSCENE_SET_WAIT_FOR_MOVIE = 0x8D86C813,
        CUTSCENE_SHOW_UNAPPROVED = 0x0D17DDF9,
        DAMAGE_ALL_GROUPS_ON_OBJECT = 0x607F48DE,
        DAMAGE_DECAL_ON_PED_BONE = 0xC7915C3D,
        DAMAGE_DECALS_ON_PED = 0x44944D79,
        DAMAGE_GLASS_IN_RADIUS = 0xE8F0A90E,
        DB_DELETE_BOOL = 0x7487EDE0,
        DB_DELETE_FLOAT = 0xC2872F67,
        DB_DELETE_INT = 0x4EDB2D6B,
        DB_GET_BOOL = 0x7195DC58,
        DB_GET_FLOAT = 0x7315F901,
        DB_GET_INT = 0xC7A9D359,
        DB_INSERT_BOOL = 0x21DC485C,
        DB_INSERT_FLOAT = 0x093EDC0A,
        DB_INSERT_INT = 0x948427BA,
        DB_IS_BOOL_VALID = 0x991BC5CF,
        DB_IS_FLOAT_VALID = 0x85027555,
        DB_IS_INT_VALID = 0x0206CC15,
        DB_SET_BOOL = 0x5557AA76,
        DB_SET_FLOAT = 0x2495C847,
        DB_SET_INT = 0x55C238F1,
        DBG_ACTIVATE_BULLET_CAM_TIME = 0x1A5014DC,
        DBG_DEACTIVATE_BULLET_CAM_TIME = 0x0820C255,
        DEACTIVATE_BULLET_TIME = 0x3C85EF7C,
        DEACTIVATE_BULLET_TIME_AS_PLAYER = 0xF73F2994,
        DEACTIVATE_SPECIAL_FX_MODIFIER = 0x02970F3E,
        DEATHRECORD_CLEAR = 0xFA6E6250,
        DEATHRECORD_CLEAR_ALL = 0x758D584E,
        DEATHRECORD_ENABLE_ASSIST_XP = 0x7B57BCB4,
        DEATHRECORD_GET_NUM_KILLERS = 0x6DE9B0D2,
        DEATHRECORD_GET_NUM_RECORDS = 0x8A3C385E,
        DEATHRECORD_GET_NUM_SHOTS = 0x2440E150,
        DEATHRECORD_GET_RECORD_BULLETCOUNT = 0x32DF7A7C,
        DEATHRECORD_GET_RECORD_COMPONENT = 0x3206476F,
        DEATHRECORD_GET_RECORD_DAMAGE = 0x6E4BAE71,
        DEATHRECORD_GET_RECORD_FLAGS = 0x6757C77E,
        DEATHRECORD_GET_RECORD_FROM = 0x299D7260,
        DEATHRECORD_GET_RECORD_INJURER = 0x15AD04A8,
        DEATHRECORD_GET_RECORD_IS_CURRENT_LIFE = 0x856DC911,
        DEATHRECORD_GET_RECORD_TIME = 0x43885806,
        DEATHRECORD_GET_RECORD_WEAPON = 0x109F9168,
        DEATHRECORD_GET_SHOT_BULLETCOUNT = 0x64D92447,
        DEATHRECORD_GET_SHOT_COMPONENT = 0x627DC94C,
        DEATHRECORD_GET_SHOT_DAMAGE = 0x3C46098C,
        DEATHRECORD_GET_SHOT_FLAGS = 0x58F142F7,
        DEATHRECORD_GET_SHOT_FROM = 0x56969A61,
        DEATHRECORD_GET_SHOT_INJURER = 0xFECD86FE,
        DEATHRECORD_GET_SHOT_IS_CURRENT_LIFE = 0xF2CD43F4,
        DEATHRECORD_GET_SHOT_TIME = 0x0F1CC37C,
        DEATHRECORD_GET_SHOT_WEAPON = 0x2EE4D113,
        DEATHRECORD_GET_SUB_KILLER_NAME = 0xE57A1FF2,
        DEATHRECORD_GET_SUB_KILLER_PERCENT = 0x664EC0F1,
        DEATHRECORD_GET_SUB_KILLER_PLAYER_INDEX = 0x403EB684,
        DEATHRECORD_GET_SUB_KILLER_PRIMARY = 0x1885BC2D,
        DEATHRECORD_GET_SUB_KILLER_RANK = 0x104186FD,
        DEATHRECORD_GET_SUB_KILLER_SECONDARY = 0x977DD5B6,
        DEATHRECORDS_CLEAR_KILLSHOTDATA = 0x1A7995E3,
        DEATHRECORDS_GET_PLAYERDETAILS_CLANTAG = 0x5D9852F1,
        DEATHRECORDS_GET_PLAYERDETAILS_NAME = 0x9F80529A,
        DEATHRECORDS_GET_PLAYERDETAILS_TITLE = 0xC0E77C55,
        DEBUG_GET_BG_SCRIPT_NAME = 0x03882657,
        DEBUG_SET_SELECTED_PED = 0x6F65ABB3,
        DEBUGDRAW_GETSCREENSPACETEXTHEIGHT = 0x5DD864FD,
        DELETE_ALL_PED_CORPSES = 0x632B0876,
        DELETE_ALL_TRAINS = 0x83DE7ABF,
        DELETE_CHECKPOINT = 0xB66CF3CA,
        DELETE_MISSION_TRAIN = 0x86C9497D,
        DELETE_OBJECT = 0xD6EF9DA7,
        DELETE_PATROL_ROUTE = 0x2A4E6706,
        DELETE_PED = 0x13EFB9A0,
        DELETE_PED_CORPSE = 0x85F66883,
        DELETE_ROPE = 0x748D72AF,
        DELETE_SCRIPT_VEHICLE_GENERATOR = 0xE4328E3F,
        DELETE_SIMPLE_PED = 0x3A945159,
        DELETE_VEHICLE = 0x9803AF60,
        DELETE_VEHICLE_ANIMATOR = 0xBD510181,
        DELETE_WIDGET = 0xB3CAB5FB,
        DELETE_WIDGET_GROUP = 0xD215BACE,
        DELETE_XML_FILE = 0xCA3AF245,
        DESTROY_ALL_CAMS = 0x10C151CE,
        DESTROY_CAM = 0xC39302BD,
        DESTROY_DYNAMIC_PATH_OBSTRUCTION = 0xCFBE7489,
        DESTROY_FRAGMENT_OBJECT = 0x9A5285B6,
        DESTROY_LASER = 0xA4C87B72,
        DESTROY_LOADOUT_SCREEN = 0x660F22FF,
        DETACH_CAM = 0xF4FBF14A,
        DETACH_OBJECT = 0x6A1DF29F,
        DETACH_PED = 0xB65BD564,
        DETACH_PED_FROM_WITHIN_VEHICLE = 0x7ABAB86B,
        DETACH_ROPE_FROM_OBJECT = 0x32C45586,
        DETACH_VEHICLE = 0xCDDBE650,
        DID_PLAYER_QUIT_LEVEL = 0x28041AC7,
        DISABLE_DIRECTIONAL_LIGHT = 0x63FA48FD,
        DISABLE_FADE_BETWEEN_SP_LEVELS = 0xD2666E85,
        DISABLE_PICKUPS_FOR_PLAYER = 0xD06B1A42,
        DISABLE_RESTART_CHECKPOINT = 0x558A8538,
        DISALLOW_JOINERS = 0x878854A3,
        DISPLAY_ARCADE_MODE_LEVEL_END = 0xD64ABCEF,
        DISPLAY_AREA_NAME = 0x489FDD41,
        DISPLAY_FRONTEND_MAP_BLIPS = 0x2C01BA1E,
        DISPLAY_HELP_TEXT_THIS_FRAME = 0x18E3360A,
        DISPLAY_HUD = 0xD10E4E31,
        DISPLAY_LOADING_SCREEN_NOW = 0x85DDA5F2,
        DISPLAY_NON_MINIGAME_HELP_MESSAGES = 0xDBD36A26,
        DISPLAY_PLAYBACK_RECORDED_VEHICLE = 0x894D590B,
        DISPLAY_PLAYER_COMPONENT = 0xA57B18ED,
        DISPLAY_PLAYER_NAMES = 0x8F01C7D0,
        DISPLAY_SEAMLESS_CUTSCENE_TRIGGER_AREA = 0xA080611B,
        DISPLAY_SYSTEM_SIGNIN_UI = 0x4264CED2,
        DISPLAY_TEXT = 0xFC4541B5,
        DISPLAY_TEXT_WITH_2_NUMBERS = 0x6931FB7C,
        DISPLAY_TEXT_WITH_3_NUMBERS = 0x23EFF6DA,
        DISPLAY_TEXT_WITH_FLOAT = 0x9B4D3A1C,
        DISPLAY_TEXT_WITH_LITERAL_STRING = 0x247F4D85,
        DISPLAY_TEXT_WITH_NUMBER = 0xECE5A56D,
        DISPLAY_TEXT_WITH_STRING = 0xB6BA7A8A,
        DISPLAY_TEXT_WITH_TWO_LITERAL_STRINGS = 0x04DA9DF6,
        DISPLAY_TEXT_WITH_TWO_STRINGS = 0xB07C454C,
        DO_SCREEN_FADE_IN = 0x66C1BDEE,
        DO_SCREEN_FADE_OUT = 0x89D01805,
        DOES_BLIP_EXIST = 0xAE92DD96,
        DOES_CAM_EXIST = 0x1EF89DC0,
        DOES_CORPSE_EXIST = 0x109EAB3D,
        DOES_DECISION_MAKER_EXIST = 0x5F912485,
        DOES_GLINT_EXIST = 0x81AF036B,
        DOES_GROUP_EXIST = 0x935C978D,
        DOES_LAUNCH_PARAM_EXIST = 0x4EE8FFA2,
        DOES_LOADOUT_SLOT_HAVE_CUSTOM_NAME = 0x6AC41269,
        DOES_MAIN_PLAYER_EXIST = 0x2528378B,
        DOES_OBJECT_EXIST = 0xB2A3021E,
        DOES_OBJECT_HAVE_PHYSICS = 0x45D1813F,
        DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS = 0x23FF2BA4,
        DOES_PAD_EXIST = 0x435A85E0,
        DOES_PED_EXIST = 0xF7C8D072,
        DOES_PICKUP_EXIST = 0x9C6DA0B3,
        DOES_PLACEMENT_EXIST = 0x002D7902,
        DOES_SCENARIO_EXIST_IN_AREA = 0xFA7F5047,
        DOES_SCRIPT_EXIST = 0xDEAB87AB,
        DOES_SPATIALDATA_COVER_POINT_EXIST = 0x2AFC1D34,
        DOES_TEXT_LABEL_EXIST = 0x6ECAE560,
        DOES_THIS_MINIGAME_SCRIPT_ALLOW_NON_MINIGAME_HELP_MESSAGES = 0xE667A6D1,
        DOES_VEHICLE_EXIST = 0x8737CC23,
        DOES_VEHICLE_HAVE_ROOF = 0xDB817403,
        DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK = 0x5D91D9AC,
        DOES_WIDGET_GROUP_EXIST = 0x2B1D2AF9,
        DOOR_ACTIVATE_SPATIAL_DATA = 0x9EC0CA1C,
        DOOR_FIND_CLOSEST = 0x3D92CE51,
        DOOR_FIND_CLOSEST_ACTIVATE_SPATIAL_DATA = 0xE902B02D,
        DOOR_FIND_CLOSEST_GET_AUTO_CLOSE = 0xBD2B780C,
        DOOR_FIND_CLOSEST_GET_CLOSE = 0x6258B9D5,
        DOOR_FIND_CLOSEST_GET_LATCH = 0xE7771339,
        DOOR_FIND_CLOSEST_GET_LIMIT_MAX = 0x3CBDA1D0,
        DOOR_FIND_CLOSEST_GET_LIMIT_MIN = 0xF54D9BF1,
        DOOR_FIND_CLOSEST_SET_AUTO_CLOSE = 0x5742CA6E,
        DOOR_FIND_CLOSEST_SET_CLOSE = 0xA38DC937,
        DOOR_FIND_CLOSEST_SET_FORCE_CLOSE = 0xCBB6E705,
        DOOR_FIND_CLOSEST_SET_LATCH = 0xF72AADBB,
        DOOR_FIND_CLOSEST_SET_LIMIT = 0x335910F4,
        DOOR_FIND_CLOSEST_SET_LIMIT_MAX = 0x12063620,
        DOOR_FIND_CLOSEST_SET_LIMIT_MIN = 0x16F2B72D,
        DOOR_GET_AUTO_CLOSE = 0x92765D98,
        DOOR_GET_CLOSE = 0x3C4E25B7,
        DOOR_GET_IS_AFFECTED_BY_BULLETS = 0x7EE155C5,
        DOOR_GET_LATCH = 0x2395F97B,
        DOOR_GET_LIMIT_MAX = 0xABF225B6,
        DOOR_GET_LIMIT_MIN = 0x06B267A5,
        DOOR_SET_AUTO_CLOSE = 0x2110CDEF,
        DOOR_SET_CLOSE = 0x8FB665F4,
        DOOR_SET_IS_AFFECTED_BY_BULLETS = 0x90E38365,
        DOOR_SET_LATCH = 0x14F0F123,
        DOOR_SET_LIMIT = 0xB0F0CB71,
        DOOR_SET_LIMIT_MAX = 0xC14B5D0D,
        DOOR_SET_LIMIT_MIN = 0xEB21CBB9,
        DRAW_ANIMATED_TEXT = 0xF8C0BE3E,
        DRAW_BACKGROUND = 0x7B6E91AF,
        DRAW_CHECKPOINT = 0x1B58B5C7,
        DRAW_CHECKPOINT_WITH_ALPHA = 0xCDC4B816,
        DRAW_COLOURED_CYLINDER = 0x6ECBA9ED,
        DRAW_CURVED_WINDOW = 0x91FEC4DF,
        DRAW_DEBUG_BOX = 0x8524A848,
        DRAW_DEBUG_CROSS = 0xB6DF3709,
        DRAW_DEBUG_LINE = 0xABF783AB,
        DRAW_DEBUG_LINE_2D = 0x1C15B9B6,
        DRAW_DEBUG_LINE_2D_WITH_TWO_COLOURS = 0x1D4DFE1E,
        DRAW_DEBUG_LINE_WITH_TWO_COLOURS = 0xE8BFF632,
        DRAW_DEBUG_POLY = 0x4213626F,
        DRAW_DEBUG_POLY_2D = 0x510260D0,
        DRAW_DEBUG_POLY_2D_WITH_THREE_COLOURS = 0x298064B4,
        DRAW_DEBUG_POLY_WITH_THREE_COLOURS = 0x0DB93013,
        DRAW_DEBUG_SPHERE = 0x304D0EEF,
        DRAW_DEBUG_TEXT = 0x269B006F,
        DRAW_DEBUG_TEXT_2D = 0x528B973B,
        DRAW_DEBUG_TEXT_WITH_OFFSET = 0xAF5808B4,
        DRAW_LINE = 0xB3426BCC,
        DRAW_MOVIE = 0xF563194B,
        DRAW_POINT_LIGHT = 0xC3277E86,
        DRAW_RECT = 0xDD2BFC77,
        DRAW_SPHERE = 0x4DD1CB3A,
        DRAW_SPOT_LIGHT = 0xBDBC410C,
        DRAW_SPRITE = 0x1FEC16B0,
        DRAW_VECTOR_MAP_CIRCLE = 0x4B0C1539,
        DRAW_VECTOR_MAP_EVENT_RIPPLE = 0x3D542EE7,
        DRAW_VECTOR_MAP_LINE = 0x50D36E09,
        DRAW_VECTOR_MAP_LINE_THICK = 0x86018420,
        DRAW_VECTOR_MAP_LOCAL_PLAYER_CAM = 0xB8641116,
        DRAW_VECTOR_MAP_MARKER = 0x4A1EE5A8,
        DRAW_VECTOR_MAP_PED = 0x9A1D0BA2,
        DRAW_VECTOR_MAP_POLY = 0x53A77F35,
        DRAW_VECTOR_MAP_RECTANGLE = 0x2D241271,
        DRAW_VECTOR_MAP_TEXT = 0x7F083534,
        DRAW_VECTOR_MAP_VEHICLE = 0x03B0965C,
        DRAW_VECTOR_MAP_WEDGE = 0x2206BE27,
        ENABLE_ADRENALINE = 0xC399BC03,
        ENABLE_AIM_ASSIST = 0x1283F44C,
        ENABLE_ALL_ADRENALINE = 0x13B5D49D,
        ENABLE_AMBIENT_STREAM = 0xBBE7F424,
        ENABLE_AMBIENT_ZONE = 0xD20ABC53,
        ENABLE_AMMOPICKUP = 0x2077903F,
        ENABLE_AUDIO_MISSION_FLAG = 0x5B1A1397,
        ENABLE_AUDIO_MIX_LAYER = 0xE9DB6185,
        ENABLE_BULLET_CAMERA_WIPE = 0xDCCD38E5,
        ENABLE_BULLETTIMEMETER = 0x5FA15459,
        ENABLE_CHECKPOINT_ICON = 0xAE5FF058,
        ENABLE_COVERPOINTMP3 = 0xE01B6BF0,
        ENABLE_COVERPOINTMP3_GROUP = 0x8C161165,
        ENABLE_COVERPOINTMP3_GROUP_FROM_LINE = 0x36ABEF8C,
        ENABLE_CROSSHAIR = 0x6C40B100,
        ENABLE_DEATHHELPERTEXT = 0xB7067496,
        ENABLE_DIRECTIONAL_SHADOWS = 0x43ACC998,
        ENABLE_DUAL_WIELD_IN_INVENTORY = 0x8625D99F,
        ENABLE_EQUIPPEDWEAPON = 0x398E8CF1,
        ENABLE_FIRST_TIME_LOCK = 0x969CF927,
        ENABLE_GLINT = 0xC0F842E8,
        ENABLE_GRAVITY_WELL = 0x684742A6,
        ENABLE_GRENADE_WARNING = 0x2C61E2B5,
        ENABLE_HEARTBEAT_RUMBLE = 0x0B6FC8F5,
        ENABLE_HIT_DETECTION = 0xE476F1D1,
        ENABLE_INVENTORY = 0x6B3C2DAC,
        ENABLE_LAST_MAN_STANDING = 0x9E8A0C27,
        ENABLE_MP_LAST_MAN_STANDING = 0x3324F915,
        ENABLE_MPM = 0x1A8BD82F,
        ENABLE_NORMAL_LINE = 0x09F3B1DC,
        ENABLE_NORMAL_LINE_BY_HASH = 0xF9850EDB,
        ENABLE_OVERHEAT_ICON = 0x085921A0,
        ENABLE_PAUSE_MENU = 0x7441D0DD,
        ENABLE_PED_JUMPING = 0x2B499736,
        ENABLE_PED_PAIN = 0xB2AE469E,
        ENABLE_PICKUP_ATTACHMENT = 0xE7836549,
        ENABLE_PLAYER_TAUNT = 0x1BE48B46,
        ENABLE_PLAYERHEALTH = 0x2ACBE7FA,
        ENABLE_SHOOT_DODGE_HIGH_FALL_STAIRS_DETECTION = 0xD579FE07,
        ENABLE_SNIPER_HUD = 0x8C6E1D09,
        ENABLE_SOFT_TARGETING = 0x7EEB362A,
        ENABLE_STATIC_EMITTER = 0x3A1AB545,
        ENABLE_TINNITUS = 0xBB3BD914,
        ENABLE_TUTORIAL_HUD = 0xC8B35409,
        ENABLE_WALLA_ZONE = 0x41CBE852,
        ENABLE_WEAPON_ATTACHMENT = 0x46AF0A59,
        ENABLE_WEAPONPICKUP = 0x1C727DAA,
        END_CONTEXT = 0xDFFE2760,
        END_CONTEXT_HASH = 0x1211D06C,
        END_POSTFX_BLENDER = 0x2307415F,
        EXISTS_SCRIPT_TUNABLE_VARIABLE_BOOL = 0x34E79A7D,
        EXISTS_SCRIPT_TUNABLE_VARIABLE_CRC_BOOL = 0xA8D360E2,
        EXP = 0xE2313450,
        EXPERIENCE_CLEAR_POINT_PER_INJURY = 0x04BD7929,
        EXPERIENCE_CLEAR_XP_PER_INJURY = 0x296B9C65,
        EXPERIENCE_SET_POINT_PER_INJURY = 0x3FE362FC,
        EXPERIENCE_SET_XP_PER_INJURY = 0x21C0A6F5,
        EXPLODE_OBJECT = 0xD20EAA32,
        EXPLODE_PED_HEAD = 0x05CC1380,
        EXPLODE_PROJECTILES = 0x35A0B955,
        EXPLODE_VEHICLE = 0xBEDEACEB,
        EXPLODE_VEHICLE_IN_CUTSCENE = 0xA85207B5,
        FINALE_GRENADE_EXPLODE_ON_IMPACT = 0x28280ABC,
        FINALE_GRENADE_LAUNCHER_SETTINGS = 0x85C263C8,
        FIND_LASER = 0xC1618EF5,
        FIND_OBJECT_AT_POSITION = 0x77984D34,
        FLOOR = 0x32E9BE04,
        FLUSH_DISCARDABLE_MEMORY = 0x8C3169D5,
        FLUSH_STREAM_MEMORY = 0x59085E59,
        FORCE_ALL_STREAMING_HELPERS_ACTIVE = 0xAD8BE232,
        FORCE_CLOSE_NETWORK = 0xD63AEB80,
        FORCE_CUSTOM_WIPE_BULLET_CAMERA = 0xDC58C1A2,
        FORCE_INTERACTIONTEXT_VISIBLE = 0xD69DFC56,
        FORCE_OPEN_NETWORK = 0x9B6F9F04,
        FORCE_PAUSEMENU_OPEN = 0x495FD473,
        FORCE_PED_TO_USE_DEATH_SUGGESTION_WHEN_SHOT = 0x290EC656,
        FORCE_QUICK_DEATH_CAMERAS = 0x60BBBAAD,
        FORCE_RED_RETICULE = 0x12F5C34E,
        FORCE_REMOVE_AND_ADD_OBJECT = 0x180D3A13,
        FORCE_SKIP_ATTRACT_SCREEN = 0x87D28A29,
        FORCE_SUBTITLES = 0x904213A2,
        FORCE_TRAIN_DOOR_OPEN_CLOSE = 0xD1E9352D,
        FORCE_UPDATE_OBJECT_PHYSICAL_STATE = 0xD2BB4445,
        FORCE_WEAPON_LOAD = 0xD97732B9,
        FORCE_WEAPON_SCOPE = 0x543C127F,
        FOUND_EXPLORATION_ITEM = 0x1E09BCAC,
        FREE_VEHICLE_INST_LIGHT_TUNE_DATA = 0x8DA263E8,
        FREEZE_CURRENT_PANEL = 0xABE10E99,
        FREEZE_OBJECT_POSITION = 0xAAFBDB10,
        FREEZE_PED_POSITION = 0xA34E3DEA,
        FREEZE_PED_POSITION_AND_DONT_LOAD_COLLISION = 0xF99B8DE7,
        FREEZE_POSITION_OF_CLOSEST_OBJECT_OF_TYPE = 0xE3709D6D,
        FREEZE_TIME_OF_DAY = 0x4ED46002,
        FREEZE_VEHICLE_POSITION = 0x1112EFCE,
        FREEZE_VEHICLE_POSITION_AND_DONT_LOAD_COLLISION = 0xBF3DF0C9,
        GAMEPLAY_HELPER_BOX_ANGLED_CREATE = 0x66CF72BB,
        GAMEPLAY_HELPER_BOX_ANGLED_CREATE_VER2 = 0x8E89F378,
        GAMEPLAY_HELPER_BOX_CREATE = 0xC7341B47,
        GAMEPLAY_HELPER_BOX_CREATE_PED_ATTACHED = 0x33AAB546,
        GAMEPLAY_HELPER_BOX_CREATE_VEHICLE_ATTACHED = 0x1859C65D,
        GAMEPLAY_HELPER_BOX_DESTROY = 0x27C9E914,
        GAMEPLAY_HELPER_BOX_SET_ENABLED = 0x75BF06F3,
        GAMEPLAY_HELPER_CYLINDER_CREATE = 0x05E76389,
        GAMEPLAY_HELPER_CYLINDER_CREATE_PED_ATTACHED = 0xF60A8C33,
        GAMEPLAY_HELPER_VOLUME_DESTROY = 0xD154D5DE,
        GAMEPLAY_HELPER_VOLUME_SET_ENABLED = 0xEAA23DE7,
        GENERATE_OBJECT_CRUSH_IMMINENT_EVENT = 0x7B18DE4C,
        GET_ACHIEVEMENT_HASH = 0x902D558D,
        GET_ACTIONTREE_INFO = 0x302A2839,
        GET_ADRENALINE_AMT = 0x1D2B1092,
        GET_AIM_CAM_ZOOL_LEVEL = 0x8850B945,
        GET_ALLOWED_TO_FAIL_COVER_FOR_BLOCKING_LINE_OF_FIRE = 0xCB1E7ADE,
        GET_AMMO_IN_CLIP = 0x73C100C3,
        GET_AMMO_IN_PED_WEAPON = 0x0C755733,
        GET_ANGLE_BETWEEN_2D_VECTORS = 0xDBF75E58,
        GET_ANIMATED_TEXT_HEIGHT = 0x71223133,
        GET_ANIMATED_TEXT_WIDTH = 0x8276E3F9,
        GET_BEST_HEADING_IF_POSSIBLE = 0x7A1EF9BD,
        GET_BG_SCRIPT_LEADERBOARD_NAME = 0x2694F2B0,
        GET_BG_SCRIPT_UNIT = 0x46D59A47,
        GET_BG_TEXTURE_FOR_BG_SCRIPT = 0x943C6E08,
        GET_BITS_IN_RANGE = 0xCA03A1E5,
        GET_BLIP_ALPHA = 0x297AF6C8,
        GET_BLIP_COLOUR = 0xDD6A1E54,
        GET_BLIP_COORDS = 0xEF6FF47B,
        GET_BLIP_INFO_ID_COORD = 0xB7374A66,
        GET_BLIP_INFO_ID_DISPLAY = 0xD0FC19F4,
        GET_BLIP_INFO_ID_OBJECT_INDEX = 0x27AB7110,
        GET_BLIP_INFO_ID_PED_INDEX = 0x0DD57007,
        GET_BLIP_INFO_ID_PICKUP_INDEX = 0x86913D37,
        GET_BLIP_INFO_ID_TYPE = 0x501D7B4E,
        GET_BLIP_INFO_ID_VEHICLE_INDEX = 0x6CB45104,
        GET_BLIP_SPRITE = 0x72FF2E73,
        GET_BLOCKING_OF_NON_TEMPORARY_EVENTS = 0xC38F2076,
        GET_BLOCKING_OF_PED_TARGETTING = 0x8C2FD714,
        GET_BOOL_FROM_XML_NODE_ATTRIBUTE = 0x2D285BBA,
        GET_BULLET_CAM_PREF = 0xCA8E8FCC,
        GET_BULLET_CAMERA_MARKER = 0xFE343BB0,
        GET_BULLET_CAMERA_SCENE_START = 0xF7334085,
        GET_BULLET_IMPACT_AREA = 0x4AB5B015,
        GET_BULLET_TIME_COUNT = 0x934E7F2D,
        GET_BULLET_TIME_TEAM_COUNT = 0x55EF252D,
        GET_CAM_COORD = 0x7C40F09C,
        GET_CAM_DOF_STRENGTH = 0x64E6B290,
        GET_CAM_FAR_CLIP = 0x09F119B8,
        GET_CAM_FAR_DOF = 0x98C5CCE9,
        GET_CAM_FOV = 0xD6E9FCF5,
        GET_CAM_MOTION_BLUR_STRENGTH = 0x54EA722E,
        GET_CAM_NEAR_CLIP = 0xCFCD35EE,
        GET_CAM_NEAR_DOF = 0x3F627534,
        GET_CAM_ROT = 0xDAC84C9F,
        GET_CAM_VIEW_MODE = 0x5A502ADD,
        GET_CAN_PED_CAN_SLOW_DOWN_WHEN_TURNING = 0x45E894EA,
        GET_CAN_PED_PLAY_LOCO_FLAVOR_STARTS = 0xD8BE7688,
        GET_CENTRE_BLIP_ID = 0x45EDA627,
        GET_CHALLENGE_FAILED_STATE = 0x8BD57283,
        GET_CHALLENGE_PROGRESS = 0x653D3616,
        GET_CHECK_HASH_FROM_CONVERSATION_ID = 0x312BFBAB,
        GET_CHECKPOINT_SELECTED = 0x2FA3742B,
        GET_CLOSEST_ENEMY_PED = 0x3E184D2D,
        GET_CLOSEST_MAJOR_VEHICLE_NODE = 0x04B5F15B,
        GET_CLOSEST_NETWORK_RESTART_NODE = 0xFFF0E04A,
        GET_CLOSEST_PED = 0x8F6C1F55,
        GET_CLOSEST_ROAD = 0x567B0E11,
        GET_CLOSEST_VEHICLE = 0xD7E26B2C,
        GET_CLOSEST_VEHICLE_NODE = 0x6F5F1E6C,
        GET_CLOSEST_VEHICLE_NODE_WITH_HEADING = 0x8BD5759B,
        GET_COMPLETED_GRIND_GOAL = 0x0EF6FE8F,
        GET_CONTENTS_OF_COMBO_WIDGET_SELECTION = 0x96868B18,
        GET_CONTENTS_OF_TEXT_WIDGET = 0x28BE9702,
        GET_COORDS_FOR_NETWORK_RESTART_NODE = 0xBBC0C52C,
        GET_CORPSE_COORDS = 0x0AAA4C65,
        GET_CORRECTED_COLOUR = 0xDB5AC03E,
        GET_CURRENT_ARCADE_MODE = 0xD7FA564A,
        GET_CURRENT_BASIC_COP_MODEL = 0xCDA04E40,
        GET_CURRENT_BASIC_POLICE_VEHICLE_MODEL = 0xE8F2B493,
        GET_CURRENT_CONTROL_CONFIG = 0xA9B6DA66,
        GET_CURRENT_COP_MODEL = 0xB26E12B4,
        GET_CURRENT_DATE = 0x781D7C7D,
        GET_CURRENT_DAY_OF_WEEK = 0xD4C86DC4,
        GET_CURRENT_FPS = 0x7030FB99,
        GET_CURRENT_LANGUAGE = 0x761BE00B,
        GET_CURRENT_LEVEL_FINISH = 0x64C8F354,
        GET_CURRENT_LEVEL_NAME = 0xD11807A3,
        GET_CURRENT_LEVEL_START = 0xF1AAFA7B,
        GET_CURRENT_LOADOUT_SLOT = 0x741531DA,
        GET_CURRENT_PED_WEAPON = 0xB0237302,
        GET_CURRENT_PLAYBACK_NUMBER_FOR_PED = 0x2BAA832F,
        GET_CURRENT_PLAYBACK_NUMBER_FOR_VEHICLE = 0x748702A9,
        GET_CURRENT_POLICE_VEHICLE_MODEL = 0xAD1B93E5,
        GET_CURRENT_SCRIPTED_CONVERSATION_LINE = 0x9620E41F,
        GET_CURRENT_STATION_FOR_TRAIN = 0x3B7DCCAA,
        GET_CURRENT_TAXI_VEHICLE_MODEL = 0x5CC9B637,
        GET_CUSTOM_PLAYER_VARIATION = 0x464688D7,
        GET_CUTSCENE_AUDIO_TIME_MS = 0xCA56C61D,
        GET_CUTSCENE_CAPTURE_REQUEST = 0xB2A87EE9,
        GET_CUTSCENE_PED_COORD = 0xEDF371D0,
        GET_CUTSCENE_SECTION_PLAYING = 0x1026F0D6,
        GET_CUTSCENE_TIME = 0x53F5B5AB,
        GET_CUTSCENE_TIME_MS = 0x1552C564,
        GET_DEAD_PED_COORDS = 0xD5BB9787,
        GET_DEAD_PED_PICKUP_COORDS = 0x129F9DC1,
        GET_DEAD_VEHICLE_COORDS = 0x3C076D19,
        GET_DEBUG_CAM = 0x76A50592,
        GET_DIFFERENCE_IN_DAYS_BETWEEN_DATES = 0x79A447E5,
        GET_DISPLAY_NAME_FROM_VEHICLE_MODEL = 0xEC86DF39,
        GET_DISTANCE_BETWEEN_COORDS = 0xF698765E,
        GET_DOES_WEAPON_EXIST = 0x066A14D7,
        GET_EXISTS_IN_PLAYER_SAVE = 0x2F849928,
        GET_EXPERIENCE_FOR_RANK = 0x16F1F9ED,
        GET_EXPERIENCE_MAX_RANK = 0x4C0782C8,
        GET_FIRST_BLIP_INFO_ID = 0x64C0273D,
        GET_FIRST_INDEX_OF = 0x893E3C02,
        GET_FLOAT_FROM_XML_NODE_ATTRIBUTE = 0x9C58C97F,
        GET_FOLLOW_PED_CAM_ZOOM_LEVEL = 0x57583DF1,
        GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL = 0x8CD67DE3,
        GET_FRAME_TIME = 0x96374262,
        GET_FRONTEND_STATE_NAME = 0x4695E609,
        GET_GAME_DIFFICULTY = 0x337B7E30,
        GET_GAME_IDLE_TIMER = 0x069FBFDC,
        GET_GAME_TEXTURE_DICT = 0x682D7B70,
        GET_GAME_TIMER = 0xA4EA0691,
        GET_GAMEPLAY_CAM_COORD = 0x9388CF79,
        GET_GAMEPLAY_CAM_FOV = 0x4D6B3BFA,
        GET_GAMEPLAY_CAM_RELATIVE_HEADING = 0xCAF839C2,
        GET_GAMEPLAY_CAM_RELATIVE_PITCH = 0xFC5A4946,
        GET_GAMEPLAY_CAM_ROT = 0x13A010B5,
        GET_GAMEPLAY_HELPER_BOX_COORD = 0xF0C17F9A,
        GET_GAMEPLAY_HELPER_CYLINDER_HEIGHT = 0xB5BE0139,
        GET_GAMEPLAY_HELPER_CYLINDER_RADIUS = 0x2F97E6C0,
        GET_GAMEPLAY_HELPER_VOLUME_COORD = 0x2A9EA7D3,
        GET_GRIND_GOAL = 0xCB12EA00,
        GET_GRIND_LEVEL = 0x20E6EB3A,
        GET_GRIND_PROGRESS = 0x455FF144,
        GET_GROUND_Z_FOR_3D_COORD = 0xA1BFD5E0,
        GET_GROUP_SIZE = 0xF7E1A691,
        GET_HASH_KEY = 0x98EFF6F1,
        GET_HEADING_FROM_VECTOR_2D = 0xD209D52B,
        GET_HEIGHT_OF_VEHICLE = 0x62990CD4,
        GET_HELP_MESSAGE_BOX_SIZE = 0x3F552D6C,
        GET_HOURS_OF_DAY = 0xD455AF99,
        GET_HUD_COLOUR = 0x63F66A0B,
        GET_ICON_TEXTURE_DICTIONARY_FOR_BG_SCRIPT = 0x424BE196,
        GET_ICON_TEXTURE_FOR_BG_SCRIPT = 0x4FB44F82,
        GET_ID_OF_THIS_THREAD = 0xDE524830,
        GET_INDEX_OF_CURRENT_LEVEL = 0x6F203C6E,
        GET_INFO_ABOUT_NEARBY_ENTITY_WITH_SPECIAL_ATTRIBUTE = 0x111F28AD,
        GET_INT_FROM_XML_NODE_ATTRIBUTE = 0x1C524DBB,
        GET_INTERACTION_VOLUME_POS = 0xAE7B9E7D,
        GET_INTERIOR_AT_COORDS = 0xA17FBF37,
        GET_INTERIOR_FROM_NAME = 0x0572A936,
        GET_INTERIOR_FROM_PED = 0xC5F6B455,
        GET_INTERIOR_FROM_VEHICLE = 0x50768666,
        GET_INTERIOR_HEADING = 0xFB56D1AC,
        GET_IS_DETONATOR_FIRED = 0x0897A3AE,
        GET_IS_HIDEF = 0x1C340359,
        GET_IS_PED_FORCED_TO_RUN = 0x8E3AA72A,
        GET_IS_PED_FORCED_TO_WALK = 0xB947D1CE,
        GET_IS_PED_LISTENING_TO_PED = 0xBDCBAABF,
        GET_IS_PED_PHOTOGRAPHING_COORD = 0xF34F8AF0,
        GET_IS_PLAYER_IN_AIR = 0x02BDCB6E,
        GET_IS_PLAYER_IN_BULLET_TIME = 0x8E5084AD,
        GET_IS_PLAYER_IN_LAST_STAND = 0x35EE1682,
        GET_IS_PLAYER_SHOOT_DODGING = 0x1E8970C1,
        GET_IS_UNLOCKED = 0x2B86B773,
        GET_IS_WIDESCREEN = 0xEC717AEF,
        GET_KEY_FOR_PED_IN_ROOM = 0x2A870D57,
        GET_KEY_FOR_VEHICLE_IN_ROOM = 0x660E2D00,
        GET_LASER_SIGHT_ATTACHMENT = 0x5019DC1E,
        GET_LAST_LEVEL_PLAYED = 0x1209CA49,
        GET_LAST_SHOT_BY_PLAYER = 0x9D48CB92,
        GET_LAST_SHOT_TO_PLAYER = 0x1279C3D4,
        GET_LAUNCH_PARAM_VALUE = 0x7C68A735,
        GET_LAUNCH_SCRIPT = 0xADB14C47,
        GET_LENGTH_OF_LITERAL_STRING = 0x99379D55,
        GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL = 0xA4CA7BE5,
        GET_LEVEL_COMPLETION = 0xD58CA839,
        GET_LOADOUT_SLOT_NAME = 0x917F5D80,
        GET_LOCAL_PLAYER_AGILITY = 0xDE0266E7,
        GET_LOCAL_PLAYER_LEGEND_LEVEL = 0x495092E8,
        GET_LOCAL_PLAYER_SPRINT_METER = 0x50A43014,
        GET_LOCAL_PLAYER_XP = 0x788C69A2,
        GET_LOCALISED_STRING = 0xEDB3726D,
        GET_LOWEST_USED_GAME_DIFFICULTY = 0xE04CBBD5,
        GET_MAP_AREA_FROM_COORDS = 0xC7191B29,
        GET_MAX_AMMO = 0x0B294796,
        GET_MAX_AMMO_IN_CLIP = 0x6961E2A4,
        GET_MAX_AMMO_IN_HAND_CLIP_MP = 0xE29942BF,
        GET_MAX_WANTED_LEVEL = 0x457F1E44,
        GET_MELEE_GRAPPLE_FAIL_CHECK_ON = 0xAE5FA062,
        GET_MINUTES_OF_DAY = 0xDA92D2D5,
        GET_MINUTES_TO_TIME_OF_DAY = 0x57CDC0FF,
        GET_MISSION_FLAG = 0x95115F97,
        GET_MOBILE_PHONE_TASK_SUB_TASK = 0xB47C4CF0,
        GET_MODEL_DIMENSIONS = 0x91ABB8E0,
        GET_MODEL_NAME = 0xCBDB1D12,
        GET_MOTION_CONTROL_PREFERENCE = 0xA4CA9C1C,
        GET_NAME_OF_CURRENT_LEVEL = 0x4EFC439F,
        GET_NAME_OF_INFO_ZONE = 0xA8CB8BF6,
        GET_NAME_OF_SCRIPT_TO_AUTOMATICALLY_START = 0x9183C7B7,
        GET_NAME_OF_ZONE = 0x7875CE91,
        GET_NAVMESH_ROUTE_DISTANCE_REMAINING = 0xD9281778,
        GET_NEARBY_OBJECT_WITH_SPECIAL_ATTRIBUTE = 0x7BAE3F92,
        GET_NEAREST_CABLE_CAR = 0xF2218830,
        GET_NEAREST_COLLECTABLE_BIN_BAGS = 0xCAEBB272,
        GET_NETWORK_PLAYER_XP = 0xF8BC3984,
        GET_NETWORK_RESTART_NODE_DEBUG = 0x9B999753,
        GET_NETWORK_TIMER = 0xF733052C,
        GET_NEXT_BLIP_INFO_ID = 0x9356E92F,
        GET_NEXT_CLOSEST_VEHICLE_NODE_WITH_HEADING_ON_ISLAND = 0xC70C3E6F,
        GET_NEXT_STATION_FOR_TRAIN = 0x234B1475,
        GET_NEXT_XML_NODE = 0xA9FDD7A1,
        GET_NTH_CLOSEST_VEHICLE_NODE = 0xF125BFCC,
        GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION = 0x928A4DEC,
        GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING = 0x7349C856,
        GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING_ON_ISLAND = 0x39998BD2,
        GET_NTH_INTEGER_IN_STRING = 0x258DD91D,
        GET_NUM_LOADOUT_SLOTS = 0xB197B3D2,
        GET_NUMBER_LINES_WITH_SUBSTRINGS = 0xD172184D,
        GET_NUMBER_OF_FIRES_IN_RANGE = 0x654D93B7,
        GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS = 0x9754C27D,
        GET_NUMBER_OF_PED_TEXTURE_VARIATIONS = 0x83D9FBE7,
        GET_NUMBER_OF_PICKUPS_AND_PLACEMENTS_OF_TYPE = 0x22DEA3F4,
        GET_NUMBER_OF_PLAYERS = 0x4C1B8867,
        GET_NUMBER_OF_PLAYERS_IN_TEAM = 0x06435F71,
        GET_NUMBER_OF_STREAMING_REQUESTS = 0xC2EE9A02,
        GET_NUMBER_OF_THREADS_RUNNING_THIS_SCRIPT = 0x1E941253,
        GET_NUMBER_OF_VEHICLE_COLOURS = 0xF2442EE2,
        GET_NUMBER_OF_XML_NODE_ATTRIBUTES = 0xED658C76,
        GET_NUMBER_OF_XML_NODES = 0x3CAACE0D,
        GET_OBJECT_ANIM_CURRENT_TIME = 0x39F0D010,
        GET_OBJECT_BONE_COORDS = 0x2046F7A6,
        GET_OBJECT_BONE_INDEX = 0x59F98953,
        GET_OBJECT_BONE_ORIENTATION = 0x4B9341F4,
        GET_OBJECT_CAN_TRIGGER_BULLET_CAM = 0xBFD5EBD4,
        GET_OBJECT_COORDS = 0x7CA0C8FB,
        GET_OBJECT_FRAGMENT_DAMAGE_HEALTH = 0xF0B330AD,
        GET_OBJECT_HEADING = 0x1C02D2F8,
        GET_OBJECT_HEALTH = 0xF9D59802,
        GET_OBJECT_MASS = 0x449F0820,
        GET_OBJECT_MATRIX = 0xF301B4FF,
        GET_OBJECT_MATRIX_VECTOR = 0x8B83EE94,
        GET_OBJECT_MODEL = 0x70BECF6A,
        GET_OBJECT_PLAYER_WILL_PICKUP = 0x45A04432,
        GET_OBJECT_QUATERNION = 0x9DAE7D3B,
        GET_OBJECT_REFLECTS = 0x8A60400E,
        GET_OBJECT_ROTATION = 0x28567FDD,
        GET_OBJECT_ROTATION_VELOCITY = 0x5B075C62,
        GET_OBJECT_SPEED = 0xA059FF6B,
        GET_OBJECT_VELOCITY = 0x2A8801CB,
        GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS = 0x7D8F26A1,
        GET_OFFSET_FROM_OBJECT_IN_WORLD_COORDS = 0x66DF1BF5,
        GET_OFFSET_FROM_PED_IN_WORLD_COORDS = 0xAD515B68,
        GET_OFFSET_FROM_VEHICLE_GIVEN_WORLD_COORDS = 0x912027D9,
        GET_OFFSET_FROM_VEHICLE_IN_WORLD_COORDS = 0x724D8621,
        GET_PAD_PITCH_ROLL = 0x666EE1CB,
        GET_PATROL_TASK_INFO = 0xFED7AA39,
        GET_PAYNEKILLER_AMT = 0x8DF47C9D,
        GET_PED_ALERTNESS = 0xF83E4DAF,
        GET_PED_ANIM_CURRENT_TIME = 0x1BAAE533,
        GET_PED_ANIM_GROUP = 0xFAF5A3C5,
        GET_PED_ANIM_TOTAL_TIME = 0xB8945721,
        GET_PED_ARMOUR = 0x2CE311A7,
        GET_PED_AS_GROUP_LEADER = 0x52873C6A,
        GET_PED_AS_GROUP_MEMBER = 0x9AA3CC8C,
        GET_PED_AWARENESS_STATE = 0x40877917,
        GET_PED_BODY_PART_DAMAGE = 0x326CB003,
        GET_PED_BONE_COORDS = 0x4579CAB1,
        GET_PED_BULLETTIME_STATUS = 0xD2B258C4,
        GET_PED_CAN_INITIATE_BULLET_CAM = 0xC15F38C0,
        GET_PED_CAN_TRIGGER_BULLET_CAM = 0x28EAACA6,
        GET_PED_COMBAT_ABILITY = 0xDCC779BB,
        GET_PED_COMBAT_MOVEMENT = 0xF3E7730E,
        GET_PED_COMBAT_RANGE_HALF_HEIGHT = 0x6E4808B0,
        GET_PED_COMBAT_RANGE_MAX = 0x647EA0D6,
        GET_PED_COMBAT_RANGE_MIN = 0x6BEBA6A8,
        GET_PED_COORDS = 0x9E3ED6AF,
        GET_PED_DAMAGE_WEAPON_TYPE = 0x93FBC5C1,
        GET_PED_DIRECTION = 0x6F0BCEAC,
        GET_PED_DRAWABLE_VARIATION = 0x29850FE2,
        GET_PED_EMOTION_STATE = 0x329F833E,
        GET_PED_EXTRACTED_DISPLACEMENT = 0x5231F901,
        GET_PED_GROUP_INDEX = 0x134E0785,
        GET_PED_HAS_PALETTE_VARIATIONS = 0xFE522C50,
        GET_PED_HAS_SEEN_DEAD_PED = 0xD05D0C57,
        GET_PED_HAS_SURRENDERED = 0xAA538B02,
        GET_PED_HEADING = 0xD8D707C6,
        GET_PED_HEALTH = 0x0ECC91AC,
        GET_PED_HEIGHT_ABOVE_GROUND = 0x1E853FEC,
        GET_PED_IN_VEHICLE_SEAT = 0x388FDE9A,
        GET_PED_LAST_DAMAGE_BONE = 0xAB933841,
        GET_PED_LAST_WEAPON_IMPACT_COORD = 0x9B266079,
        GET_PED_MAX_HEALTH = 0xA45B6C8D,
        GET_PED_MELEE_ACTION_FLAG0 = 0x98A851EE,
        GET_PED_MELEE_ACTION_FLAG1 = 0xB4EF8A7C,
        GET_PED_MODEL = 0x25F5E8E1,
        GET_PED_MODEL_FROM_INDEX = 0xC4765BEE,
        GET_PED_NM_FEEDBACK = 0x7A8E12C1,
        GET_PED_OBJECT_IS_ATTACHED_TO = 0x72ADF3FC,
        GET_PED_PALETTE_VARIATION = 0xEF1BC082,
        GET_PED_PROP_INDEX = 0x746DDAC0,
        GET_PED_PROP_POSITION = 0x7277314C,
        GET_PED_REACHED_TARGETED_GRAVWELL_CENTER = 0xA897DA4F,
        GET_PED_READY_TO_BE_EXECUTED = 0x0C2D76D7,
        GET_PED_READY_TO_BE_STUNNED = 0x082EF96E,
        GET_PED_SPEED = 0xBB824586,
        GET_PED_STEALTH_MOVEMENT = 0x40321B83,
        GET_PED_STEERS_AROUND_OBJECTS = 0xE4E47CBF,
        GET_PED_STEERS_AROUND_PEDS = 0x3FEB6AB3,
        GET_PED_SWEAT = 0x44B91E94,
        GET_PED_TEXTURE_VARIATION = 0xC0A8590A,
        GET_PED_TOXICITY_LEVEL = 0xD9809ECA,
        GET_PED_TYPE = 0xB1460D43,
        GET_PED_VELOCITY = 0xB954696C,
        GET_PED_WET_HEIGHT = 0x5DBBFF35,
        GET_PED_WETNESS = 0xF402C171,
        GET_PEDS_LAST_ATTACKER = 0x0B82351F,
        GET_PEP_PROP_ROTATION = 0x2B4DECF4,
        GET_PICKUP_AMMO = 0x8B9EE98B,
        GET_PICKUP_FROM_PLACEMENT = 0x59A39BA3,
        GET_PICKUP_LASER_SIGHT_ATTACHMENT = 0x5B17CB61,
        GET_PICKUP_TYPE_FROM_WEAPON_TYPE = 0x3F2D18CE,
        GET_PLACEMENT_COORDS = 0x8E2F0A39,
        GET_PLAYER_BULLET_TIME_STATE = 0x0105C960,
        GET_PLAYER_CAUSE_OF_DEATH = 0x007E3DE8,
        GET_PLAYER_COVER_FACING_LEFT = 0xD56D622D,
        GET_PLAYER_COVER_SECTION_UID = 0x14288A76,
        GET_PLAYER_COVER_UID = 0xCDF4F42F,
        GET_PLAYER_EXPERIENCE = 0x2100F7A5,
        GET_PLAYER_GROUP = 0xA5EDCDE8,
        GET_PLAYER_ID = 0x1CC648EA,
        GET_PLAYER_KILLER = 0x7A2356DA,
        GET_PLAYER_KILLER_NAME = 0xF160FA80,
        GET_PLAYER_KILLER_WEAPON = 0x46299DFB,
        GET_PLAYER_MAX_ARMOUR = 0x02A50657,
        GET_PLAYER_NAME = 0x406B4B20,
        GET_PLAYER_OXYGEN = 0x35EBD55D,
        GET_PLAYER_PED = 0x6E31E993,
        GET_PLAYER_POINTS = 0x38111C8B,
        GET_PLAYER_RANK = 0x0302394F,
        GET_PLAYER_RGB_COLOUR = 0x6EF43BBB,
        GET_PLAYER_SCORE = 0xA9FF2C40,
        GET_PLAYER_STREAK_ACTIVATION_LEVEL = 0x77C2EB66,
        GET_PLAYER_TEAM = 0x9873E404,
        GET_PLAYER_WANTED_LEVEL = 0xBDCDD163,
        GET_PLAYERS_LAST_VEHICLE = 0xE2757AC1,
        GET_POSITION_IN_PED_RECORDING = 0xC722356B,
        GET_POSITION_IN_RECORDING = 0x7DCD644C,
        GET_POSITION_OF_ANALOGUE_STICKS = 0x12713A99,
        GET_POSITION_OF_LAST_MOUSECLICK = 0x5EBC23BF,
        GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME = 0x7178558D,
        GET_PRESET_DURATION = 0xB61080D1,
        GET_PREVIOUS_FONT_SETTINGS = 0xA6BC3F4F,
        GET_PRIMARY_POPULATION_ZONE_GROUP = 0xBBD63009,
        GET_PROFILE_SETTING = 0xD374BEBC,
        GET_PROGRESS_BAR_PERCENT = 0xA04FB35F,
        GET_RANDOM_ENEMY_PED = 0xD48A59F0,
        GET_RANDOM_FLOAT_IN_RANGE = 0x0562C4D0,
        GET_RANDOM_INT_IN_RANGE = 0x4051115B,
        GET_RANDOM_NETWORK_RESTART_NODE = 0x943F64AD,
        GET_RANDOM_NETWORK_RESTART_NODE_USING_GROUP_LIST = 0xB150397E,
        GET_RANDOM_PED_AT_COORD = 0xDC8239EB,
        GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE = 0xD6343F6B,
        GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE = 0xDCADEB66,
        GET_RANDOM_VEHICLE_IN_SPHERE = 0x57216D03,
        GET_RANDOM_VEHICLE_MODEL_IN_MEMORY = 0xE2C45631,
        GET_RANDOM_VEHICLE_NODE = 0xAD1476EA,
        GET_RANDOM_VEHICLE_NODE_INCLUDE_SWITCHED_OFF_NODES = 0x3D6947A3,
        GET_RANDOM_VEHICLE_OF_TYPE_IN_AREA = 0x2FA2DADF,
        GET_RANDOM_WATER_NODE = 0x869EE56F,
        GET_REAL_FRAME_TIME = 0x04D12A84,
        GET_REAL_GAME_TIMER = 0x5FBEB0F6,
        GET_REAL_TIME = 0xCBB4CA94,
        GET_RECENT_WEAPON_LEVEL_UP = 0x304C0CF0,
        GET_REGISTERED_OBJECT_INDEX_POST_CUTSCENE = 0x17F49810,
        GET_REGISTERED_PED_INDEX_POST_CUTSCENE = 0xF6595859,
        GET_REGISTERED_VEHICLE_INDEX_POST_CUTSCENE = 0x27400942,
        GET_REGISTERED_WEAPON_INDEX_POST_CUTSCENE = 0xDB0F31B2,
        GET_RENDERING_CAM = 0x0FCF4DF1,
        GET_REQUESTED_LEVEL = 0xE4D2AEE3,
        GET_ROOM_AT_COORDS = 0xAE7AA07B,
        GET_ROOM_KEY_FROM_OBJECT = 0xFC452887,
        GET_ROOM_KEY_FROM_PLACEMENT = 0x3B9A0C3D,
        GET_ROPE_VERTEX_COUNT = 0x5131CD2C,
        GET_SAFE_COORD_FOR_PED = 0xB370270A,
        GET_SAFE_PLACEMENT_COORDS = 0x5491A6F9,
        GET_SAVEGAME_LEVEL = 0x6BCE5E43,
        GET_SCENE_PED_MODEL = 0x236815DF,
        GET_SCREEN_RESOLUTION = 0x29F3572F,
        GET_SCRIPT_ID_FROM_NAME_HASH = 0xB28F8DC4,
        GET_SCRIPT_MOVIE_FRAMES_REMAINING = 0xA173AAD6,
        GET_SCRIPT_RENDERTARGET_RENDER_ID = 0xE7617459,
        GET_SCRIPT_STREAM_STATE = 0xE2F9A12A,
        GET_SCRIPT_TASK_STATUS = 0xB2477B23,
        GET_SCRIPT_TUNABLE_VARIABLE_BOOL = 0x12427628,
        GET_SCRIPT_TUNABLE_VARIABLE_CRC_BOOL = 0x29DC159B,
        GET_SECONDARY_LIFE_BAR_PERCENT = 0x3FBDD93D,
        GET_SELECTED_PED_GADGET = 0x943379C2,
        GET_SEQUENCE_PROGRESS = 0xA3419909,
        GET_SORTED_NETWORK_RESTART_NODE = 0x0002B59A,
        GET_SORTED_NETWORK_RESTART_NODE_USING_GROUP_LIST = 0x040D4FAA,
        GET_SOUND_ID = 0x6AE0AD56,
        GET_SPAWN_COORDS_FOR_VEHICLE_NODE = 0xC72099BA,
        GET_SPEECH_FOR_EMERGENCY_SERVICE_CALL = 0xEDE519D6,
        GET_STABLE_NUM_OF_PRIORITY_REQUESTS = 0x84BBBC8B,
        GET_STABLE_NUM_OF_STREAMING_REQUESTS = 0xCDADFF5D,
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE = 0x4B44A83D,
        GET_STATION_NAME = 0x62D15DE6,
        GET_STREAM_PED_PACK_ID = 0x70833487,
        GET_STREET_NAME_AT_COORD = 0xDEBEEFCF,
        GET_STRING_FROM_XML_NODE_ATTRIBUTE = 0x60BF58D2,
        GET_STRING_WIDTH = 0xBABDF3D6,
        GET_STRING_WIDTH_WITH_NUMBER = 0xEAEB477D,
        GET_STRING_WIDTH_WITH_STRING = 0x048A2E6C,
        GET_SUPPRESSOR_DAMAGE_LEVEL = 0x34A03DCE,
        GET_TEXTURE = 0x6DC9C895,
        GET_TEXTURE_FROM_STREAMED_TEXTURE_DICT = 0xA8DAC5EC,
        GET_THIS_THREAD_FRIENDLY_NAME = 0x277B10EE,
        GET_TIME_OF_DAY = 0x4E1DE7A5,
        GET_TIME_POSITION_IN_PED_RECORDING = 0x42BD5D0F,
        GET_TIME_POSITION_IN_RECORDED_RECORDING = 0xF6C0D8CA,
        GET_TIME_POSITION_IN_RECORDING = 0xF8C3E4A2,
        GET_TIME_REMAINING = 0x85FA3578,
        GET_TIME_SCALE = 0x8CFD581F,
        GET_TIME_SINCE_LAST_LMS_ACTIVATION = 0x9A1FA508,
        GET_TIME_SINCE_PED_MADE_NOISE = 0x923C24E6,
        GET_TIME_SINCE_REMOTE_PED_MOVED = 0xA06F9B6C,
        GET_TIME_TIL_NEXT_STATION = 0x443BD51F,
        GET_TOTAL_DURATION_OF_VEHICLE_RECORDING = 0x5B35EEB7,
        GET_TRAIN_CABOOSE = 0xD717AD46,
        GET_TRAIN_CARRIAGE = 0x2544E7A6,
        GET_TRAIN_DIRECTION = 0x8DAF79B6,
        GET_TRAIN_PLAYER_WOULD_ENTER = 0xCB979EE4,
        GET_TRANSITION_MOVIE_FRAMES_REMAINING = 0xC483FB4A,
        GET_UI_DESCRIPTION_FOR_BG_SCRIPT = 0xDAFCCF7F,
        GET_UI_NAME_FOR_BG_SCRIPT = 0x6873C76D,
        GET_UNLOCK_EXISTS = 0x55C1F862,
        GET_UNLOCK_IS_NEW = 0xE2158FEF,
        GET_UNLOCK_IS_VISIBLE = 0x02BFABD3,
        GET_VEHICLE_BONE_INDEX = 0x235C4335,
        GET_VEHICLE_COLOURS = 0x40D82D88,
        GET_VEHICLE_COORDS = 0x01935124,
        GET_VEHICLE_DEFORMATION_AT_POS = 0xABF02075,
        GET_VEHICLE_DIRT_LEVEL = 0xFD15C065,
        GET_VEHICLE_DOOR_ANGLE_RATIO = 0x0E399C26,
        GET_VEHICLE_DOOR_LOCK_STATUS = 0x0D72CEF2,
        GET_VEHICLE_ENGINE_HEALTH = 0x8880038A,
        GET_VEHICLE_EXTRA_COLOURS = 0x80E4659B,
        GET_VEHICLE_FIXED_WEAPON_ACCURACY = 0x5A18B080,
        GET_VEHICLE_FIXED_WEAPON_DAMAGE = 0x05C718BD,
        GET_VEHICLE_FIXED_WEAPON_FIRING_PATTERN_MODE = 0x38D33245,
        GET_VEHICLE_FORWARD_VECTOR = 0xEE053B15,
        GET_VEHICLE_FORWARD_X = 0x48F59C5E,
        GET_VEHICLE_FORWARD_Y = 0x780C7A8B,
        GET_VEHICLE_HEADING = 0x4155B124,
        GET_VEHICLE_HEALTH = 0x3FBCAEB5,
        GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS = 0x0A2FC08C,
        GET_VEHICLE_MODEL = 0x70FB6D3A,
        GET_VEHICLE_MODEL_FROM_INDEX = 0x70691B3C,
        GET_VEHICLE_MODEL_VALUE = 0x58FEFC3D,
        GET_VEHICLE_NUMBER_OF_PASSENGERS = 0x1EF20849,
        GET_VEHICLE_OBJECT_IS_ATTACHED_TO = 0x5DFD6E29,
        GET_VEHICLE_PED_IS_IN = 0xAFE92319,
        GET_VEHICLE_PED_IS_USING = 0x6DE3AADA,
        GET_VEHICLE_PETROL_TANK_HEALTH = 0xE41595CE,
        GET_VEHICLE_PITCH = 0x2680C924,
        GET_VEHICLE_QUATERNION = 0xD30891FA,
        GET_VEHICLE_ROLL = 0xD48A9E8B,
        GET_VEHICLE_SIREN_HEALTH = 0x64F0CA0B,
        GET_VEHICLE_SPEED = 0x9B115A40,
        GET_VEHICLE_SPEED_VECTOR = 0x2E52BB9A,
        GET_VEHICLE_UPRIGHT_VALUE = 0x1D761FBC,
        GET_WATER_HEIGHT = 0xD864E17C,
        GET_WATER_HEIGHT_NO_WAVES = 0x262017F8,
        GET_WEAPON_AMMO = 0x2AFE4788,
        GET_WEAPON_AMMO_IN_CLIP = 0x09E9F10F,
        GET_WEAPON_FROM_HAND = 0xF5A9F0F9,
        GET_WEAPON_FROM_HOLSTER = 0x4F1AB270,
        GET_WEAPON_FROM_SLOT = 0x363C0973,
        GET_WEAPON_GUNTYPE = 0x43AF022D,
        GET_WEAPON_HUD_TEXTURE = 0x9D6061F5,
        GET_WEAPON_LEVEL = 0x4F06494C,
        GET_WEAPON_NAME = 0x0BE7A3F5,
        GET_WEAPON_SPAWNS_PICKUP = 0xCDFDA942,
        GET_WEAPON_TYPE = 0x706A4B6F,
        GET_WEAPONTYPE_AMMO = 0x687CABD1,
        GET_WEAPONTYPE_MODEL = 0x44E1C269,
        GET_XML_NAMED_NODE = 0x0E5855B5,
        GET_XML_NODE_ATTRIBUTE_NAME = 0xC93DD4B8,
        GET_XML_NODE_NAME = 0x8450DBA1,
        GIVE_ACHIEVEMENT_TO_PLAYER = 0x822BC992,
        GIVE_BG_SCRIPT_AWARD = 0xDE4ECCE9,
        GIVE_DELAYED_WEAPON_TO_PED = 0x5868D20D,
        GIVE_PED_ARMOUR_MP_REWARD = 0x1DE9A391,
        GIVE_PED_FAKE_NETWORK_NAME = 0xBA223E7B,
        GIVE_PED_HELMET = 0x1862A461,
        GIVE_PED_HELMET_WITH_OPTS = 0x0BEC2729,
        GIVE_PED_NM_MESSAGE = 0x737C3689,
        GIVE_PED_PICKUP_OBJECT = 0x3B653867,
        GIVE_PLAYER_MP_SPECIAL_ITEM = 0x778E0144,
        GIVE_PLAYER_RAGDOLL_CONTROL = 0xC7B4D7AC,
        GIVE_WEAPON_TO_PED = 0xC4D88A85,
        GIVE_WEAPON_TO_PED_HAND = 0xD2103032,
        GIVE_WEAPON_TO_PED_HOLSTER = 0x865E839A,
        HANDLE_CHECKPOINT_RESTART = 0x821221B4,
        HAS_ACHIEVEMENT_BEEN_PASSED = 0x136A5BE9,
        HAS_ACHIEVEMENT_HASH = 0xCE0909E9,
        HAS_ADDITIONAL_TEXT_LOADED = 0xB0E56045,
        HAS_ANIM_DICT_LOADED = 0x05E6763C,
        HAS_BULLET_IMPACTED_IN_AREA = 0x902BC7D9,
        HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_DAMAGED_BY_PED = 0x25620891,
        HAS_COLLISION_FOR_MODEL_LOADED = 0x41A094F8,
        HAS_CUTSCENE_FINISHED = 0x5DED14B4,
        HAS_CUTSCENE_LOADED = 0xF9998582,
        HAS_CUTSCENE_UNLOADED = 0x5BBE8974,
        HAS_DEATHARREST_EXECUTED = 0x6DCD115A,
        HAS_EXPLORATION_ITEM_BEEN_FOUND = 0xE8E8D39B,
        HAS_FRAGMENT_ANY_OF_OBJECT_BEEN_DAMAGED = 0x02AD2B87,
        HAS_FRAGMENT_ROOT_OF_CLOSEST_OBJECT_OF_TYPE_BEEN_DAMAGED = 0x08DF011C,
        HAS_FRAGMENT_ROOT_OF_OBJECT_BEEN_DAMAGED = 0xD9EA7576,
        HAS_LOAD_JUST_OCCURRED = 0x12F1F57B,
        HAS_MODEL_LOADED = 0x62BFDB37,
        HAS_OBJECT_BEEN_DAMAGED = 0x3B4FB8FD,
        HAS_OBJECT_BEEN_DAMAGED_BY_PED = 0x730EAA9E,
        HAS_OBJECT_BEEN_DAMAGED_BY_VEHICLE = 0x7098F746,
        HAS_OBJECT_BEEN_UPROOTED = 0xC220DB67,
        HAS_OBJECT_COLLIDED_WITH_ANYTHING = 0xD9B3DBC9,
        HAS_OVERRIDEN_SIT_IDLE_ANIM_FINISHED = 0xD8A5D041,
        HAS_PED_ANIM_FINISHED = 0xBB6C6A0B,
        HAS_PED_BEEN_DAMAGED_BY_PED = 0xEA58F6FB,
        HAS_PED_BEEN_DAMAGED_BY_VEHICLE = 0x437430FB,
        HAS_PED_BEEN_DAMAGED_BY_WEAPON = 0xCDFBBCC6,
        HAS_PED_CLEAR_LOS_TO_PED = 0xED49888E,
        HAS_PED_CLEAR_LOS_TO_PED_IN_FRONT = 0xDDA4D00F,
        HAS_PED_CLEAR_LOS_TO_SPHERE = 0x07D2C95F,
        HAS_PED_GOT_SPECIFIC_WEAPON = 0x8AF064CF,
        HAS_PED_GOT_WEAPON = 0x43D2FA82,
        HAS_PED_RECORDING_BEEN_LOADED = 0xAE24DA83,
        HAS_PED_TRIGGERED_MPM = 0x78314008,
        HAS_PLACEMENT_BEEN_COLLECTED = 0xC516E7D1,
        HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED = 0x14F52453,
        HAS_RELOADED_WITH_MOTION_CONTROL = 0xE338B363,
        HAS_SCRIPT_LOADED = 0x5D67F751,
        HAS_SELECTED_RETRY_CHECKPOINT = 0x64F307B9,
        HAS_SHOT_BEEN_FIRED_IN_AREA = 0xD08B8C7A,
        HAS_SOMETHING_EXPLODED_IN_AREA = 0x8D098F9F,
        HAS_SOUND_FINISHED = 0xE85AEC2E,
        HAS_STREAMED_TEXTURE_DICT_LOADED = 0x3F436EEF,
        HAS_STREAMPED_LOADED = 0x216F12A4,
        HAS_THIS_ADDITIONAL_TEXT_LOADED = 0x80A52040,
        HAS_VEHICLE_BEEN_DAMAGED_BY_PED = 0x4C5F25C0,
        HAS_VEHICLE_BEEN_DAMAGED_BY_VEHICLE = 0xBCE93004,
        HAS_VEHICLE_BEEN_DAMAGED_BY_WEAPON = 0xB14B7C18,
        HAS_VEHICLE_BEEN_RESPRAYED = 0x22F50111,
        HAS_VEHICLE_GOT_PROJECTILE_ATTACHED = 0xA57E2E80,
        HAS_VEHICLE_RECORDING_BEEN_LOADED = 0xF52CD7F5,
        HAS_VEHICLE_STOPPED_BECAUSE_OF_LIGHT = 0xCCA89C4C,
        HAS_WEAPON_LOADED = 0x4132E42F,
        HELI_SPOTLIGHT_TRACK_PED = 0x5F44E3E6,
        HIDE_HELP_TEXT_THIS_FRAME = 0xF3807BED,
        HIDE_LOADING_ON_FADE_THIS_FRAME = 0x35087963,
        HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE = 0x00CFD6E9,
        HOLD_LAST_MAN_STAND_ANIMATED_RECOVERY = 0xB90B9868,
        HUD_ARE_GANGWARS_ANIMS_COMPLETE = 0x7C4C7D45,
        HUD_SCOREBOARD_GETPLAYERPOSITION = 0x581C7D26,
        HUD_SCOREBOARD_RESETALLPLAYERXP = 0x98AF4AB7,
        HUD_SCOREBOARD_RESETPLAYERXP = 0xC5437B8F,
        HUD_SCOREBOARD_SETGW_TALLY_SCORES = 0xB4D65DD8,
        HUD_SCOREBOARD_SETGWNODE = 0xBBB66CB1,
        HUD_SCOREBOARD_SETPLAYERBASEXP = 0x1742CD46,
        HUD_SCOREBOARD_SETPLAYERVALUES_ASSISTS = 0x7F885408,
        HUD_SCOREBOARD_SETPLAYERVALUES_FAKE_ALIVE = 0x96A91A36,
        HUD_SCOREBOARD_SETPLAYERVALUES_FAKE_DEAD = 0x64493D6D,
        HUD_SCOREBOARD_SETPLAYERVALUES_KILLDEATH = 0x61D1AF52,
        HUD_SCOREBOARD_SETPLAYERVALUES_LIVES = 0xCA96230B,
        HUD_SCOREBOARD_SETPLAYERVALUES_POINTS = 0xCAE15E7C,
        HUD_SCOREBOARD_SETPLAYERVALUES_ROLE = 0xBD05410B,
        HUD_SCOREBOARD_SETPLAYERVALUES_TEAM = 0xFF4217BA,
        HUD_SCOREBOARD_SETPLAYERVALUES_VENDETTA = 0x0BAB504D,
        HUD_SCOREBOARD_SETPLAYERVALUES_XP2 = 0x320884BF,
        HUD_SCOREBOARD_SETPROGRESS = 0xA6F24CFB,
        HUD_SCOREBOARD_SETTEAMNAMES = 0x921D2407,
        HUD_SCOREBOARD_SHOW = 0xF068DFC8,
        HUD_SCOREBOARD_SORT_BY = 0xB19BBC22,
        HUD_SET_CURRENT_STREAK = 0x296B0492,
        HUD_SET_PLAYER_HEALTH_TEXTURE = 0x954FDCD0,
        HUD_SET_SCORETIMER = 0xDA7B6C20,
        I_SEQUENCE_DOES_EXIST = 0x50983774,
        I_SEQUENCE_INTERRUPT = 0xA443351D,
        I_SEQUENCE_IS_LOADED = 0x94DBA0E6,
        I_SEQUENCE_LOAD_DATA = 0x5DEB82E0,
        I_SEQUENCE_PURGE_ALL = 0x45B60B4A,
        I_SEQUENCE_QUERY_ENTITY_STATE = 0x0F931337,
        I_SEQUENCE_QUERY_STATE = 0xB4FE00D1,
        I_SEQUENCE_REGISTER_ENTITY = 0xB11EA6E2,
        I_SEQUENCE_SETUP = 0x73701072,
        I_SEQUENCE_START = 0x4B7BA507,
        I_SEQUENCE_TERMINATE = 0xE7C99C4C,
        I_SEQUENCE_UNREGISTER_ENTITY = 0x760F4681,
        INCREMENT_CHECKPOINT_ATTEMPT = 0xAF1C3055,
        INCREMENT_STREAK_STAT = 0x3CBC4B74,
        INIT_RINGICON_DATA = 0xE7B01199,
        INIT_TICKER_DATA = 0xDF4E6CEB,
        INT_TO_PLAYERINDEX = 0x98DD98F1,
        INVOKE_SPECTATOR_CAM = 0xCFD752C6,
        IS_2PLAYER_GAME_GOING_ON = 0xD60115D4,
        IS_ACTION_CONSUMED = 0x2253B4DA,
        IS_ACTION_TREE_LOADED = 0x79A8621E,
        IS_AIM_CAM_ACTIVE = 0xC24B4F6F,
        IS_AMBIENT_SPEECH_DISABLED = 0x109D1F89,
        IS_AMBIENT_SPEECH_PLAYING = 0x1972E8AA,
        IS_AMED_ENABLED = 0xEA4F2A84,
        IS_ANIMATED_CAMERA_PLAYING = 0x7FB6E861,
        IS_ANY_GRENADE_IN_HELPER_BOX = 0x6171AE9F,
        IS_ANY_PED_SHOOTING_IN_AREA = 0x91833867,
        IS_ANY_SPEECH_PLAYING = 0x2B74A6D6,
        IS_ANYONE_INTERACTING_WITH_VOLUME = 0x461C258F,
        IS_ARCADE_MODE_ACTIVE = 0x93A9462E,
        IS_AREA_OCCUPIED = 0xC013972F,
        IS_AUSSIE_VERSION = 0x944BA1DC,
        IS_BIG_VEHICLE = 0x9CDBA8DE,
        IS_BIT_SET = 0x902E26AC,
        IS_BLIP_SHORT_RANGE = 0x1226765A,
        IS_BULLET_CAMERA_ACTIVE = 0xB5B03846,
        IS_BULLET_CAMERA_RUNNING = 0xC0B3AD61,
        IS_BULLET_CAMERA_SCENE_ACTIVE = 0x05D6EAC4,
        IS_BULLET_CAMERA_TO_GAMEPLAY_ALLOWED = 0x60EBB1EB,
        IS_BULLET_CAMERA_WIPE_ENABLED = 0x7E5F8C2D,
        IS_BULLET_CAMERA_WIPE_STOPPED = 0xB271F669,
        IS_BULLET_IN_AREA = 0xB54F46CA,
        IS_BULLET_IN_BOX = 0xAB73ED26,
        IS_BULLET_TIME_ACTIVE = 0xCDC1B8A3,
        IS_BUTTON_JUST_PRESSED = 0x7FCD1FA1,
        IS_BUTTON_PRESSED = 0x7BCB3F15,
        IS_CAM_ACTIVE = 0x4B58F177,
        IS_CAM_INTERPOLATING = 0x7159CB5D,
        IS_CAM_RENDERING = 0x6EC6B5B2,
        IS_CAM_SHAKING = 0x0961FD9B,
        IS_CAMERA_AIMING_AT_ENEMY = 0x7AD6405B,
        IS_CLOSEST_OBJECT_OF_TYPE_SMASHED_OR_DAMAGED = 0x7E3857CE,
        IS_COLLECTABLE_ENABLED = 0x473FF184,
        IS_CONTROL_JUST_PRESSED = 0x4487F579,
        IS_CONTROL_PRESSED = 0x517A4384,
        IS_COP_VEHICLE_IN_AREA_3D = 0xFB16C6D1,
        IS_CUSTOM_PLAYER_VARIATION = 0x2E325641,
        IS_DAMAGE_BY_PROJECTILE = 0x16BE6900,
        IS_DEATH_PANEL_WIPE_ALLOWED = 0xFA0FC3B6,
        IS_EXITFLAG_SET = 0x687ECC3C,
        IS_EXPLOSION_IN_AREA = 0xFB40075B,
        IS_EXPLOSION_IN_SPHERE = 0xD455A7F3,
        IS_FOLLOW_PED_CAM_ACTIVE = 0x9F9E856C,
        IS_FOLLOW_VEHICLE_CAM_ACTIVE = 0x8DD49B77,
        IS_FRONTEND_FADING = 0x8FF6232C,
        IS_GAME_IN_CONTROL_OF_MUSIC = 0x7643170D,
        IS_GAME_KEYBOARD_KEY_JUST_PRESSED = 0x3FEEBF9C,
        IS_GAME_KEYBOARD_KEY_PRESSED = 0x958135C3,
        IS_GAMEPLAY_CAM_SHAKING = 0x3457D681,
        IS_GAMEPLAY_HINT_ACTIVE = 0xAD8DA205,
        IS_GERMAN_VERSION = 0xE023A0AD,
        IS_GLASS_BROKEN_IN_RADIUS = 0x42A3F611,
        IS_GLASS_BROKEN_ON_OBJECT = 0xDAEAC978,
        IS_GOLDEN_GUN_FINISHED = 0xD92C7E81,
        IS_GRIND_COMPLETE = 0x81AB05BB,
        IS_HELI_PART_BROKEN = 0xF4E4C439,
        IS_HELP_MESSAGE_BEING_DISPLAYED = 0xA65F262A,
        IS_HUD_PREFERENCE_SWITCHED_ON = 0xC3BC1B4F,
        IS_HUD_RETICULE_COMPLEX = 0x9A99C9C7,
        IS_IN_CPCHALLENGE_MODE = 0xE43D4E47,
        IS_IN_NYM_HARDCORE_MODE = 0x45C22E47,
        IS_IN_NYMINUTE_MODE = 0x62AE43CB,
        IS_IN_SCORE_ATTACK_MODE = 0x37A598E6,
        IS_IN_SOUTHPAW_MODE = 0x18D7934F,
        IS_IN_SPECTATOR_MODE = 0x1A8853B0,
        IS_IN_STORY_MODE = 0x442DD86B,
        IS_INTERACTIONTEXT_AVAILABLE = 0x419C48B7,
        IS_INTERACTIONTEXT_ONSCREEN = 0x22C325FB,
        IS_INTERIOR_SCENE = 0x55226C13,
        IS_INTRO_MOVIE_CANCELLED = 0xC5F70C9A,
        IS_JAPANESE_GAME = 0x4F2A77E3,
        IS_KEYBOARD_KEY_JUST_PRESSED = 0xEAC23998,
        IS_KEYBOARD_KEY_PRESSED = 0xA644ED03,
        IS_LAST_MAN_STAND_ANIMATED_RECOVERY_BEING_HELD = 0x76DDD1A5,
        IS_LAST_MAN_STANDING_ACTIVE = 0xB9087B11,
        IS_LEFT_VEHICLE_HEADLIGHT_BROKEN = 0x49A6D893,
        IS_LMS_TUTORIAL_COMPLETE = 0x8357057A,
        IS_LOADOUT_SLOT_AVAILABLE = 0xFA76A13A,
        IS_LOADOUT_VALID = 0x5ACBCBF0,
        IS_LOCAL_PLAYER_IN_SOCIAL_CLUB = 0x167AF0DF,
        IS_LOCAL_PLAYER_READY_TO_INTERACT_WITH = 0x303F8C07,
        IS_LOCAL_PLAYER_SPRINTING = 0x4D6AC4DF,
        IS_LOCAL_PLAYER_STILL_SCANNING_WORLD = 0x6AADAD69,
        IS_LOOK_INVERTED = 0x313434B2,
        IS_MAGDEMO = 0x6A50485A,
        IS_MARKETING_KEYBOARD_KEY_JUST_PRESSED = 0xBA00B7F4,
        IS_MESSAGE_BEING_DISPLAYED = 0x6A77FE8D,
        IS_MINIGAME_IN_PROGRESS = 0x53A95E13,
        IS_MODEL_A_PED = 0x4B933365,
        IS_MODEL_A_VEHICLE = 0xFFFC85D4,
        IS_MODEL_IN_CDIMAGE = 0x1094782F,
        IS_MONOLOGUE_PLAYING = 0xF6006ECB,
        IS_MP_TUTORIAL_MESSAGES_SHOWN = 0xF501D241,
        IS_NETWORK_SESSION = 0x1D8FEF54,
        IS_NEW_GAME_REQUESTED = 0xF994E7DC,
        IS_NON_FRAG_OBJECT_SMASHED = 0xF7AE77B6,
        IS_OBJECT_AT_COORD = 0x0C1C0A8B,
        IS_OBJECT_ATTACHED = 0xAD08BA79,
        IS_OBJECT_FIXED_WAITING_FOR_COLLISION = 0x56AD22D0,
        IS_OBJECT_IN_ANGLED_AREA = 0xABF09CB4,
        IS_OBJECT_IN_AREA = 0x3DDBD2DE,
        IS_OBJECT_IN_CROSSHAIR_CYLINDER = 0x0BA48CEA,
        IS_OBJECT_IN_GAMEPLAY_HELPER_BOX = 0xB51CBB2F,
        IS_OBJECT_IN_WATER = 0xEB448F66,
        IS_OBJECT_ON_FIRE = 0xAC830162,
        IS_OBJECT_ON_SCREEN = 0x2AE883EB,
        IS_OBJECT_PLAYING_ANIM = 0x8CA17B14,
        IS_OBJECT_REASSIGNMENT_IN_PROGRESS = 0x127EE29C,
        IS_OBJECT_STATIC = 0x49A1DD0E,
        IS_OBJECT_UPRIGHT = 0x45D7281E,
        IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE = 0xBA4CAA56,
        IS_PAUSE_MENU_ACTIVE = 0xD3600591,
        IS_PC_BUILD = 0xE6A62D57,
        IS_PED_A_MISSION_PED = 0xB653748D,
        IS_PED_ARMED = 0x0BFC892C,
        IS_PED_AT_COORD = 0x2DCD8806,
        IS_PED_AT_OBJECT = 0x7CE82D5F,
        IS_PED_AT_PED = 0xCD0373CE,
        IS_PED_AT_VEHICLE = 0xA9191096,
        IS_PED_ATTACHED_TO_ANY_VEHICLE = 0x0679A04D,
        IS_PED_ATTACHED_TO_OBJECT = 0xEA085F14,
        IS_PED_BEING_GRAPPLED = 0x67C09EDB,
        IS_PED_BEING_JACKED = 0xD45D605C,
        IS_PED_BLINDFIRING_IN_COVER = 0x12A8D4BA,
        IS_PED_CLONED_EVERYWHERE = 0xEBA43DE8,
        IS_PED_DEAD = 0xF990EBB2,
        IS_PED_DOING_DRIVEBY = 0xAC3CEB9C,
        IS_PED_DUAL_WIELDING = 0x03418403,
        IS_PED_DUCKING = 0x9199C77D,
        IS_PED_FACING_PED = 0x0B775838,
        IS_PED_FATALLY_INJURED = 0xBADA0093,
        IS_PED_FLEEING = 0x85D813C6,
        IS_PED_GESTURING = 0x28ADE9BC,
        IS_PED_GETTING_INTO_A_VEHICLE = 0x90E805AC,
        IS_PED_GETTING_UP = 0x320813E6,
        IS_PED_GROUP_LEADER = 0xC8A9FB5A,
        IS_PED_GROUP_MEMBER = 0x876D5363,
        IS_PED_HEADTRACKING_PED = 0x2A5DF721,
        IS_PED_HIDING_IN_COVER = 0x931B95B5,
        IS_PED_IN_AIR = 0xD0060B64,
        IS_PED_IN_ANGLED_AREA = 0x67D32AF9,
        IS_PED_IN_ANY_BOAT = 0x1118A947,
        IS_PED_IN_ANY_HELI = 0x7AB5523B,
        IS_PED_IN_ANY_PLANE = 0x51BBCE7E,
        IS_PED_IN_ANY_POLICE_VEHICLE = 0x84FA790D,
        IS_PED_IN_ANY_TAXI = 0x16FD386C,
        IS_PED_IN_ANY_TRAIN = 0x759EF63A,
        IS_PED_IN_ANY_VEHICLE = 0x3B0171EE,
        IS_PED_IN_AREA = 0x1B4FD43E,
        IS_PED_IN_COMBAT = 0xFE027CB5,
        IS_PED_IN_COVER = 0x972C5A8B,
        IS_PED_IN_CROSSHAIR_CONE = 0x21C18EA9,
        IS_PED_IN_CROSSHAIR_CYLINDER = 0xC98A0FFA,
        IS_PED_IN_CROSSHAIR_CYLINDER_OFFSET = 0xCA2F07C7,
        IS_PED_IN_FLYING_VEHICLE = 0xCA072485,
        IS_PED_IN_GAMEPLAY_HELPER_BOX = 0xEEC61845,
        IS_PED_IN_GAMEPLAY_HELPER_VOLUME = 0xF6AC4889,
        IS_PED_IN_GROUP = 0x836D9795,
        IS_PED_IN_MELEE_COMBAT = 0xFD7814A5,
        IS_PED_IN_MODEL = 0xA6438D4B,
        IS_PED_IN_SEAMLESS_TRIGGER_AREA = 0xF6589F70,
        IS_PED_IN_SPHERE_AREA_OF_ANY_ENEMY_PEDS = 0x0A76F4AE,
        IS_PED_IN_VEHICLE = 0x7DA6BC83,
        IS_PED_IN_WATER = 0x2A7FBBDF,
        IS_PED_IN_ZONE = 0x4EECB942,
        IS_PED_INJURED = 0x2530A087,
        IS_PED_INSIDE_TRAIN = 0x84D170A5,
        IS_PED_INVESTIGATING = 0x53806A49,
        IS_PED_JACKING = 0x3B321816,
        IS_PED_LOS_CLEAR_TO_TARGET_PED = 0xBEE1E2F1,
        IS_PED_MALE = 0x90950455,
        IS_PED_MODEL = 0x5F1DDFCB,
        IS_PED_ON_ANY_BIKE = 0x4D885B2E,
        IS_PED_ON_FIRE = 0x5EC1A4D3,
        IS_PED_ON_FOOT = 0xC60D0785,
        IS_PED_ON_SCREEN = 0xDF7C1119,
        IS_PED_PEEKING_IN_COVER = 0xA612B87E,
        IS_PED_PICKING_UP_PICKUP = 0xC213D3FA,
        IS_PED_PLAYING_ANIM = 0x0C504868,
        IS_PED_PROCESSING_FROZEN = 0xE1203F37,
        IS_PED_RAGDOLL = 0xC833BBE1,
        IS_PED_RELOADING = 0x961E1745,
        IS_PED_RESPONDING_TO_EVENT = 0x7A877554,
        IS_PED_RETREATING = 0x27240BFE,
        IS_PED_RUNNING_TASK = 0x10BF1163,
        IS_PED_SHOOTING = 0xE7C3405E,
        IS_PED_SHOOTING_IN_AREA = 0x741BF04F,
        IS_PED_SITTING_IDLE = 0x98F2F27D,
        IS_PED_SITTING_IN_ANY_VEHICLE = 0x0EA9CA03,
        IS_PED_SITTING_IN_VEHICLE = 0xDDDE26FA,
        IS_PED_STOPPED = 0xA0DC0B87,
        IS_PED_STUCK_UNDER_VEHICLE = 0x2645971C,
        IS_PED_SWIMMING = 0x7AB43DB8,
        IS_PED_TOUCHING_OBJECT = 0x0A82C348,
        IS_PED_TOUCHING_PED = 0x12C5484A,
        IS_PED_TOUCHING_VEHICLE = 0x22D9AC0C,
        IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE = 0x46828B4E,
        IS_PED_USING_ANY_SCENARIO = 0x195EF5B7,
        IS_PED_USING_MP3_COVER_TASK = 0x3ACBC86C,
        IS_PED_USING_SCENARIO = 0x0F65B0D4,
        IS_PED_VAULTING = 0xC3169BDA,
        IS_PED_VISIBLE = 0xE285085A,
        IS_PED_WAITING_FOR_WORLD_COLLISION = 0x28BCF200,
        IS_PICKUP_ATTACHMENT_ENABLED = 0x565F0B42,
        IS_PICKUP_ATTACHMENT_TOGGLED = 0x89F779D5,
        IS_PICKUP_CONSUMED = 0x21F50584,
        IS_PLAYBACK_GOING_ON_FOR_PED = 0xEAD70A7A,
        IS_PLAYBACK_GOING_ON_FOR_VEHICLE = 0x61F7650D,
        IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE = 0x63022C58,
        IS_PLAYER_BEING_ARRESTED = 0x7F6A60D3,
        IS_PLAYER_CLIMBING = 0x4A9E9AE0,
        IS_PLAYER_CONTROL_ON = 0x618857F2,
        IS_PLAYER_DEAD = 0x140CA5A8,
        IS_PLAYER_DOING_MELEE_GRAPPLE = 0x5EECF4E4,
        IS_PLAYER_FREE_AIMING_AT_PED = 0x571529AE,
        IS_PLAYER_FREE_FOR_AMBIENT_TASK = 0x85C7E232,
        IS_PLAYER_GUN_RAISED = 0x94985FF7,
        IS_PLAYER_INTERACTING_WITH_VOLUME = 0x424D60A3,
        IS_PLAYER_LOCKED_IN_COVER = 0x78A1970D,
        IS_PLAYER_LOGGING_IN_NP = 0x8F72FAD0,
        IS_PLAYER_ONLINE = 0x9FAB6729,
        IS_PLAYER_ONLINE_GAMESPY = 0x86D608A4,
        IS_PLAYER_ONLINE_NP = 0x41FAD3E2,
        IS_PLAYER_PED_FREE_AIMING_AT_PED = 0x8E8B926C,
        IS_PLAYER_PISSED_OFF = 0x21A65E2F,
        IS_PLAYER_PLAYING = 0xE15D777F,
        IS_PLAYER_PRESSING_HORN = 0xED1D1662,
        IS_PLAYER_READY_FOR_CUTSCENE = 0xBB77E9CD,
        IS_PLAYER_SCORE_GREATER = 0xFA624B66,
        IS_PLAYER_SCRIPT_CONTROL_ON = 0x61B00A84,
        IS_PLAYER_SHOOTDODGING = 0xEEA47566,
        IS_PLAYER_TARGETTING_ANYTHING = 0x456DB50D,
        IS_PLAYER_TARGETTING_OBJECT = 0x622796D5,
        IS_PLAYER_TARGETTING_PED = 0xDBE470DD,
        IS_PLAYER_WANTED_LEVEL_GREATER = 0x589A2661,
        IS_POINT_OBSCURED_BY_A_MISSION_ENTITY = 0xC161558D,
        IS_PROJECTILE_IN_AREA = 0x78E1A557,
        IS_PROJECTILE_TYPE_IN_AREA = 0x2B73BCF6,
        IS_QUIT_CONFIRMING = 0xDBA589AE,
        IS_RECORDING_GOING_ON_FOR_PED = 0x520CCC09,
        IS_RECORDING_GOING_ON_FOR_VEHICLE = 0x19F57601,
        IS_RESTARTCHECKPOINT_DISABLED_BY_SCRIPT = 0x6F67E592,
        IS_RESTARTING_FE_FOR_NEW_GAME = 0x7D3CB0CB,
        IS_RIGHT_VEHICLE_HEADLIGHT_BROKEN = 0x9D508577,
        IS_ROBO_TESTING = 0x0326798C,
        IS_ROCKET_IN_FLIGHT = 0x2EC8C1B9,
        IS_SAFE_TO_KILL_PLAYER = 0x6702E169,
        IS_SCREEN_FADED_IN = 0x4F37276D,
        IS_SCREEN_FADED_OUT = 0x9CAA05FA,
        IS_SCREEN_FADING_IN = 0xC7C82800,
        IS_SCREEN_FADING_OUT = 0x79275A57,
        IS_SCRIPT_AUDIO_BANK_LOADED = 0x8CCF6840,
        IS_SCRIPT_DATABASE_BOUND = 0x9168F4B2,
        IS_SCRIPT_MOVIE_PLAYING = 0x772006AE,
        IS_SCRIPTED_CONVERSATION_ONGOING = 0xCB8FD96F,
        IS_SCRIPTED_SPEECH_PLAYING = 0x2C653904,
        IS_SCRIPTEDFX_ENABLED = 0x36B7B213,
        IS_SITTING_OBJECT_NEAR = 0xD81F06C2,
        IS_SNIPER_BULLET_IN_AREA = 0x0483715C,
        IS_SNIPER_INVERTED = 0x5C3BF51B,
        IS_SNIPER_SCOPE_VISIBLE = 0xBC59557E,
        IS_SP_LEVEL_REPLAY = 0x842386F7,
        IS_SPHERE_VISIBLE = 0xDD1329E2,
        IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE = 0x23C5274E,
        IS_STAT_FLOAT = 0x0E0AB836,
        IS_STAT_HASH_FLOAT = 0xEF26133B,
        IS_STREAMING_ADDITIONAL_TEXT = 0xF079E4EB,
        IS_STREAMING_PRIORITY_REQUESTS = 0xD2E1E5DC,
        IS_STRING_NULL = 0x8E71E00F,
        IS_SYSTEM_UI_BEING_DISPLAYED = 0xE495B6DA,
        IS_TARGET_IN_VALID_COVER_FROM_PED = 0x7DFDA8DA,
        IS_TAXI_LIGHT_ON = 0x6FC4924A,
        IS_TEXT_FONT_LOADED = 0xD82F8828,
        IS_THIS_A_MINIGAME_SCRIPT = 0x7605EF6F,
        IS_THIS_HELP_MESSAGE_BEING_DISPLAYED = 0x792ECC8C,
        IS_THIS_HELP_MESSAGE_WITH_NUMBER_BEING_DISPLAYED = 0x7303D366,
        IS_THIS_HELP_MESSAGE_WITH_STRING_BEING_DISPLAYED = 0x8FDB39D4,
        IS_THIS_MODEL_A_BIKE = 0x7E702CDD,
        IS_THIS_MODEL_A_BOAT = 0x10F6085C,
        IS_THIS_MODEL_A_CAR = 0x60E4C22F,
        IS_THIS_MODEL_A_HELI = 0x8AF7F568,
        IS_THIS_MODEL_A_PLANE = 0x3B3907BB,
        IS_THIS_MODEL_A_TRAIN = 0xF87DCFFD,
        IS_THIS_PRINT_BEING_DISPLAYED = 0xED8E2421,
        IS_THIS_THREAD_CONNECTED = 0x5DE08B39,
        IS_THIS_THREAD_ISOLATED = 0x79C9D9AF,
        IS_THREAD_ACTIVE = 0x78D7A5A0,
        IS_THROWN_WEAPON = 0x48EF964A,
        IS_TICKER_ACTIVITY_HIGH = 0x4BC91752,
        IS_TICKER_ACTIVITY_LOW = 0x238BCCB6,
        IS_TIME_OF_DAY_FROZEN = 0xE78ED130,
        IS_TRANSITION_MOVIE_PLAYING = 0x66BD2CB0,
        IS_TUTORIAL_COMPLETE = 0xB1E326FE,
        IS_USING_ANIMATED_LAST_MAN_STANDING = 0xC98EAAFC,
        IS_USING_CONTROLLER = 0x019064ED,
        IS_VEHICLE_A_MISSION_VEHICLE = 0x7716B579,
        IS_VEHICLE_AT_COORD = 0x8BC9D2F9,
        IS_VEHICLE_ATTACHED = 0x65ECB112,
        IS_VEHICLE_DEAD = 0x95D58E26,
        IS_VEHICLE_DOOR_DAMAGED = 0x4999E3C3,
        IS_VEHICLE_DOOR_FULLY_OPEN = 0xC2385B6F,
        IS_VEHICLE_DRIVEABLE = 0x41A7267A,
        IS_VEHICLE_EXTRA_TURNED_ON = 0x042098B5,
        IS_VEHICLE_IN_AIR_PROPER = 0x36DA3EB9,
        IS_VEHICLE_IN_AREA = 0xEAC5449E,
        IS_VEHICLE_IN_WATER = 0x20B649B6,
        IS_VEHICLE_MODEL = 0x013B10B6,
        IS_VEHICLE_ON_ALL_WHEELS = 0x10089F8E,
        IS_VEHICLE_ON_FIRE = 0x9818A08C,
        IS_VEHICLE_ON_SCREEN = 0x485E14C0,
        IS_VEHICLE_SEAT_FREE = 0xDAF42B02,
        IS_VEHICLE_SIREN_ON = 0x25EB5873,
        IS_VEHICLE_STOPPED = 0x655F072C,
        IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS = 0x69200FA4,
        IS_VEHICLE_STUCK_ON_ROOF = 0x18D07C6C,
        IS_VEHICLE_STUCK_TIMER_UP = 0x2FCF58C1,
        IS_VEHICLE_TOUCHING_VEHICLE = 0xC86D447B,
        IS_VEHICLE_TYRE_BURST = 0x48C80210,
        IS_VEHICLE_UPRIGHT = 0x3E5E91E4,
        IS_VEHICLE_UPSIDEDOWN = 0xD45346E7,
        IS_VEHICLE_WAITING_FOR_WORLD_COLLISION = 0x4BEF6ADD,
        IS_VEHICLE_WINDOW_INTACT = 0xAC4EF23D,
        IS_WEAPON_ATTACHMENT_ENABLED = 0xE188437A,
        IS_WEAPON_ATTACHMENT_TOGGLED = 0x7AADF3E5,
        IS_WEAPON_PICKUP_VISIBLE = 0xD7492EEB,
        IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE = 0x2CF305A0,
        IS_XBOX360_VERSION = 0x24005CC8,
        ISEQ_DOES_EXIST = 0x7AA95EAB,
        ISEQ_GET_NAME = 0x0E066B0F,
        ISEQ_GET_STATE = 0xC8599BDE,
        ISEQ_INTERRUPT = 0x64CE3D43,
        ISEQ_IS_LOADED = 0x56DDD872,
        ISEQ_QUERY_ENTITY_ANIMATION_PHASE = 0x97141177,
        ISEQ_QUERY_ENTITY_STATE = 0xF6526797,
        ISEQ_QUERY_STATE = 0x64BC279E,
        ISEQ_REGISTER_ENTITY = 0xB52B39BB,
        ISEQ_REQUEST = 0xF0E61D78,
        ISEQ_START = 0x4160F67D,
        ISEQ_TERMINATE = 0x9B0A93E3,
        ISEQ_UNREGISTER_ENTITY = 0xAE50ACF9,
        ISTOASTANIMATING = 0x23C45638,
        KNOCK_OFF_PROP_AT_ANCHOR_POINT = 0xDE473335,
        KNOCK_PED_OFF_BIKE = 0x98200D3C,
        LAST_MAN_STANDING_RECOVER = 0xC383F5A3,
        LAST_MAN_STANDING_REVIVE = 0x21192AE3,
        LEADERBOARDS_GET_COLUMN_ID = 0x3821A334,
        LEADERBOARDS_GET_NUMBER_OF_COLUMNS = 0x0A56EE34,
        LEADERBOARDS_READ__ROS__FOR_LOCAL_GAMER = 0x9349F590,
        LEADERBOARDS_READ_BY_COMMUNITY = 0x5023C8AB,
        LEADERBOARDS_READ_BY_GAMER = 0x37338B11,
        LEADERBOARDS_READ_BY_RADIUS_EX = 0xCD659683,
        LEADERBOARDS_READ_BY_RANK_EX = 0xB5F57E71,
        LEADERBOARDS_READ_FINISHED_AND_SUCCEEDED = 0x556A674E,
        LEADERBOARDS_READ_FOR_LOCAL_GAMER_EX = 0xF872E9F6,
        LEADERBOARDS_READ_GET_NUM_ROWS_EX = 0xE60FFF5C,
        LEADERBOARDS_READ_GET_ROW_DATA_EX = 0x8B4ABFF9,
        LEADERBOARDS_READ_GET_ROW_DATA_FOR_LOCAL_GAMER_EX = 0x680D09F3,
        LEADERBOARDS_READ_PENDING = 0xEEB8BF5C,
        LEADERBOARDS_READ_RELEASE_DATA = 0x18E901C2,
        LEADERBOARDS_WRITE__ROS__PLAYER_DATA = 0x2A12675D,
        LEADERBOARDS_WRITE_FLUSH = 0x7579C0B4,
        LEADERBOARDS_WRITE_GROUP_DATA = 0xB7CBBFC1,
        LEADERBOARDS_WRITE_PLAYER_DATA = 0xFF8BA326,
        LOAD_ADDITIONAL_TEXT = 0xF133AED9,
        LOAD_ALL_OBJECTS_NOW = 0xC9DBDA90,
        LOAD_ALL_PATH_NODES = 0xC66E28C3,
        LOAD_BULLET_CAM_BANK = 0xCE805879,
        LOAD_PATH_NODES_IN_AREA = 0x8BFF98AC,
        LOAD_PED_DECISION_MAKER = 0xCEA92F74,
        LOAD_SCENE = 0xB72403F5,
        LOAD_SCENE_FOR_ROOM_BY_KEY = 0x2CE2EEF9,
        LOAD_SCRIPT_AUDIO_BANK = 0xF0346449,
        LOAD_SCRIPT_STREAM = 0xB99CBFB5,
        LOAD_TEXT_FONT = 0x9A4F5026,
        LOAD_TEXTURE_DICT = 0xAD3C963A,
        LOAD_XML_FILE = 0x1C084D18,
        LOADOUT_CHANGED_DURING_GAME = 0xBE6FFEB1,
        LOBBY_GET_GAME_MODE_NAME = 0x3CE1674C,
        LOBBY_GET_MIN_PLAYERS = 0xC5731817,
        LOBBY_GET_NUM_ACTIVE_OPTIONS = 0x8DB907E0,
        LOBBY_GET_NUM_GAME_MODES = 0xE30A3B07,
        LOBBY_GET_NUM_OPTIONS = 0x1DBC1E68,
        LOBBY_GET_NUM_SUB_OPTIONS = 0x34332D95,
        LOBBY_GET_OPTION_EXISTS = 0xFF3B14E9,
        LOBBY_GET_OPTION_IS_ACTIVE = 0xF79A7F40,
        LOBBY_GET_OPTION_IS_DEACTIVE = 0x600E3311,
        LOBBY_GET_OPTION_IS_DISABLE = 0x664091E2,
        LOBBY_GET_OPTION_IS_KICK_LIST = 0x349BA811,
        LOBBY_GET_OPTION_IS_LIST = 0x0428DCDB,
        LOBBY_GET_OPTION_IS_MODEL = 0xEF2DEAA4,
        LOBBY_GET_OPTION_IS_NUMBERS = 0xBF4965C0,
        LOBBY_GET_OPTION_NAME = 0x073F8D7A,
        LOBBY_GET_OPTION_VALUE = 0xFD0AF1D4,
        LOBBY_GET_SELECTED_GAME_MODE = 0xE65EC1C1,
        LOBBY_GET_SUB_OPTION_NAME = 0x8D6AB46A,
        LOBBY_HAS_MATCH_STARTED = 0xD5189EE8,
        LOCAL_PLAYER_CAN_DO_MP_INTERACTIONS = 0x6BBDF4CB,
        MANOGAMETESTER_DISABLE = 0x28CB5F76,
        MANOGAMETESTER_DUMP_NOW = 0x409525B7,
        MANOGAMETESTER_ENABLE = 0x25B894F2,
        MARK_COVEREDGEMP3_FORCE_FACE_LEFT_ON_ENTRY = 0xF22304B7,
        MARK_COVEREDGEMP3_FORCE_FACE_RIGHT_ON_ENTRY = 0x0388489A,
        MARK_COVERPOINTMP3_SEARCHABLE = 0xBF75FE38,
        MARK_INTERIOR_COLLISION_REQUIRED = 0x3CC6D319,
        MARK_UNLOCK_AS_SEEN = 0xC2C8DA09,
        MODIFY_UNLOCK = 0xF203B6DD,
        MUTE_EXPLOSIONS = 0x325CC231,
        NET_ARE_PLAYERS_IN_SAME_GANG = 0xD1B34A9E,
        NET_ARE_PLAYERS_IN_SAME_PARTY = 0x58A5D90C,
        NET_DEBUG = 0x0E1B51FE,
        NET_DEBUG_FLOAT = 0xC11C0E6E,
        NET_DEBUG_INT = 0xADC31C4F,
        NET_DEBUG_STRING = 0x5D3F0923,
        NET_DEBUG_VECTOR = 0x8D271B46,
        NET_ERROR = 0xBD5919F3,
        NET_ERROR_FLOAT = 0xE3ED73BA,
        NET_ERROR_INT = 0x83ABB62E,
        NET_ERROR_STRING = 0xB8A3378F,
        NET_ERROR_VECTOR = 0x757A4E3C,
        NET_GET_BOOL_ROS_GAMER_DATA = 0xDBF081C9,
        NET_GET_FLOAT_ROS_GAMER_DATA = 0xEF912D19,
        NET_GET_GAMER_NAME_WITH_GANG_TAG = 0x10AB1606,
        NET_GET_GAMER_ROS_XP_BONUS = 0x60D4317D,
        NET_GET_INT_ROS_GAMER_DATA = 0x6670CF02,
        NET_GET_IS_ROCKSTAR_DEV = 0xCFFFC689,
        NET_GET_IS_ROS_CHEATER = 0x7ABA6A5E,
        NET_GET_PLAYER_GANG_ID = 0xBB7E7FFA,
        NET_GET_PLAYER_GANG_NAME = 0x0A4BF53A,
        NET_GET_PLAYER_GANG_RANK = 0xD40B452C,
        NET_GET_PLAYER_GANG_TAG = 0x4F64907A,
        NET_GET_PLAYER_GANG_TAG_UI = 0xF2008295,
        NET_IS_GANG_INFO_VALID = 0x6D648816,
        NET_IS_PLAYER_IN_GANG = 0x45A0B35B,
        NET_PARTY_GET_LEADER_PLAYER = 0x6F29E2F9,
        NET_PLAYSTATS_CLAN_FEUD = 0xF5BC8A87,
        NET_PLAYSTATS_GAMETYPE_ENDED = 0xFACD7753,
        NET_PLAYSTATS_GAMETYPE_OBJECTIVE = 0x036B7CED,
        NET_PLAYSTATS_GAMETYPE_STARTED = 0x3F507595,
        NET_PLAYSTATS_JOIN_TEAM = 0x0BA80875,
        NET_PLAYSTATS_PLAYER_SELECTED = 0x1BD6A6D9,
        NET_PLAYSTATS_POST_MATCH_BLOB = 0x21847D03,
        NET_SHOW_GAMER_TAGS = 0x5C8CBCE5,
        NET_WARNING = 0x2242923E,
        NET_WARNING_FLOAT = 0x0ACCEE78,
        NET_WARNING_INT = 0xF025F2F5,
        NET_WARNING_STRING = 0x1F02B90E,
        NET_WARNING_VECTOR = 0x378FD17A,
        NETWORK_ACCEPT_INVITE = 0xFB31FA9C,
        NETWORK_ADD_INWORLD_TEXT = 0x836D59C3,
        NETWORK_ADD_INWORLD_TEXT_OBJECT = 0x925DE2A9,
        NETWORK_ADD_INWORLD_TEXT_PED = 0x0EB30678,
        NETWORK_ADD_INWORLD_TEXT_PLAYER = 0x1001CFE8,
        NETWORK_ADD_INWORLD_TEXT_POS = 0xB3775AEA,
        NETWORK_ADD_PLAYER_CASH = 0x044D320A,
        NETWORK_ADD_PLAYER_CASH_PLAYER = 0xE544D336,
        NETWORK_ADD_PLAYER_CASH_POS = 0x431A0984,
        NETWORK_ADD_PLAYER_EXPERIENCE = 0x1C3663D9,
        NETWORK_ADD_PLAYER_EXPERIENCE_PLAYER = 0xB956912A,
        NETWORK_ADD_PLAYER_EXPERIENCE_POS = 0xB7EB7A99,
        NETWORK_AM_I_BLOCKED_BY_PLAYER = 0x953EF45E,
        NETWORK_AM_I_MUTED_BY_PLAYER = 0xE128F2B0,
        NETWORK_CHANGE_GAME_MODE = 0xCB8178A3,
        NETWORK_CHANGE_GAME_MODE_PENDING = 0x8226F769,
        NETWORK_CHANGE_GAME_MODE_SUCCEEDED = 0xFBA800BC,
        NETWORK_CHECK_INVITE_ARRIVAL = 0x686548FD,
        NETWORK_CLEAR_INVITE_ARRIVAL = 0x0CE1CB74,
        NETWORK_CLEAR_PLAYER_STREAK = 0x9F165014,
        NETWORK_CLEAR_SUMMONS = 0x95A210E9,
        NETWORK_CREATE_PED_CORPSE = 0x2DC1E880,
        NETWORK_CREATE_PICKUP_FROM_WEAPONS = 0x0186B190,
        NETWORK_DID_INVITE_FRIEND = 0x9C8802DA,
        NETWORK_DOES_PLAYER_HAVE_ANY_STREAK_ACTIVE = 0x75602443,
        NETWORK_DUMP_LEVEL_DATA = 0x987381E7,
        NETWORK_DUMP_STORED_QUERIES = 0x53B6E465,
        NETWORK_ENABLE_ASSIST_XP = 0x69E75430,
        NETWORK_FIND_GAME_PENDING = 0x3AE44227,
        NETWORK_GET_AVATAR_SELECTED_DEATHMATCH_SLOT_HASH = 0x51611F4D,
        NETWORK_GET_AVATAR_SLOT_SELECTED_SEX = 0x7EF9234A,
        NETWORK_GET_COUNTOF_RICH_PRESENCE = 0x1CE03E7B,
        NETWORK_GET_FRIEND_COUNT = 0xA396ACDE,
        NETWORK_GET_FRIEND_NAME = 0x97420B6D,
        NETWORK_GET_GAME_MODE = 0x542F6097,
        NETWORK_GET_KILLER_OF_PLAYER = 0x9809FB6F,
        NETWORK_GET_MAX_PRIVATE_SLOTS = 0xFF2121DE,
        NETWORK_GET_MAX_SLOTS = 0xE7DA761C,
        NETWORK_GET_MET_PLAYER_NAME = 0xA70BA410,
        NETWORK_GET_NUM_PLAYERS_MET = 0xB04FC561,
        NETWORK_GET_NUM_UNACCEPTED_INVITES = 0xE691321E,
        NETWORK_GET_NUMBER_OF_GAMES = 0x3429AFE6,
        NETWORK_GET_PARAM_NETTEST = 0x0186725B,
        NETWORK_GET_PARAM_NETTEST_HOST = 0x6AA467E5,
        NETWORK_GET_PLAYER_ACTIVE_STREAK = 0xFE3BB23A,
        NETWORK_GET_PLAYER_ACTIVE_STREAK_LEVEL = 0x71168B1F,
        NETWORK_GET_PLAYER_AVATAR_SEX = 0xBD0930B9,
        NETWORK_GET_PLAYER_AVATAR_SLOT_HASH = 0xEEFC5BFB,
        NETWORK_GET_PLAYER_CASH = 0x9CE0F8F1,
        NETWORK_GET_PLAYER_STREAK_ACTIVE = 0x1C4B4492,
        NETWORK_GET_PLAYER_STREAK_BLOCKED = 0x3663B7E0,
        NETWORK_GET_PLAYER_STREAK_EFFECT = 0x9E7A0C00,
        NETWORK_GET_PLAYER_STREAK_IN_SLOT = 0x3201F4A2,
        NETWORK_GET_RICH_PRESENCE_FIELD_INDEX = 0x3D42FEC4,
        NETWORK_GET_RICH_PRESENCE_ID = 0x661455A9,
        NETWORK_GET_RICH_PRESENCE_ID_FROM_INDEX = 0x4F08B53D,
        NETWORK_GET_RICH_PRESENCE_IS_VALID = 0xD47D4C49,
        NETWORK_GET_RICH_PRESENCE_LABEL = 0x2BF438BF,
        NETWORK_GET_STREAK_NAME = 0xA973F1AB,
        NETWORK_GET_STREAK_TEXTURE = 0x0277FB8F,
        NETWORK_GET_TEAM_RGB_COLOUR = 0x1DA4FCE0,
        NETWORK_GET_TIME_PLAYER_HAS_BEEN_DEAD_FOR = 0xFD0966E3,
        NETWORK_GET_UNACCEPTED_INVITE_GAME_MODE = 0xF66BCD00,
        NETWORK_GET_UNACCEPTED_INVITER_NAME = 0x34A7E847,
        NETWORK_HAS_PLAYER_COLLECTED_PICKUP = 0xDA423334,
        NETWORK_HAS_PLAYER_HAS_DIED_RECENTLY = 0x362078F3,
        NETWORK_HAVE_ACCEPTED_INVITE = 0xD780795D,
        NETWORK_HAVE_ONLINE_PRIVILEGES = 0xEF63BFDF,
        NETWORK_HAVE_SUMMONS = 0x9060239E,
        NETWORK_HOST_GAME = 0x79A5F0C4,
        NETWORK_INVITE_FRIEND = 0x81A2A4CA,
        NETWORK_IS_AVATAR_PAYNEKILLER_CHARACTER = 0x8F49794B,
        NETWORK_IS_ENABLED = 0x9E8F9F53,
        NETWORK_IS_FRIEND_IN_SAME_TITLE = 0xC54365C2,
        NETWORK_IS_FRIEND_ONLINE = 0xE0A42430,
        NETWORK_IS_GAME_IN_PROGRESS = 0x09B88E3E,
        NETWORK_IS_GAME_RANKED = 0xAB1DB6B6,
        NETWORK_IS_HOST = 0xE46AC10F,
        NETWORK_IS_HOST_OF_SCRIPT = 0x553CF087,
        NETWORK_IS_HOST_OF_THIS_SCRIPT = 0x6970BA94,
        NETWORK_IS_INVITEE_ONLINE = 0x95B2C62F,
        NETWORK_IS_OPERATION_PENDING = 0x6895F923,
        NETWORK_IS_PLAYER_ACTIVE = 0x43657B17,
        NETWORK_IS_PLAYER_BLOCKED_BY_ME = 0xAE4F4560,
        NETWORK_IS_PLAYER_MUTED_BY_ME = 0x7A21050E,
        NETWORK_IS_PLAYER_PHYSICAL = 0x75645571,
        NETWORK_IS_PLAYER_TALKING = 0xDA9FD9DB,
        NETWORK_IS_PLAYER_VALID = 0x7F65AF0B,
        NETWORK_IS_PLAYER_VISIBLE = 0x56D96854,
        NETWORK_IS_PLAYER_VISIBLE_TO_TEAM = 0xC459CF02,
        NETWORK_IS_SESSION_INVITABLE = 0x91E81052,
        NETWORK_JOIN_SUMMONS = 0x68C293F4,
        NETWORK_JOINING_IN_PROGRESS_GAME = 0x6D3ADAB3,
        NETWORK_KICK_PLAYER = 0x7EDD6266,
        NETWORK_LEVEL_DATA_GET_BOOL = 0x282E20CB,
        NETWORK_LEVEL_DATA_GET_BOOL_FROM_NODE = 0xC5F02A7E,
        NETWORK_LEVEL_DATA_GET_FLOAT = 0x4EF6A91C,
        NETWORK_LEVEL_DATA_GET_FLOAT_FROM_NODE = 0x0CA92A56,
        NETWORK_LEVEL_DATA_GET_HASH = 0x758DEB4D,
        NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE = 0xA0DF848C,
        NETWORK_LEVEL_DATA_GET_INT = 0x05D7A7AD,
        NETWORK_LEVEL_DATA_GET_INT_FROM_NODE = 0xEDA5D3AA,
        NETWORK_LEVEL_DATA_GET_NODE = 0x1D710204,
        NETWORK_LEVEL_DATA_GET_NODE_FROM_NODE = 0x78598AC7,
        NETWORK_LEVEL_DATA_GET_NUM_NODES = 0xD0FD0BA0,
        NETWORK_LEVEL_DATA_GET_NUM_NODES_FROM_NODE = 0xC208F633,
        NETWORK_LEVEL_DATA_GET_SIBLING_COUNT_AFTER_NODE = 0xD8F9D0B0,
        NETWORK_LEVEL_DATA_GET_STRING = 0xCF99AF2B,
        NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE = 0x1AB1ED65,
        NETWORK_LEVEL_DATA_GET_VECTOR = 0x532EBA1B,
        NETWORK_LEVEL_DATA_GET_VECTOR_FROM_NODE = 0x9209CE38,
        NETWORK_LEVEL_DATA_RUN_STORED_QUERY_BOOL = 0x8DB64921,
        NETWORK_LEVEL_DATA_RUN_STORED_QUERY_COUNT = 0x7F3DAF76,
        NETWORK_LEVEL_DATA_RUN_STORED_QUERY_FLOAT = 0x7CBE1FD2,
        NETWORK_LEVEL_DATA_RUN_STORED_QUERY_HASH = 0x776215C9,
        NETWORK_LEVEL_DATA_RUN_STORED_QUERY_INT = 0x4DAE6959,
        NETWORK_LEVEL_DATA_RUN_STORED_QUERY_NODE = 0xEE658568,
        NETWORK_LEVEL_DATA_RUN_STORED_QUERY_STRING = 0x9DF1E416,
        NETWORK_LEVEL_DATA_RUN_STORED_QUERY_VECTOR = 0xAC9F6193,
        NETWORK_PARAM_ALLOW_WIN_BUTTON = 0x6C49E55C,
        NETWORK_PARAM_JUST_RESPAWN = 0x2F09AA8A,
        NETWORK_PLAYER_FORCE_COLOR = 0x501D54BA,
        NETWORK_PLAYER_HAS_HEADSET = 0x451FB6B6,
        NETWORK_PLAYER_HAS_PED = 0x1D185E7D,
        NETWORK_PRELOAD_AVATAR = 0x38209242,
        NETWORK_READY_FOR_JIP = 0xBF325030,
        NETWORK_RELEASE_PRELOADED_AVATAR = 0x6B197E0D,
        NETWORK_REMOVE_OLD_BLIPS_FROM_CLEANUP_LIST = 0x069DD331,
        NETWORK_REQUIRE_LEVEL_DATA = 0x378BA5C8,
        NETWORK_REQUIRE_STORED_QUERIES = 0x1C183BC8,
        NETWORK_RESET_PLAYER_STREAKS = 0x9B60B0AB,
        NETWORK_RESURRECT_PLAYER = 0x3EEC5461,
        NETWORK_SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_WITH_HELI_ACTIVE = 0x35A050E1,
        NETWORK_SET_BOT_PLAYER = 0x2ED349DE,
        NETWORK_SET_FRIENDLY_FIRE_OPTION = 0x6BAF95FA,
        NETWORK_SET_HEALTH_RETICULE_OPTION = 0x18319AA8,
        NETWORK_SET_NETWORK_PLAYER_AS_VIP = 0x42FEA7F6,
        NETWORK_SET_PLAYER_MUTED = 0xCE451908,
        NETWORK_SET_PLAYER_STREAK_BLOCKED = 0x3BDDEEE2,
        NETWORK_SET_PLAYER_STREAK_EFFECT = 0xCEB8449D,
        NETWORK_SET_PLAYER_STREAK_IN_SLOT = 0xC0188F3F,
        NETWORK_SET_PLAYER_TRACER_COLOUR = 0x34EDFF34,
        NETWORK_SET_PROFILESTATINTERVAL = 0x863D8EE5,
        NETWORK_SET_RADIOHUD_IN_LOBBY_OFF = 0x4FDBF664,
        NETWORK_SET_RICH_PRESENCE = 0x932A6CED,
        NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME = 0x878486CE,
        NETWORK_SET_TALKER_FOCUS = 0xDCDAC012,
        NETWORK_SET_TALKER_PROXIMITY = 0x67555C66,
        NETWORK_SET_TEAM_COLOUR = 0x91F51C10,
        NETWORK_SET_TEAM_KILL_EXPERIENCE = 0x58625E40,
        NETWORK_SET_TEAM_ONLY_CHAT = 0x3813019A,
        NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT = 0x470810ED,
        NETWORK_SET_WEATHER = 0x85CCA432,
        NETWORK_SHOW_FRIEND_PROFILE_UI = 0x58D0361F,
        NETWORK_SHOW_MET_PLAYER_FEEDBACK_UI = 0x7759A85A,
        NETWORK_SHOW_MET_PLAYER_PROFILE_UI = 0x2AB80821,
        NETWORK_SHOW_PLAYER_PROFILE_UI = 0x4F05A4BE,
        NETWORK_START_LOAD_SCENE = 0x4280D528,
        NETWORK_STORE_SINGLE_PLAYER_GAME = 0xA52597AE,
        NETWORK_UPDATE_LOAD_SCENE = 0xC76E023C,
        OBJECT_ANIM_EVENT = 0x105F06CB,
        OBJECT_ANIM_EVENT_OLD = 0x0BF0BC0D,
        OPEN_DEBUG_FILE = 0xA754055A,
        OPEN_NAMED_DEBUG_FILE = 0xE817E336,
        OPEN_PATROL_ROUTE = 0xF33F83CA,
        OPEN_SEQUENCE_TASK = 0xABA6923E,
        OVERRIDE_ALREADY_PRESENT_MPITEM_BLIPS_WITH_LAST_PARAMS = 0x45E585DF,
        OVERRIDE_FREEZE_FLAGS = 0x4B3DF87E,
        OVERRIDE_MOVER_PHYSICS_ON_RAGDOLL_SLEEP = 0xE396361C,
        OVERRIDE_PED_FIRING_PATTERN = 0xC7DD4AA6,
        OVERRIDE_PED_FIRING_PATTERN_CUSTOM = 0xD622F7DE,
        OVERRIDE_WARP_MODIFIER = 0x6637FAB8,
        OVERRIDE_WATER_SETTINGS = 0x6B4457D5,
        OVERRIDE_WEAPON_VELOCITY = 0x386F64C0,
        PAUSE_MP_LAST_MAN_STANDING = 0xD32E394C,
        PAUSE_PLAYBACK_RECORDED_PED = 0x44240A58,
        PAUSE_PLAYBACK_RECORDED_VEHICLE = 0xCCF54912,
        PAUSE_SCRIPTED_CONVERSATION = 0xE2C9C6F8,
        PED_ACTION_TREE_PLAY_NODE = 0x95DEDF47,
        PED_ACTION_TREE_RESET_HELPER = 0xA46CEFD8,
        PED_ANIM_EVENT = 0xC0D17E4F,
        PED_ANIM_EVENT_OLD = 0x27F99158,
        PED_FINISH_ACTION_INTENTION = 0x11128D62,
        PED_FORCE_TARGETABLE = 0x4A9A29C4,
        PED_GET_ACTION_INTENTION_STATUS = 0x400A3649,
        PED_HACK_DISABLE_INAIR_EVENT = 0x7400CF35,
        PED_HAS_VALID_THROW_TRAJECTORY_TO_POS = 0xBF561175,
        PED_RESET_IK = 0xA42336C0,
        PED_SET_ACTION_DIRECTION = 0xC04CEC0C,
        PED_SET_ACTION_INTENTION = 0x6C7E6B6A,
        PED_SET_STRING_INPUT_SIGNAL = 0x216656A0,
        PEDGROUPTASK_ADVANCE_ASSIGNPED = 0xC923DB84,
        PEDGROUPTASK_ADVANCE_CREATE = 0x54436897,
        PEDGROUPTASK_ADVANCE_SETADVANCEDISTANCE = 0x6F24894B,
        PEDGROUPTASK_ADVANCE_SETADVANCERELATIVETO = 0x7DF6683B,
        PEDGROUPTASK_ADVANCE_SETCOVERSEARCHOFFSETFORWARD = 0x82FE5DEA,
        PEDGROUPTASK_ADVANCE_SETNUMPEDSTOADVANCE = 0x0AC69B43,
        PEDGROUPTASK_ADVANCE_SETPEDCANADVANCE = 0x322E3B5D,
        PEDGROUPTASK_ADVANCE_SETTARGET_PED = 0xB35F39A7,
        PEDGROUPTASK_ADVANCE_SETTARGET_POS = 0x97D7FBD1,
        PEDGROUPTASK_ADVANCE_SETTIMERANGEFORALLPEDSTOSTARTFIRING = 0x4352BEF3,
        PEDGROUPTASK_ADVANCE_SETTIMETOHIDE = 0x926BAF07,
        PEDGROUPTASK_ADVANCE_SETTIMETOIDLE = 0xB8B227D4,
        PEDGROUPTASK_ADVANCE_TRIGGER_MOVE = 0x20F68DB8,
        PEDGROUPTASK_COVERFIRE_ASSIGNPED = 0x9F362EA8,
        PEDGROUPTASK_COVERFIRE_CREATE = 0xB12779C8,
        PEDGROUPTASK_COVERFIRE_SETTARGET_PED = 0x131D9EE9,
        PEDGROUPTASK_COVERFIRE_SETTARGET_POS = 0xBF55758E,
        PEDGROUPTASK_COVERFIRE_STOP_FIRING = 0x935C7975,
        PEDGROUPTASK_COVERFIRE_TRIGGER_FIRE = 0xA546FB73,
        PEDGROUPTASK_COVERFIRE_TRIGGER_HIDE = 0xCAC7EFC1,
        PEDGROUPTASK_DESTROY = 0x47AEEC8E,
        PEDGROUPTASK_FLANK_ASSIGNPEDTOCOVERFIRE = 0xFAD36337,
        PEDGROUPTASK_FLANK_ASSIGNPEDTOFLANK = 0x8370A7AC,
        PEDGROUPTASK_FLANK_CREATE = 0x8A7938A8,
        PEDGROUPTASK_FLANK_FLANKVOLUME = 0x06262EDA,
        PEDGROUPTASK_FLANK_TRIGGERVOLUME = 0xB5D4C0FE,
        PEDGROUPTASK_FLANK_TUNE_TARGETOUTSIDETRIGGERVOLUMETOCANCEL = 0x0DBFC2F3,
        PEDGROUPTASK_FLANK_TUNE_TIMEREADYTRIGGERMOVE = 0x70DCAB00,
        PEDGROUPTASK_FLANK_TUNE_TIMETARGETINSIDETRIGGERVOLUMETOSTART = 0x4D888CFB,
        PEDGROUPTASK_TACTICALCORNER_ASSIGNPED = 0x72DF209B,
        PEDGROUPTASK_TACTICALCORNER_CREATE = 0x165687CB,
        PEDGROUPTASK_TACTICALCORNER_SETTARGET_PED = 0xBDCD7309,
        PEDGROUPTASK_TACTICALCORNER_SETTARGET_POS = 0xB54BDB46,
        PICKUPS_PASS_TIME = 0xA629E201,
        PIN_ROPE_VERTEX = 0xAE1D101B,
        PLACE_LOADOUT_ITEMS_TO_INVENTORY = 0x3EBE60EF,
        PLACE_LOADOUT_TO_INVENTORY = 0xA1EBA6BB,
        PLAY_AUDIO_EVENT = 0x4B31CE89,
        PLAY_AUDIO_EVENT_FROM_OBJECT = 0x0C5DB6A5,
        PLAY_AUDIO_EVENT_FROM_PED = 0x1AB792DA,
        PLAY_AUDIO_EVENT_FROM_VEHICLE = 0x0B7DC5C8,
        PLAY_COMPANION_DEATH_GUNSHOT = 0x52AEE5E6,
        PLAY_DLC_SOUND_FRONTEND = 0xBDE849F7,
        PLAY_END_CREDITS_MUSIC = 0x8E88B3CC,
        PLAY_FIRE_SOUND_FROM_COORD = 0x2EFD64B3,
        PLAY_IMAGEFX = 0x2CCAA179,
        PLAY_KILLSTRIP_LOCAL = 0x492BDFA1,
        PLAY_MOVIE = 0x4F39ED7A,
        PLAY_MUSIC = 0x28C17DAF,
        PLAY_OBJECT_ANIM = 0x853E879E,
        PLAY_PED_AMBIENT_SPEECH = 0xB4EB114E,
        PLAY_PED_AMBIENT_SPEECH_WITH_VOICE = 0xA3E3390C,
        PLAY_PED_AUDIO_EVENT_ANIM = 0x2CDC0A7A,
        PLAY_PRELOADED_ANNOUNCER_SPEECH = 0x2B508AA3,
        PLAY_PRELOADED_SPEECH = 0xC7F2260A,
        PLAY_RELIEF_SIGH = 0x622C486D,
        PLAY_SCRIPT_STREAM_FROM_COORD = 0x3C976ECC,
        PLAY_SCRIPT_STREAM_FROM_OBJECT = 0x53558097,
        PLAY_SCRIPT_STREAM_FROM_PED = 0xD774E920,
        PLAY_SCRIPT_STREAM_FROM_VEHICLE = 0x23B01838,
        PLAY_SCRIPT_STREAM_FRONTEND = 0xFE8558E8,
        PLAY_SCRIPT_STREAM_FRONTEND_INT = 0x73CB1718,
        PLAY_SIMPLE_PED_ANIM = 0x5DC2CC31,
        PLAY_SOUND = 0xB6E1917F,
        PLAY_SOUND_FROM_COORD = 0xCAD3E2D5,
        PLAY_SOUND_FROM_OBJECT = 0x6A515A49,
        PLAY_SOUND_FROM_PED = 0x1D6D6AC3,
        PLAY_SOUND_FROM_VEHICLE = 0x8A5F9685,
        PLAY_SOUND_FRONTEND = 0x2E458F74,
        PLAY_VEHICLE_ANIM = 0x6EB2CA78,
        PLAYER_ENABLE_COMPONENT = 0xCF91F01D,
        PLAYER_GET_TIMEWARP_MODIFIER = 0x0EACC1A2,
        PLAYER_HAS_MP_SPECIAL_ITEM = 0x1FE6D589,
        PLAYER_SET_AIM_MODE = 0x8E1BD7A4,
        PLAYER_SET_WARP_FIRE_SCALE = 0x13F1FCBC,
        PLAYER_USE_COVERLINE = 0x004C99D6,
        PLAYER_USE_COVERPOINT = 0x822F99DE,
        POINT_CAM_AT_COORD = 0x914BC21A,
        POINT_CAM_AT_OBJECT = 0xC2B50105,
        POINT_CAM_AT_PED = 0x81BC4966,
        POINT_CAM_AT_VEHICLE = 0x06DE50BF,
        POPULATE_NOW = 0x72C20700,
        POW = 0x85D134F8,
        PRE_STREAM_SEAMLESS_CUTSCENE = 0x07E152B6,
        PRE_STREAM_SEAMLESS_CUTSCENE_AT_COORD = 0xEEE3863E,
        PRELOAD_ANNOUNCER_SPEECH = 0x92DE336C,
        PRELOAD_MOVIE = 0xC3182968,
        PRELOAD_PLAYER_VARIATION = 0x292A475A,
        PRELOAD_STREAM_COMPONENT = 0x01E1DCDC,
        PRINT = 0x53C5F206,
        PRINT_HELP = 0x6A762B4E,
        PRINT_HELP_FOREVER = 0xB7AC63C3,
        PRINT_HELP_FOREVER_WITH_NUMBER = 0xADE2E873,
        PRINT_HELP_FOREVER_WITH_STRING = 0xDB159D05,
        PRINT_HELP_FOREVER_WITH_STRING_NO_SOUND = 0x63049363,
        PRINT_HELP_WITH_NUMBER = 0x215A5FCC,
        PRINT_HELP_WITH_STRING = 0x66735DD7,
        PRINT_HELP_WITH_STRING_NO_SOUND = 0x89A0FF88,
        PRINT_MEMORY_STATS = 0xD6F9C65D,
        PRINT_MISSION_DESCRIPTION = 0x61668A58,
        PRINT_NOW = 0x2C60BF8C,
        PRINT_STRING_IN_STRING = 0x31026991,
        PRINT_STRING_IN_STRING_NOW = 0x610BDA9E,
        PRINT_STRING_WITH_LITERAL_STRING = 0x5BFD20CB,
        PRINT_STRING_WITH_LITERAL_STRING_NOW = 0x40D7612D,
        PRINT_WITH_2_NUMBERS = 0x1D5F8E7A,
        PRINT_WITH_2_NUMBERS_NOW = 0x4F62BE65,
        PRINT_WITH_NUMBER = 0x9FBDDD94,
        PRINT_WITH_NUMBER_NOW = 0x7FFF2957,
        PRINTFLOAT = 0xD48B90B6,
        PRINTFLOAT2 = 0x3983593A,
        PRINTINT = 0x63651F03,
        PRINTINT2 = 0x83B2E331,
        PRINTNL = 0x868997DA,
        PRINTSTRING = 0xECF8EB5F,
        PRINTVECTOR = 0x085F31FB,
        PRIVATE_SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE = 0xB528AEA6,
        PROCESS_MISSION_DELETION_LIST = 0xA5CB6B1B,
        PROFILER_DUMP_VALUES = 0x604930BC,
        PROJECTED_DISTANCE = 0xEC0E7C49,
        PULSE_CROSSHAIR = 0x5FF866E9,
        QUERY_MONITORED_STAT_ENTRY = 0xA18210A2,
        QUERY_MONITORED_STATS = 0x264C2677,
        REACT_TO_COLLISION = 0x17F1AAF6,
        REENABLE_PLAYER_INPUT = 0x69A8E8A7,
        REGISTER_BOAT_WAKE = 0x085F3727,
        REGISTER_BRAIN_WITH_MISSION_OBJECT = 0xF8DD6151,
        REGISTER_DETACH_PLAYER_FOR_CUTSCENE = 0x057D2D26,
        REGISTER_HATED_TARGETS_AROUND_PED = 0x7F87559E,
        REGISTER_HATED_TARGETS_IN_AREA = 0x53CEFAA1,
        REGISTER_HIDE_ENTITY_AT_POSITION = 0x58A08847,
        REGISTER_INJURY = 0x33B0E8E6,
        REGISTER_KILL_IN_MULTIPLAYER_GAME = 0xFE86190E,
        REGISTER_OBJECT_POST_SEAMLESS_CUTSCENE = 0xE0367303,
        REGISTER_OBJECT_PRE_SEAMLESS_CUTSCENE = 0xF83BC836,
        REGISTER_PED_POST_SEAMLESS_CUTSCENE = 0x6C2A0780,
        REGISTER_PED_PRE_SEAMLESS_CUTSCENE = 0x7DD7BAB9,
        REGISTER_PED_SHOT_TUNING_SPECIAL01 = 0xCCC01196,
        REGISTER_PERSISTENT_GLOBAL_VARIABLES = 0x42830D95,
        REGISTER_PLAYER_RESPAWN_COORDS = 0x7AC5FEDC,
        REGISTER_SCENE_PED_SEAMLESS_CUTSCENE = 0xDAAF0CC6,
        REGISTER_SCRIPT_TUNABLE_VARIABLE_CRC_FLOAT = 0x5EB671C0,
        REGISTER_SCRIPT_TUNABLE_VARIABLE_CRC_INT = 0x9E87D9D6,
        REGISTER_SCRIPT_TUNABLE_VARIABLE_FLOAT = 0xF6F9855F,
        REGISTER_SCRIPT_TUNABLE_VARIABLE_INT = 0xFA39724D,
        REGISTER_TARGET = 0x50A95442,
        REGISTER_VEHICLE_POST_SEAMLESS_CUTSCENE = 0x4B4BB60E,
        REGISTER_VEHICLE_PRE_SEAMLESS_CUTSCENE = 0xECBB0F14,
        REGISTER_WEAPON_POST_SEAMLESS_CUTSCENE = 0x83402B86,
        REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE = 0xB2BFDAE4,
        REGISTER_WORLD_POINT_SCRIPT_BRAIN = 0x725D91F7,
        RELEASE_MOVIE = 0x9EAF5CA0,
        RELEASE_NAMED_SCRIPT_AUDIO_BANK = 0x16707ABC,
        RELEASE_PATH_NODES = 0xAD7744E9,
        RELEASE_PED_ENTITY_SYNC_POINT = 0x60E94D19,
        RELEASE_PRELOADED_STREAM_COMPONENT = 0x2501E8E5,
        RELEASE_SCRIPT_AUDIO_BANK = 0x22F865E5,
        RELEASE_SOUND_ID = 0x9C080899,
        RELEASE_STREAMING_MEMORY = 0x53CB7864,
        RELEASE_TEXTURE = 0xDB7643AC,
        RELEASE_TIME_OF_DAY = 0xC84E8398,
        RELOAD_PED_WEAPONS = 0x9E1C4C76,
        REMOVE_ALL_COVER_BLOCKING_AREAS = 0xCF9221A7,
        REMOVE_ALL_ENVIRONMENT_BLOOD = 0x5DD738A7,
        REMOVE_ALL_ENVIRONMENT_BLOOD_AT_COORD = 0x66802B77,
        REMOVE_ALL_GLINTS = 0xA7D255E3,
        REMOVE_ALL_INTERACTION_VOLUMES = 0x621AB3A0,
        REMOVE_ALL_LOCAL_PLAYER_WEAPONS_KEEPING_MPITEMS = 0x5307093D,
        REMOVE_ALL_PED_WEAPONS = 0xA44CE817,
        REMOVE_ALL_PICKUPS = 0x04BF00F0,
        REMOVE_ALL_PICKUPS_AND_PLACEMENTS_OF_TYPE = 0xC58DF6C6,
        REMOVE_ALL_PLACEMENTS = 0x0DD8A1EE,
        REMOVE_ALL_SCRIPTED_BLIPS = 0x1C339C34,
        REMOVE_ALL_SCRIPTED_WEAPON_MODIFIER = 0xA59AF348,
        REMOVE_ANIM_DICT = 0x0AE050B5,
        REMOVE_ATTACHED_WEAPONS_FROM_VEHICLE = 0xECB94CFD,
        REMOVE_BLIP = 0xD8C3C1CD,
        REMOVE_DECISION_MAKER = 0x95465154,
        REMOVE_FAKE_NETWORK_NAME_FROM_PED = 0xAB07F041,
        REMOVE_GLINT = 0xB6DA9D34,
        REMOVE_GROUP = 0x48D72B88,
        REMOVE_INTERACTION_VOLUME_IF_EXISTS = 0x7254F372,
        REMOVE_IPL = 0xDF7CBD36,
        REMOVE_LOCAL_PLAYER_ARMOUR_AND_SPECIAL_ITEMS = 0x6919A93C,
        REMOVE_LOCAL_PLAYER_MP_SPECIAL_ITEM = 0xF13C1F3F,
        REMOVE_PARTICLE_FX = 0x6BA48C7E,
        REMOVE_PARTICLE_FX_FROM_OBJECT = 0xBC603FEC,
        REMOVE_PARTICLE_FX_FROM_PED = 0x2CDB19BD,
        REMOVE_PARTICLE_FX_FROM_VEHICLE = 0x3C9F1B1C,
        REMOVE_PED_AMMO = 0x0BA4956D,
        REMOVE_PED_DEFENSIVE_AREA = 0x34AAAFA5,
        REMOVE_PED_ELEGANTLY = 0x4FFB8C6C,
        REMOVE_PED_FROM_GROUP = 0x82697713,
        REMOVE_PED_HELMET = 0x2086B1F0,
        REMOVE_PED_IGNORE_COVER_ENTRY = 0xC5D2232C,
        REMOVE_PED_RECORDING = 0x3BBFFA45,
        REMOVE_PED_USE_COVER_ENTRY = 0xADE53B26,
        REMOVE_PED_WEAPON = 0x1F98B093,
        REMOVE_PICKUP = 0x64A7A0E0,
        REMOVE_PICKUPS_OF_TYPE_IN_GAMEPLAY_HELPER_BOX = 0xDBA0AF51,
        REMOVE_PLACEMENT = 0x0BDA43DD,
        REMOVE_PLAYER_HELMET = 0x6255F3B4,
        REMOVE_PROJTEX_FROM_OBJECT = 0x119A0327,
        REMOVE_PROJTEX_IN_RANGE = 0xB2842710,
        REMOVE_SCENARIO_BLOCKING_AREAS = 0x4DDF845F,
        REMOVE_SCRIPT_FIRE = 0x6B21FE26,
        REMOVE_SCRIPTED_WEAPON_MODIFIER = 0x7E83BE00,
        REMOVE_SPATIALDATA_COVER_POINT = 0x0FDFDEF0,
        REMOVE_TEXTURE_DICT = 0x098F30A1,
        REMOVE_VEHICLE_FROM_PARKED_VEHICLES_BUDGET = 0xF8CFFB40,
        REMOVE_VEHICLE_RECORDING = 0xD3C05B00,
        REMOVE_VEHICLE_STUCK_CHECK = 0x81594917,
        REMOVE_VEHICLE_UPSIDEDOWN_CHECK = 0xF390BA1B,
        REMOVE_VEHICLE_WINDOW = 0xBB8104A3,
        REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA = 0x42CC15E0,
        REMOVE_WEAPON_FROM_PED = 0x9C37F220,
        REMOVE_WIND_THERMAL = 0xD1B522B6,
        RENDER_SCRIPT_CAMS = 0x74337969,
        REPLENISH_LOADOUT_IN_INVENTORY = 0x2FA924B7,
        REQUEST_ADDITIONAL_TEXT = 0x9FA9175B,
        REQUEST_ANIM_DICT = 0xDCA96950,
        REQUEST_COLLISION_AT_COORD = 0xCD9805E7,
        REQUEST_COLLISION_FOR_MODEL = 0x3930C042,
        REQUEST_INTERIOR_MODELS = 0x0514857A,
        REQUEST_IPL = 0x3B70D1DB,
        REQUEST_LOAD = 0x0E35F54A,
        REQUEST_MODEL = 0xFFF1B500,
        REQUEST_PED_RECORDING = 0x3974EC21,
        REQUEST_ROOM_MINIMAL_COLLISION_MESH_BY_KEY = 0x97E21CB0,
        REQUEST_SAVE = 0x681BE79F,
        REQUEST_SCRIPT = 0xE26B2666,
        REQUEST_SCRIPT_AUDIO_BANK = 0x21322887,
        REQUEST_SCRIPT_STREAM = 0xD5782CC7,
        REQUEST_STREAMED_TEXTURE_DICT = 0x4C9B035F,
        REQUEST_VEHICLE_RECORDING = 0x91AFEFD9,
        REQUEST_WEAPON = 0xA9D5ADEC,
        RESERVE_BULLETS = 0xA253D302,
        RESERVE_STREAMING_MEMORY = 0xACD474EB,
        RESET_ADRENALINE_ENABLE = 0xB0E2ED32,
        RESET_ADRENALINE_OVERRIDE = 0xEE8F876F,
        RESET_ADRENALINE_OVERRIDES = 0xAE97DC89,
        RESET_ALL_PTFX = 0x5080E987,
        RESET_BLOOD_EFFECTS = 0x6FD09D15,
        RESET_BULLET_CAMERA_TIMEWARP_SCALE = 0x69EE7ED4,
        RESET_CHECKPOINT_ATTEMPTS = 0xD9591EC0,
        RESET_DESTROYED_COVER = 0x656B8235,
        RESET_FORCED_AIM_INTENTION_DIRECTION = 0x1C66206F,
        RESET_FORCED_FORWARD_DIRECTION = 0x6FEAA869,
        RESET_GAME_IDLE_TIMER = 0xB8B2853A,
        RESET_GAMEPLAY_CAM = 0x809999E5,
        RESET_LAST_MAN_STANDING = 0x3F47FAEA,
        RESET_LEVEL_ANIM_DICTIONARIES = 0xC76D45D7,
        RESET_LOADOUT_CHANGED_DURING_GAME = 0xFE9542E3,
        RESET_PAYNEKILLER_HEALTH_BOOST = 0xC19A5559,
        RESET_PAYNEKILLER_RECHARGE_RATE = 0x89413073,
        RESET_PED_BLOOD_SMEAR = 0x6CDF4A41,
        RESET_PED_CLONES = 0x1E0C9CBE,
        RESET_PED_FLEEZONE = 0xAE3D290C,
        RESET_PED_GORE = 0xA882A64A,
        RESET_PED_MODEL_LOD_DISTANCES = 0xDB778444,
        RESET_PED_SUGGESTED_COMBAT_AREA = 0xBF29DB3C,
        RESET_PED_TETHERING = 0x37E095B5,
        RESET_PED_VISIBLE_DAMAGE = 0xC4BC4841,
        RESET_PLAYER_INPUT_GAIT = 0x4A701EE1,
        RESET_STREAMING_POINT_OF_INTEREST = 0x9364E0D4,
        RESET_VEHICLE_STUCK_TIMER = 0xEF2A6016,
        RESET_VEHICLE_WHEELS = 0xD5FFE779,
        RESET_WATER_SIMULATION = 0x33E9C756,
        RESTORE_PICKUPS = 0x15E96C6B,
        RESTORE_SCRIPT_ARRAY_FROM_SCRATCHPAD = 0x5AB30FE1,
        RESUME_BULLET_CAMERA_WIPE = 0xACF3AD1F,
        RESUME_BULLET_CAMERA_WIPE_ON_FADEIN = 0xC038C512,
        RETURN_TO_MP_LOBBY = 0x782A6A92,
        RETURN_TO_TITLESCREEN = 0xB52B5F2D,
        REVIVE_INJURED_PED = 0x14D3E6E3,
        ROPE_SET_COLLISION_FLAGS = 0x5AE8C8E0,
        ROTATE_OBJECT = 0x2F4D8D44,
        ROUND = 0x323B0E24,
        SAVE_FLOAT_TO_DEBUG_FILE = 0xAE315350,
        SAVE_FLOAT_TO_NAMED_DEBUG_FILE = 0x72E3DA94,
        SAVE_INT_TO_DEBUG_FILE = 0x13F0037D,
        SAVE_INT_TO_NAMED_DEBUG_FILE = 0xC59156BD,
        SAVE_LOADOUT_TO_PROFILE = 0x0C1CD7E2,
        SAVE_NEWLINE_TO_DEBUG_FILE = 0x36383B18,
        SAVE_NEWLINE_TO_NAMED_DEBUG_FILE = 0xC41A4082,
        SAVE_PICKUPS = 0x4CED5E31,
        SAVE_SCRIPT_ARRAY_IN_SCRATCHPAD = 0x8A3A3C98,
        SAVE_STORY_DISC_SWAP = 0x96CBF1FE,
        SAVE_STRING_TO_DEBUG_FILE = 0x1BC43E17,
        SAVE_STRING_TO_NAMED_DEBUG_FILE = 0xD7B91218,
        SCREAM = 0xD1956683,
        SCRIPT_VAR_ADD_FLOAT = 0x1F48312D,
        SCRIPT_VAR_ADD_INT = 0xFC611F3C,
        SCRIPT_VAR_EXISTS = 0x9073311E,
        SCRIPT_VAR_GET_FLOAT = 0x7544B570,
        SCRIPT_VAR_GET_INT = 0x3CD83D18,
        SCRIPT_VAR_HASH_ADD_FLOAT = 0x785C8236,
        SCRIPT_VAR_HASH_ADD_INT = 0xC8B588A8,
        SCRIPT_VAR_HASH_EXISTS = 0x1046A414,
        SCRIPT_VAR_HASH_GET_FLOAT = 0xBFADDD7B,
        SCRIPT_VAR_HASH_GET_INT = 0x00CF2FB4,
        SCRIPT_VAR_HASH_SET_FLOAT = 0xE17F81DB,
        SCRIPT_VAR_HASH_SET_INT = 0x8298D3E8,
        SCRIPT_VAR_HASH_WAIT_FOR_CHANGE_FLOAT = 0xEC96E1B4,
        SCRIPT_VAR_HASH_WAIT_FOR_CHANGE_INT = 0xFF735813,
        SCRIPT_VAR_SET_FLOAT = 0x31BE53D4,
        SCRIPT_VAR_SET_INT = 0x61EF16A0,
        SCRIPT_VAR_WAIT_FOR_CHANGE_FLOAT = 0xB4123E01,
        SCRIPT_VAR_WAIT_FOR_CHANGE_INT = 0x2A05F0E3,
        SEARCH_CRITERIA_CONSIDER_PEDS_WITH_FLAG_TRUE = 0x611870D2,
        SEARCH_CRITERIA_REJECT_PEDS_WITH_FLAG_TRUE = 0x044EC539,
        SELECT_WEAPON_TO_HAND = 0xEF918984,
        SET_ACTION_CONSUMED = 0x52FAFA2B,
        SET_ACTIONTREE_INFO = 0xED7221F0,
        SET_ACTIVATE_FRAG_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN = 0x2E2212DD,
        SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN = 0x3E263AE1,
        SET_ACTTEST_ENABLED = 0xF652E42A,
        SET_ADRENALINE_AMT = 0x9D4FBDF6,
        SET_ADRENALINE_NOT_ALLOW = 0x51D0A04A,
        SET_ADRENALINE_OVERRIDE = 0x4AAB8E1B,
        SET_ADRENALINE_PAUSE = 0xE4D33791,
        SET_ADRENALINE_STREAKTIME = 0xE6E47779,
        SET_AI_PROJECTILE_THROW_ENABLED = 0xEB576EAB,
        SET_AI_PROJECTILE_THROW_USE_ACTION_TREE = 0x9E17D62C,
        SET_AI_SHOULD_ALWAYS_MISS_PED = 0x9B7A250B,
        SET_AIM_CAM_ZOOM_LEVEL = 0x134C2026,
        SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE = 0xF20F72E5,
        SET_ALL_BOATS_WAKES_MAX_SPEED_EVO = 0x2806197D,
        SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE = 0x87F767F2,
        SET_ALL_MOTION_CONTROL_PREFERENCES = 0x94FF7903,
        SET_ALL_RANDOM_PEDS_FLEE = 0x49EAE968,
        SET_ALL_VEHICLE_GENERATORS_ACTIVE = 0xAB1FDD76,
        SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA = 0xB4E0E69A,
        SET_ALL_VEHICLES_CAN_BE_DAMAGED = 0x74BF2EAA,
        SET_ALL_VEHICLES_HIGH_LOD = 0xA2EEE161,
        SET_ALLOW_DUMMY_CONVERSIONS = 0x7F0D7E5B,
        SET_ALLOW_MOLOTOV_DAMAGE = 0x791C4E27,
        SET_ALLOW_PLAYER_DIE_FROM_SHOOT_DODGE = 0x1D0AAF37,
        SET_ALLOW_PLAYER_REACT_TO_EXPLOSION = 0x0EE93EDE,
        SET_ALLOWED_TO_FAIL_COVER_FOR_BLOCKING_LINE_OF_FIRE = 0x0D35CCB6,
        SET_AMBIENT_VOICE_NAME = 0xBD2EA1A1,
        SET_AMMO_IN_CLIP = 0xA54B0B10,
        SET_AMMOBAG_AMMO_AMOUNT = 0xD70FCA05,
        SET_AMMOBAG_ENABLED = 0x95B7945E,
        SET_AMMOBAG_REGEN_RANGE = 0xAEDBB3B9,
        SET_AMMOBAG_REGEN_TIME = 0x6599E1E4,
        SET_ANIMATED_TEXT_ANIMATIONS = 0x71899FF8,
        SET_ANIMATED_TEXT_COLOR = 0xA0AC3FD2,
        SET_ANIMATED_TEXT_JUSTIFY = 0x767DF0BA,
        SET_ANIMATED_TEXT_SCALE = 0xEF71D31B,
        SET_ANIMATED_TEXT_TWITCH = 0xA98C2A3D,
        SET_APPLY_WATER_PHYSICS_TO_RAGDOLL = 0xE0394FC2,
        SET_ARCADEMODE_EVENT = 0xC56F72BA,
        SET_ARROW_ABOVE_BLIPPED_PICKUPS = 0xEDE49B32,
        SET_ATTACHED_PED_ROTATION = 0xFFE0FCD5,
        SET_AUTODESTROY_MPITEMS_WHEN_PICKED_BY_AN_ENEMY = 0x63309241,
        SET_BCAM_STR_HELPER_TRACK_PLAYER = 0x809B977E,
        SET_BIG_BOATS_PROPELLOR_PTFX_MAX_SPEED_EVO = 0x4664B095,
        SET_BIG_BOATS_PTFX_MAX_SPEED_EVO = 0x0B2C4489,
        SET_BIT = 0x4EFE7E6B,
        SET_BITS_IN_RANGE = 0x32094719,
        SET_BLIP_ALPHA = 0xA791FCCD,
        SET_BLIP_AS_FRIENDLY = 0xF290CFD8,
        SET_BLIP_AS_SHORT_RANGE = 0x5C67725E,
        SET_BLIP_COLOUR = 0xBB3C5A41,
        SET_BLIP_COORDS = 0x680A34D4,
        SET_BLIP_DIM = 0x8AC07C0E,
        SET_BLIP_DISPLAY = 0x2B521F91,
        SET_BLIP_FLASHES = 0xC0047F15,
        SET_BLIP_FLASHES_ALTERNATE = 0x1A81202B,
        SET_BLIP_MARKER_LONG_DISTANCE = 0x0D0C1675,
        SET_BLIP_NAME_FROM_ASCII = 0x40279490,
        SET_BLIP_NAME_FROM_TEXT_FILE = 0xAC8A5461,
        SET_BLIP_PRIORITY = 0xCE87DA6F,
        SET_BLIP_ROTATION = 0x6B8F44FE,
        SET_BLIP_ROUTE = 0x3E160C90,
        SET_BLIP_SCALE = 0x1E6EC434,
        SET_BLIP_SPRITE = 0x8DBBB0B9,
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS = 0xDFE34E4A,
        SET_BLOCKING_OF_PED_TARGETTING = 0xFB55CFD0,
        SET_BOAT_ANCHOR = 0xA3906284,
        SET_BOAT_OUT_OF_CONTROL_AND_BLOW_UP_WHEN_DRIVER_DEAD = 0x89B5EA50,
        SET_BOAT_PETROLTANK_BURN_RATE = 0x2EC18514,
        SET_BOAT_TILT_IN_AIR = 0x2361ABFA,
        SET_BOAT_WILL_SINK = 0x74A6548F,
        SET_BOSS_PECENT_DAMAGE = 0xC95210CF,
        SET_BULLET_CAM_ON_NEXT_PROJECTILE = 0xE9B08533,
        SET_BULLET_CAM_PREF = 0xC82AD002,
        SET_BULLET_CAMERA_OBJECT_TRACKER = 0x4E75A262,
        SET_BULLET_CAMERA_TRACKED_PED = 0x450D1234,
        SET_BULLET_CAMERA_TRACKER = 0x0B09B233,
        SET_BULLET_CAMERA_VEHICLE = 0x9754F23E,
        SET_BULLET_CAMERA_VICTIM = 0xFB6C221F,
        SET_BULLET_VELOCITY_MODIFIER = 0x4A55C2DF,
        SET_BULLETCAM_STREAMHELPERS_ENABLED = 0x19529920,
        SET_CAM_ACTIVE = 0x064659C2,
        SET_CAM_ACTIVE_WITH_INTERP = 0x7983E7F0,
        SET_CAM_COORD = 0x7A8053AF,
        SET_CAM_DOF_STRENGTH = 0x3CC4EB3F,
        SET_CAM_FAR_CLIP = 0x0D23E381,
        SET_CAM_FAR_DOF = 0x58515E8E,
        SET_CAM_FORCE_LEFT_SIDE = 0xFD6D5D1D,
        SET_CAM_FOV = 0xD3D5D74F,
        SET_CAM_INHERIT_ROLL_OBJECT = 0x32453696,
        SET_CAM_INHERIT_ROLL_VEHICLE = 0xE4BD5342,
        SET_CAM_MOTION_BLUR_STRENGTH = 0xFD6E0D67,
        SET_CAM_NEAR_CLIP = 0x46DB13B1,
        SET_CAM_NEAR_DOF = 0xF28254DF,
        SET_CAM_PARAMS = 0x2167CEBF,
        SET_CAM_ROT = 0xEE38B3C1,
        SET_CAM_SHAKE_AMPLITUDE = 0x60FF6382,
        SET_CAM_SIDE_LEFT = 0xC14844A8,
        SET_CAM_VIEW_MODE = 0xADC5A34E,
        SET_CAMERA_OVERRIDE = 0xF02D8E72,
        SET_CAMERA_USE_COVER_FOR_AIMING = 0x8B40F1EA,
        SET_CAN_AI_KICK_THROUGH_CORPSES = 0xB17BD0FF,
        SET_CAN_RESPRAY_VEHICLE = 0x37677590,
        SET_CAN_ROLL_DODGE = 0xBD808BA0,
        SET_CAN_ROLLING_PICKUP = 0x34638D43,
        SET_CAR_BOOT_OPEN = 0x72E346DD,
        SET_CAR_OUT_OF_CONTROL_AND_BLOW_UP_WHEN_DRIVER_DEAD = 0xC981C67D,
        SET_CASH_CLAN_DISCOUNT = 0x0C838CD2,
        SET_CHALLENGE_FAILED_STATE = 0x6DDDD8C3,
        SET_CHALLENGE_PROGRESS = 0x45052DC3,
        SET_CHEAT_ACTIVE = 0x83D97A32,
        SET_CHIQUITAS_ALWAYS_VISIBLE = 0x29132B80,
        SET_CHIQUITAS_ALWAYS_VISIBLE_ON_PLAYER = 0xCA7E5546,
        SET_CINEMATIC_BUTTON_ACTIVE = 0x3FBC5D00,
        SET_COLLISION_AUDIO_DISABLED = 0xB8DD4243,
        SET_COLLISION_BETWEEN_PEDS = 0x2279CFD3,
        SET_CONTENTS_OF_TEXT_WIDGET = 0x74E6F8F5,
        SET_CONTROL_CONFIG_OPTION_DISABLED = 0xF569B90D,
        SET_CONVERSATION_CHECK_HASH = 0x0937CE9E,
        SET_CONVERTIBLE_ROOF = 0xC87B6A51,
        SET_COORD_PRIMARY_LOOKAT = 0xEAA16410,
        SET_CREATE_RANDOM_COPS = 0x23441648,
        SET_CREDITS_ACTIVE = 0xEC2A0ECF,
        SET_CROSSHAIR_BLINK = 0x59868456,
        SET_CROSSHAIR_PULSE = 0xB5B648B0,
        SET_CUFF_HANDS = 0xF5B13A88,
        SET_CURRENT_LOADOUT_SLOT = 0xAD2DF9C0,
        SET_CURRENT_PED_MOVE_STATE = 0x5D6384AC,
        SET_CURRENT_PED_WEAPON = 0xB8278882,
        SET_CURRENT_WIDGET_GROUP = 0xF1392227,
        SET_CUTSCENE_EXTRA_ROOM_POS = 0x06EB9A03,
        SET_DAMAGE_BY_PROJECTILE = 0x97468654,
        SET_DAMAGE_FROM_PLAYER_MULTIPLIER = 0xD88BF32D,
        SET_DAMAGE_TO_PLAYER_MULTIPLIER = 0xB871820B,
        SET_DEAD_FORCE_WATER_DEPTH = 0x4FBA6300,
        SET_DEAD_FORCE_WATER_DEPTH_TO_DEFAULT = 0x1333A7F3,
        SET_DEAD_PED_COORDS = 0xBE678A36,
        SET_DEAD_PEDS_DROP_WEAPONS = 0x197472B9,
        SET_DEATH_EFFECT_ENABLED = 0x4441BB4D,
        SET_DEATH_STATE_ACTIVE = 0xD4CE933A,
        SET_DEBUG_ACTIVE = 0x07852439,
        SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE = 0x1418CA37,
        SET_DEBUG_TEXT_VISIBLE = 0x50017383,
        SET_DEFAULT_GLOBAL_INSTANCE_PRIORITY = 0x47280F2D,
        SET_DISABLE_CUTSCENE_CROSSHAIRS = 0xEFB0A45E,
        SET_DISABLE_FADE = 0x83A90082,
        SET_DISPATCH_COPS_FOR_PLAYER = 0x48A18913,
        SET_DISPLAY_FLAGS = 0xE55CCC60,
        SET_DITCH_POLICE_MODELS = 0x3EA7FCE4,
        SET_DRIVE_TASK_CRUISE_SPEED = 0x3CEC07B1,
        SET_ENABLE_BULLET_IMPACT_WATER = 0x300D6EF7,
        SET_ENABLE_PED_PROCESS_INTELLIGENCE = 0x6700C96C,
        SET_END_CREDITS_FADE_ACTIVE = 0xB8408EB9,
        SET_END_OF_PART_ONE = 0x46890BC0,
        SET_EVERYONE_IGNORE_PLAYER = 0xC915285E,
        SET_EXITFLAG_FOR_SCRIPT = 0x8A79C0E0,
        SET_EXITFLAG_RESPONSE = 0x551125B9,
        SET_EXPERIENCE_MULTIPLIER = 0xC4E91E1D,
        SET_FADE_MUTE_OVERRIDE = 0x0A31CE81,
        SET_FAIL_PROMPT_BUTTON_AND_TEXT = 0x18EE1B87,
        SET_FAKE_DEATHARREST = 0x4A21BA25,
        SET_FAKE_WANTED_LEVEL = 0x85B1C9FA,
        SET_FOLLOW_PED_CAM_ZOOM_LEVEL = 0x9E686DC1,
        SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL = 0x8F55EBBE,
        SET_FOOT_STEP_AUDIO_MOVEMENT = 0x1911F7DF,
        SET_FORCE_PLAYER_GORE = 0x631DD85B,
        SET_FORCED_AIM_INTENTION_DIRECTION = 0xEE232DCC,
        SET_FORCED_FORWARD_DIRECTION = 0xCE0B5E35,
        SET_FREEBIES_IN_VEHICLE = 0x84C8F466,
        SET_FREEZE_HEADING_BLEND = 0xE2E61E48,
        SET_FREEZE_PED_AIM = 0x4EA8E77C,
        SET_FRONTEND_ACTIVE = 0x81E1AD32,
        SET_GAME_PAUSED = 0x8230FF6C,
        SET_GAME_PAUSES_FOR_STREAMING = 0x9211A28A,
        SET_GAMEPLAY_CAM_RELATIVE_HEADING = 0x20C6217C,
        SET_GAMEPLAY_CAM_RELATIVE_PITCH = 0x6381B963,
        SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE = 0x9219D44A,
        SET_GAMEPLAY_COORD_HINT = 0xF27483C9,
        SET_GAMEPLAY_HELPER_CYLINDER_HEIGHT = 0xB6B24984,
        SET_GAMEPLAY_HELPER_CYLINDER_RADIUS = 0x4EBFD673,
        SET_GAMEPLAY_HELPER_VOLUME_COORD = 0xAE3938DF,
        SET_GAMEPLAY_HINT_FOV = 0x96FD173B,
        SET_GAMEPLAY_HINT_RELATIVE_PITCH = 0x7D04320E,
        SET_GAMEPLAY_OBJECT_HINT = 0x2ED5E2F8,
        SET_GAMEPLAY_PED_HINT = 0x7C27343E,
        SET_GAMEPLAY_VEHICLE_HINT = 0x2C9A11D8,
        SET_GAMEWORLD_AUDIO_MUTE = 0xFAC2EDD0,
        SET_GANG_RELATIONSHIPS_CAN_BE_CHANGED_BY_NEXT_COMMAND = 0x2682B38B,
        SET_GANG_VEHICLE = 0x924C8DBE,
        SET_GARBAGE_TRUCKS = 0xD9ABB0FF,
        SET_GENERATE_BULLET_SHELLS = 0xA61EEC65,
        SET_GLOBAL_INSTANCE_PRIORITY = 0xEA330E59,
        SET_GLOBAL_PHASE_OVERRIDE = 0x80E71892,
        SET_GLOBAL_SUGGESTED_COMBAT_AREA_WEIGHT = 0x84ED684E,
        SET_GRIND_PROGRESS = 0xC97141EE,
        SET_GROUP_FORMATION = 0x08FAC739,
        SET_GROUP_FORMATION_MAX_MOVE_SPEED = 0x76EEE1E6,
        SET_GROUP_FORMATION_SPACING = 0xB1E086FF,
        SET_GROUP_FORMATION_WALK_ALONGSIDE_LEADER_WHEN_CLOSE = 0x55D415AA,
        SET_GROUP_GRENADE_PARAMS = 0xAB1DEE08,
        SET_GROUP_LAST_ALIVE_AS_LONE_WOLF = 0x32F7BB3B,
        SET_GROUP_MAX_NUM_ADVANCING = 0x085CE849,
        SET_GROUP_MAX_NUM_MOVING = 0x8F0D887F,
        SET_GROUP_MAX_NUMS_FIRING = 0x291609A6,
        SET_GROUP_PED_DECISION_MAKER = 0xD93095B3,
        SET_GROUP_PED_DUCKS_WHEN_AIMED_AT = 0x013408C5,
        SET_GROUP_RATIO_FIRING_AT_INVISIBLE = 0x4A7E7B71,
        SET_GROUP_RATIO_FIRING_AT_VISIBLE = 0x16BCC68E,
        SET_GROUP_SEPARATION_RANGE = 0x7B820CD5,
        SET_HANDYCAM_SHAKE = 0xC64D1A59,
        SET_HANG_GLIDER_AIR_SPEED = 0x300EF97E,
        SET_HEADING_LIMIT_FOR_ATTACHED_PED = 0xA7813774,
        SET_HEADING_OF_CLOSEST_OBJECT_OF_TYPE = 0xB74D0E1B,
        SET_HELI_AUDIO_MAX_OCCLUSION = 0x57125C3F,
        SET_HELI_BLADES_FULL_SPEED = 0x033A9408,
        SET_HELI_SPEED_CHEAT = 0xA694F55D,
        SET_HELMET_KNOCK_OFF_HEALTH = 0x844A6C50,
        SET_HELP_MESSAGE_BOX_SIZE = 0x138D7BB9,
        SET_HELPER_ENABLED = 0x7E9977FC,
        SET_HELPER_TRACKING_MODE = 0xC935A93D,
        SET_HIGH_RAGDOLL_LOD_LIMIT = 0x8E88A11B,
        SET_HIGH_RAGDOLL_LOD_LIMIT_TO_DEFAULT = 0xB6E56387,
        SET_HIGHEST_ARCADE_LEVEL_UNLOCKED = 0xC6B59993,
        SET_HIGHEST_DIFFICULTY_BEAT = 0x6196D0C8,
        SET_HOLSTER_VISIBLE = 0x3AC29772,
        SET_HUD_TIMER = 0x4E42A47B,
        SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS = 0xA3D675ED,
        SET_IK_ATTACH_TARGET_OBJ = 0x77315EBE,
        SET_IK_ATTACH_TARGET_PED = 0x14A13274,
        SET_IK_ATTACH_TARGET_VEH = 0x00497A7F,
        SET_IMAGEFX_ENABLED = 0x50E9EF0E,
        SET_IN_MP_TUTORIAL = 0x2FD05431,
        SET_IN_SPECTATOR_MODE = 0x74DBC1BF,
        SET_INFO_TIMER = 0x2402EFB6,
        SET_INSTANT_FIRE_FORCED = 0x9BBE36A1,
        SET_INTERACTION_VOLUME_BLIP_PARAMS = 0xA90BA3FA,
        SET_INTERACTION_VOLUME_STATIC_VARIABLES = 0x931C72B3,
        SET_INTERACTIONTEXT_AVAILABLE = 0xDDCFB33F,
        SET_INTERACTIONTEXT_BUTTON = 0xD2AC407F,
        SET_INTERACTIONTEXT_BUTTON_VISIBLE = 0x120A3F51,
        SET_INTERACTIONTEXT_PULSE = 0x3825FF30,
        SET_INTERACTIONTEXT_PULSE_PERIOD = 0xFE5984FF,
        SET_INTERACTIONTEXT_TEXT = 0x4C2397BD,
        SET_INTERACTIONTEXT_VISIBLE = 0x20538A42,
        SET_INTERIOR_ACTIVE = 0xE1013910,
        SET_INTERIOR_FORCE_INSTANTIATION = 0x449FEFDF,
        SET_IPL_ALWAYS_SEES_EXPLOSION = 0xC59C35A7,
        SET_KILL_EFFECT_NAME = 0xCB39A28D,
        SET_KILL_HEIGHT = 0x50D3FF0E,
        SET_LASER_COLOR = 0xB76E5912,
        SET_LASER_SIGHT_ATTACHMENT = 0xF55F503F,
        SET_LASER_SPREAD = 0xDEDBE1AD,
        SET_LASER_WIDTH = 0x72312BB1,
        SET_LEFT_TRIGGER_HOLD_TIME = 0xADE291A3,
        SET_LEVEL_COMPLETION = 0x03C14716,
        SET_LMS_TUTORIAL_COMPLETE = 0x6715E605,
        SET_LOAD_COLLISION_FOR_PED_FLAG = 0x887E7D88,
        SET_LOAD_COLLISION_FOR_VEHICLE_FLAG = 0x3AEC5728,
        SET_LOBBY_MUTE_OVERRIDE = 0x35BA6682,
        SET_LOCAL_EXPERIENCE_MULTIPLIER = 0xECF21382,
        SET_LOCAL_PLAYER_CAN_USE_SHOOTDODGE = 0xC6BB1780,
        SET_LOCKED_TARGET = 0xE0E4C21C,
        SET_LOCKON_TO_FRIENDLY_PLAYERS = 0x60FFC7F8,
        SET_LOOK_INVERT = 0xC6A53617,
        SET_MAD_DRIVERS = 0x4B7E75DC,
        SET_MASK_ACTIVE = 0xFC3F8FE9,
        SET_MASK_ATTRIBUTES = 0x72C4D458,
        SET_MAX_AMMO_CAP = 0x4C898C45,
        SET_MAX_SUPPRESSOR_DAMAGE_LEVEL = 0x4E17C02F,
        SET_MAX_WANTED_LEVEL = 0x665A06F5,
        SET_MEDIUM_BOATS_PROPELLOR_PTFX_MAX_SPEED_EVO = 0x3F38479B,
        SET_MEDIUM_BOATS_PTFX_MAX_SPEED_EVO = 0x4CF8B8D7,
        SET_MELEE_GRAPPLE_FAIL = 0xE7360DE9,
        SET_MELEE_GRAPPLE_SUCCESS = 0xF8251BF3,
        SET_MESSAGES_WAITING = 0x15A9C493,
        SET_MINIGAME_IN_PROGRESS = 0x348B9046,
        SET_MISSION_FLAG = 0x57592D52,
        SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED = 0x19808560,
        SET_MISSION_TRAIN_COORDS = 0xD6D70803,
        SET_MISSION_TRAINS_AS_NO_LONGER_NEEDED = 0x22BEB86E,
        SET_MODEL_AS_NO_LONGER_NEEDED = 0xAE0F069E,
        SET_MONITORED_STATS = 0x2AC96CE9,
        SET_MOVER_ACTIVE = 0xD1064073,
        SET_MOVER_SPEED = 0xACF9574C,
        SET_MOVIE_FRAME = 0xFD8B4DAA,
        SET_MOVIE_LOOP = 0x14A87C9F,
        SET_MOVIE_TIME = 0xA1930880,
        SET_MOVIE_TINT = 0x1E907D2D,
        SET_MOVIE_VOLUME = 0x21D93ADF,
        SET_MP_GAME_DIFFICULTY = 0x86C7C8EF,
        SET_MP_LAST_MAN_STANDING_DOWN_TIME = 0x8E926913,
        SET_MP_LAST_MAN_STANDING_FLAGS = 0xAFF1FF49,
        SET_MP_LAST_MAN_STANDING_INVINCIBLE_TIME = 0x08261FB4,
        SET_MPBAG_OVERHEAD_PARAMS = 0x1332298C,
        SET_MPITEMS_OVERHEAD_ICONS_ENABLED = 0x13672AC9,
        SET_MSG_FOR_LOADING_SCREEN = 0x0C128376,
        SET_MULTIPLAYER_HUD_CASH = 0xA8DB435E,
        SET_MULTIPLAYER_HUD_SCORE_STATS = 0xA98EAAB3,
        SET_MULTIPLAYER_HUD_TIME = 0x72F2B585,
        SET_MULTIPLE_DRIVEBY_PICKUPS = 0xC619A53A,
        SET_NETWORK_OBJECT_TERRITORY_EFFECT = 0xB0A0AF9E,
        SET_NETWORK_SETTINGS_MENU = 0x21C7922C,
        SET_NEW_GAME_READY = 0x467EAD5A,
        SET_NEXT_DESIRED_MOVE_STATE = 0x4E937D57,
        SET_NEXT_MULTIPLAYER_MESSAGE_TIMEOUT = 0xB1EF9817,
        SET_NEXT_STREAMING_REQUEST_A_PRIORITY = 0x20F0F689,
        SET_NEXT_TICKER_MESSAGE_BACKGROUND_COLOR = 0x4BD59DD4,
        SET_NIGHTVISION = 0xD1E5565F,
        SET_NM_MESSAGE_BOOL = 0xAEF25DC5,
        SET_NM_MESSAGE_FLOAT = 0xE2959702,
        SET_NM_MESSAGE_INSTANCE_INDEX = 0xC8B5DFE3,
        SET_NM_MESSAGE_INT = 0x7FA76EE4,
        SET_NM_MESSAGE_STRING = 0x7A0DF013,
        SET_NM_MESSAGE_VEC3 = 0x535F6DCE,
        SET_NO_COLLISION_TO_PED = 0x16D410E1,
        SET_NOISEOVERIDE = 0xD576F5DD,
        SET_NOISINESSOVERIDE = 0x046B62D9,
        SET_NUMBER_OF_PARKED_VEHICLES = 0x206A58E8,
        SET_OBJECT_ALPHA = 0x98E5B61D,
        SET_OBJECT_ANCHOR = 0xC97C227A,
        SET_OBJECT_ANIM_CURRENT_TIME = 0xDFA5AD5A,
        SET_OBJECT_ANIM_SPEED = 0x485459F9,
        SET_OBJECT_AS_FLIPPABLE_TABLE = 0xBF817CCD,
        SET_OBJECT_AS_NO_LONGER_NEEDED = 0x3F6B949F,
        SET_OBJECT_AS_NON_PATH_OBSTACLE = 0xB507654A,
        SET_OBJECT_AS_PATH_OBSTACLE = 0x2AD60AF9,
        SET_OBJECT_AS_STEALABLE = 0x23A96397,
        SET_OBJECT_BULLET_CAM_PREF = 0x35B1DB56,
        SET_OBJECT_CAN_TRIGGER_BULLET_CAM = 0x9D9BD0D4,
        SET_OBJECT_COLLIDE_WITH_NON_PLAYER_CHARACTER = 0xF77D385E,
        SET_OBJECT_COLLIDE_WITH_OTHER_OBJECTS = 0x53B55EE5,
        SET_OBJECT_COLLISION = 0xEDEA40E8,
        SET_OBJECT_COORDS = 0x3C07FE50,
        SET_OBJECT_DYNAMIC = 0xD73719EF,
        SET_OBJECT_HEADING = 0xE094E341,
        SET_OBJECT_HEALTH = 0x06ACE668,
        SET_OBJECT_INITIAL_VELOCITY = 0xE20C80E4,
        SET_OBJECT_INVINCIBLE = 0xEF19EDA6,
        SET_OBJECT_LIGHTS = 0x88EB06E8,
        SET_OBJECT_ONLY_DAMAGED_BY_PLAYER = 0x9D22CD69,
        SET_OBJECT_PHYSICS_PARAMS = 0xE8D11C58,
        SET_OBJECT_PROOFS = 0x07EA4940,
        SET_OBJECT_QUATERNION = 0x1BAC5DC1,
        SET_OBJECT_RECORDS_COLLISIONS = 0x26461274,
        SET_OBJECT_REFLECTS = 0x867B848E,
        SET_OBJECT_ROTATION = 0xB9BF4EA7,
        SET_OBJECT_SILHOUETTE_COLOUR = 0x70F34A3E,
        SET_OBJECT_SILHOUETTE_ENABLED = 0xB0533CEB,
        SET_OBJECT_TARGETTABLE = 0x3F88CD86,
        SET_OBJECT_USE_WATER_PARTICLES = 0x549C7D2A,
        SET_OBJECT_VISIBLE = 0x9DB02973,
        SET_OBJECTS_AT_COORD_NOT_REMOVED_BY_STREAMING = 0x45BDCE6D,
        SET_ONE_TIME_ONLY_COMMANDS_TO_RUN = 0x840BD987,
        SET_OVERHEAT_AMOUNT = 0x624A49AE,
        SET_OVERRIDE_NO_SPRINTING_ON_PHONE_IN_MULTIPLAYER = 0xE9FDDA54,
        SET_PAD_SHAKE = 0x5D38BD2F,
        SET_PARKED_VEHICLE_DENSITY_MULTIPLIER = 0x98E5C8A7,
        SET_PARTICLE_FX_CAM_INSIDE_VEHICLE = 0x19EC0001,
        SET_PARTICLE_FX_LOOPED_EVOLUTION = 0x1CBC1373,
        SET_PARTICLE_FX_LOOPED_OFFSETS = 0x641F7790,
        SET_PAUSE_MENU_ACTIVE = 0x1DCD878E,
        SET_PAYNE_BOAT_PROPELLOR_PTFX_MAX_SPEED_EVO = 0x3A35B972,
        SET_PAYNE_BOAT_PTFX_CUTSCENE_EFFECT = 0xDBC06AE9,
        SET_PAYNE_BOAT_PTFX_CUTSCENE_PROPELLOR_EFFECT = 0x058EBC01,
        SET_PAYNE_BOAT_PTFX_MAX_SPEED_EVO = 0xD1BDFF84,
        SET_PAYNE_BOAT_PTFX_SKIP = 0xE9719836,
        SET_PAYNEKILLER_AMT = 0x3DE72BB3,
        SET_PAYNEKILLER_BOTTLE_COUNT = 0xF3DE9E5D,
        SET_PAYNEKILLER_HEALTH_BOOST = 0x5E231B87,
        SET_PAYNEKILLER_RECHARGE_RATE = 0x54A5A6C3,
        SET_PED_ACCURACY = 0x6C17122E,
        SET_PED_ADVANCE_DELAY_OVERRIDE = 0xE8B068A7,
        SET_PED_AI_TEMPLATE = 0x740A036E,
        SET_PED_AIM_LOCKONABLE = 0xF68161DB,
        SET_PED_ALERTNESS = 0x2C32D9AE,
        SET_PED_ALL_ANIMS_SPEED = 0x83C20759,
        SET_PED_ALLOWED_TO_ATTACK_IF_SURRENDERED = 0xDA7D361A,
        SET_PED_ALLOWED_TO_DESTROY_IF_SURRENDERED = 0x6400B52C,
        SET_PED_ALLOWED_TO_DUCK = 0xC4D122F8,
        SET_PED_ALLOWED_TO_KNEEL_AND_FIRE = 0x05A338B9,
        SET_PED_ALLOWED_TO_STAND = 0x86A96807,
        SET_PED_ALLOWED_TO_SURRENDER = 0xBCFA8338,
        SET_PED_ALPHA = 0xB94DA9B3,
        SET_PED_AMMO = 0xBF90DF1A,
        SET_PED_ANGLED_DEFENSIVE_AREA = 0x3EFBDD9B,
        SET_PED_ANIM_CURRENT_TIME = 0xF1C753D6,
        SET_PED_ANIM_GROUP = 0x55617E2A,
        SET_PED_ANIM_SPEED = 0x40B81E24,
        SET_PED_AS_ENEMY = 0xAE620A1B,
        SET_PED_AS_GROUP_LEADER = 0x7265BEA2,
        SET_PED_AS_GROUP_MEMBER = 0x0EE13F92,
        SET_PED_AS_MISSION_PED = 0x8F46967F,
        SET_PED_AS_NO_LONGER_NEEDED = 0x9A388380,
        SET_PED_AS_ONE_SHOT_KILL = 0x46ED955A,
        SET_PED_AS_PRIMARY_CHAR = 0x551FE4E8,
        SET_PED_AUTO_UPDATE_EMOTION_STATE = 0x50F22719,
        SET_PED_BLEND_FROM_NM_WITH_ANIM = 0x6C433786,
        SET_PED_BLEND_TO_CROUCHING_FROM_NM = 0xB16475C3,
        SET_PED_BLOOD_SMEAR = 0xEA3D0C15,
        SET_PED_BLOODSPRAY_ENABLE = 0xAD56E6F2,
        SET_PED_BOSS_PECENT_DAMAGED = 0x90C7954A,
        SET_PED_BULLET_CAMERA_ON_NEXT_HIT = 0xF43737FB,
        SET_PED_CAN_AVOID_DEATH_ZONES = 0x712B78D8,
        SET_PED_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP = 0x2F97988A,
        SET_PED_CAN_BE_DRAGGED_OUT = 0xAA7F1131,
        SET_PED_CAN_BE_KNOCKED_OFF_BIKE = 0x83645D83,
        SET_PED_CAN_BE_MELEED = 0x48AF2BA0,
        SET_PED_CAN_BE_SHOT_IN_VEHICLE = 0x5DB7B3A9,
        SET_PED_CAN_BE_SNAPPED_TO_GROUND = 0xBE7D2E94,
        SET_PED_CAN_BE_TARGETED_WHEN_INJURED = 0x6FD9A7CD,
        SET_PED_CAN_BE_TARGETED_WITHOUT_LOS = 0x7FDDC0A6,
        SET_PED_CAN_BE_TARGETTED = 0x75C49F74,
        SET_PED_CAN_COWER_IN_COVER = 0x5194658B,
        SET_PED_CAN_EVASIVE_DIVE = 0x542FEB4D,
        SET_PED_CAN_FLY_THROUGH_WINDSCREEN = 0x348F2753,
        SET_PED_CAN_HEAD_IK = 0xD3B04476,
        SET_PED_CAN_INITIATE_BULLET_CAM = 0x63621CC9,
        SET_PED_CAN_INTERACT_WITH_DOORS = 0x60055ED3,
        SET_PED_CAN_MELEE = 0xF4B9253B,
        SET_PED_CAN_MOVE_WHEN_INJURED = 0xF6589BD1,
        SET_PED_CAN_PEEK_IN_COVER = 0xC1DAE216,
        SET_PED_CAN_PLAY_AMBIENT_ANIMS = 0xF8053081,
        SET_PED_CAN_PLAY_GESTURE_ANIMS = 0xE131E3B3,
        SET_PED_CAN_PLAY_LOCO_FLAVOR_STARTS = 0xAA96A1D3,
        SET_PED_CAN_PLAY_VISEME_ANIMS = 0xA2FDAF27,
        SET_PED_CAN_PUSH_PLAYER = 0xCEEB20E6,
        SET_PED_CAN_PUT_PLAYER_INTO_LMS = 0x6B2B3B17,
        SET_PED_CAN_RAGDOLL = 0xCF1384C4,
        SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT = 0xE9BD733A,
        SET_PED_CAN_REMAIN_ON_BOAT_AFTER_MISSION_ENDS = 0x3B9C6330,
        SET_PED_CAN_SLOW_DOWN_WHEN_TURNING = 0xC7628C42,
        SET_PED_CAN_SMASH_GLASS = 0x149C60A8,
        SET_PED_CAN_SWITCH_WEAPON = 0xB5F8BA28,
        SET_PED_CAN_TRIGGER_BULLET_CAM = 0x7DF0538C,
        SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT = 0x584C5178,
        SET_PED_CHANCE_TO_REACT_TO_IMMINENT_DANGER = 0x75959444,
        SET_PED_CHANCE_TO_SHOOT_AT_DESTRUCTIBLES = 0x4E22797C,
        SET_PED_CHARGE_DELAY_OVERRIDE = 0x3B2E3E6B,
        SET_PED_CLEAR_COVER_TARGET = 0xAE78C3AE,
        SET_PED_CLIMB_ANIM_RATE = 0x571A7C60,
        SET_PED_COLLISION = 0xDB1B8AAC,
        SET_PED_COMBAT_ABILITY = 0x6C23D329,
        SET_PED_COMBAT_ADVANCE_DELAY_TIME = 0x3561D19D,
        SET_PED_COMBAT_ATTRIBUTES = 0x81D64248,
        SET_PED_COMBAT_MOVEMENT = 0x12E62F9E,
        SET_PED_COMBAT_RANGE = 0x8818A959,
        SET_PED_COMBAT_RANGE_HALF_HEIGHT = 0xC551CE6B,
        SET_PED_COMBAT_RANGE_MAX = 0x7DC35B63,
        SET_PED_COMBAT_RANGE_MIN = 0xFF2BE6DE,
        SET_PED_COMPONENT_VARIATION = 0xD4F7B05C,
        SET_PED_CONSUMING_AMMO = 0xECFC30AE,
        SET_PED_COORDS = 0x16BE1EC7,
        SET_PED_COORDS_NO_GANG = 0x9561AD98,
        SET_PED_COORDS_NO_OFFSET = 0x293C3D75,
        SET_PED_CORPSE = 0x804AC45F,
        SET_PED_CORPSE_FROM_ANIM = 0x73405D87,
        SET_PED_COVER_REQUEST_BLINDFIRE = 0x9FF457F8,
        SET_PED_COVER_REQUEST_PEEK = 0xD00F7A1A,
        SET_PED_COVER_TARGET_COORD = 0xA4AEF03C,
        SET_PED_COVER_TARGET_PED = 0x895736EF,
        SET_PED_COVER_TARGET_PED_WITH_BONE_AND_OFFSET = 0x3A6625BB,
        SET_PED_COVER_TARGET_PED_WITH_OFFSET = 0x094B495D,
        SET_PED_COVER_TARGET_VEHICLE = 0xBA0BDD53,
        SET_PED_CURRENT_WEAPON_VISIBLE = 0x00BECD77,
        SET_PED_CUSTOM_FIRING_PATTERN_SHOTS_PER_BURST = 0x91ACB728,
        SET_PED_CUSTOM_FIRING_PATTERN_TIME_BETWEEN_BURSTS = 0x8572A5F9,
        SET_PED_CUSTOM_FIRING_PATTERN_TIME_BETWEEN_SHOTS = 0x86B5FF2B,
        SET_PED_DAMAGED_BY_TEAR_GAS = 0x8C2C034A,
        SET_PED_DECISION_MAKER = 0x13A0D6D5,
        SET_PED_DECISION_MAKER_TO_DEFAULT = 0xDD2DEE0A,
        SET_PED_DEFAULT_AIM_AHEAD = 0x068A4CCB,
        SET_PED_DEFAULT_AIM_AT_COORD = 0x313066FE,
        SET_PED_DEFAULT_AIM_AT_PED = 0x32BF7F45,
        SET_PED_DEFAULT_COMPONENT_VARIATION = 0xC866A984,
        SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED = 0x74BDA7CE,
        SET_PED_DEFENSIVE_AREA_DIRECTION = 0xB66B0C9A,
        SET_PED_DENSITY_MULTIPLIER = 0x87FDB5D1,
        SET_PED_DESIRED_HEADING = 0x961458F9,
        SET_PED_DIES_IN_SINKING_VEHICLE = 0x8D4D9ABB,
        SET_PED_DIES_IN_VEHICLE = 0x6FE1E440,
        SET_PED_DIES_IN_WATER = 0x604C872B,
        SET_PED_DIES_INSTANTLY_IN_WATER = 0xFE2554FC,
        SET_PED_DIES_WHEN_INJURED = 0xE94E24D4,
        SET_PED_DONT_USE_VEHICLE_SPECIFIC_ANIMS = 0x23108373,
        SET_PED_DROPS_OBJECT = 0x4D75C27C,
        SET_PED_DROPS_WEAPON = 0x3D3329FA,
        SET_PED_DROPS_WEAPONS_WHEN_DEAD = 0x8A444056,
        SET_PED_DRUGGED_UP = 0xC89BFBED,
        SET_PED_DUCKING = 0xB90353D7,
        SET_PED_EDGE_COVER_BLINDFIRE_ARC_OVERRIDE = 0xFDB77BC9,
        SET_PED_EMOTION_STATE = 0xF8A51CEC,
        SET_PED_ENABLE_DISTANCE_INACCURACY = 0xB6B77BAC,
        SET_PED_ENABLE_HEADLOOK_CONTROLLER = 0xD74C9BA1,
        SET_PED_ENABLE_SPAWN_INACCURACY = 0x305CA230,
        SET_PED_FIELD_OF_VIEW = 0x57655E86,
        SET_PED_FIRE_AT_COVER = 0x29AD93BB,
        SET_PED_FLAG_AGGRESSIVE_CHARGER = 0xAA129637,
        SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER = 0x76529381,
        SET_PED_FLAG_BLOCK_BLINDFIRE_IN_COVER = 0xE80E66BF,
        SET_PED_FLAG_BLOCK_GORE_REACTION = 0x3D64E5F1,
        SET_PED_FLAG_BLOCK_LEANFIRE_IN_COVER = 0x1335ACA9,
        SET_PED_FLAG_BLOCK_WOUNDED_MOVEMENT = 0xCE23372D,
        SET_PED_FLAG_COMBAT_LEADER = 0x757654BD,
        SET_PED_FLAG_FIRE_UNTIL_EMPTY_IN_COVER = 0x852834FB,
        SET_PED_FLAG_FORCE_BLINDFIRE_IN_COVER = 0x28E044EB,
        SET_PED_FLAG_FORCE_LEANFIRE_IN_COVER = 0x25866265,
        SET_PED_FLAG_FORCE_THROW_PROJECTILE_IN_COVER = 0x70F9E56C,
        SET_PED_FLAG_LOCK_TO_COVER = 0xB845B91D,
        SET_PED_FLAG_SCRIPTED_PROJECTILE_USE = 0x5D1A0A76,
        SET_PED_FLAG_SNIPE_MOVING_TARGETS_OVERRIDE = 0xB1880102,
        SET_PED_FLEE_ATTRIBUTES = 0xA717A875,
        SET_PED_FLEEZONE_ADD_BOX = 0xDAC64BE1,
        SET_PED_FLEEZONE_OPTION = 0x3C2DBC49,
        SET_PED_FLEEZONE_REMOVE_BOX = 0x17ED932A,
        SET_PED_FORCE_FIRE = 0x7FD3A5E9,
        SET_PED_FORCE_KNEEL_AND_FIRE = 0xDF8ACDEE,
        SET_PED_FORCE_START_FIRING_FROM_COVER = 0xF8064C9C,
        SET_PED_FORCE_STOP_FIRING_FROM_COVER = 0x26B05910,
        SET_PED_FORCE_USE_MUZZLE_DIRECTION = 0x3D6DECE5,
        SET_PED_FORCE_USE_RAGDOLL = 0x9960303A,
        SET_PED_FORCED_TO_RUN = 0xDA7588A3,
        SET_PED_FORCED_TO_WALK = 0xA3D46847,
        SET_PED_FREEZE_ORIENTATION = 0x72F54163,
        SET_PED_FREEZE_PROCESSING = 0x390BF58B,
        SET_PED_GADGET = 0x8A256D0A,
        SET_PED_GENERATES_DEAD_BODY_EVENTS = 0xE9B97A2B,
        SET_PED_GESTURE_GROUP = 0x170DA109,
        SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE = 0x89AD49FF,
        SET_PED_GIVE_POST_LMS_BREAK = 0x2C7E761A,
        SET_PED_GLOBAL_KNEELING_ALLOWED = 0x954A05B9,
        SET_PED_GLOBAL_PERCENT_DODGE_CHANCE = 0xE4641DD3,
        SET_PED_GORE = 0xDA25E662,
        SET_PED_GORE_AS_ALLY = 0x5A64FA8B,
        SET_PED_GORE_AS_DEFAULT = 0xCBFA79EA,
        SET_PED_GORE_FROM_NPC = 0x6CBAB679,
        SET_PED_GORE_FROM_PLAYER = 0x25A69B70,
        SET_PED_GRAVITY = 0x3CA16652,
        SET_PED_GROUP_MEMBER_PASSENGER_INDEX = 0x2AB3670B,
        SET_PED_HAS_SPECIAL_GUN_SOUND = 0x24A0BE24,
        SET_PED_HEADING = 0xE9288F19,
        SET_PED_HEALTH = 0x0A325D05,
        SET_PED_HEALTH_AS_BOOST = 0xDE3B8D3B,
        SET_PED_HEARING_RANGE = 0xB32087E0,
        SET_PED_HEEDS_THE_EVERYONE_IGNORE_PLAYER_FLAG = 0x31A06AF4,
        SET_PED_HELMET = 0xED366E53,
        SET_PED_ID_RANGE = 0xEF3B4ED9,
        SET_PED_IGNORE_LOS_CHECKS = 0x007FED1F,
        SET_PED_IN_CUTSCENE = 0x96937FF3,
        SET_PED_INTO_VEHICLE = 0x07500C79,
        SET_PED_INVINCIBLE = 0x1FC771E2,
        SET_PED_IS_HUMAN_SHIELD = 0x697C85BD,
        SET_PED_IS_TARGET_PRIORITY = 0xBA055544,
        SET_PED_KEEP_TASK = 0xA7EC79CE,
        SET_PED_LEG_IK_MODE = 0xFDDB042E,
        SET_PED_LOD_THRESHOLD = 0xEB6AC9D5,
        SET_PED_MAX_COVER_SEARCH_RADIUS = 0x69B6D9F0,
        SET_PED_MAX_HEALTH = 0x5533F60B,
        SET_PED_MAX_TIME_IN_WATER = 0xFE0A106B,
        SET_PED_MAX_TIME_UNDERWATER = 0x082EF240,
        SET_PED_MELEE_ACTION_FLAG0 = 0x358850B0,
        SET_PED_MELEE_ACTION_FLAG1 = 0xEB55BC44,
        SET_PED_MELEE_MOVEMENT_CONSTRAINT_BOX = 0x3D3C9BB7,
        SET_PED_MELEE_TRIGGER_DIST_OVERRIDE = 0xA7222120,
        SET_PED_MODEL_IS_SUPPRESSED = 0x7820CA43,
        SET_PED_MODEL_LOD_DISTANCES = 0x33659A97,
        SET_PED_MOVE_ANIMS_BLEND_OUT = 0x20E01957,
        SET_PED_NAME_DEBUG = 0x20D6273E,
        SET_PED_NEVER_LEAVES_GROUP = 0x0E038813,
        SET_PED_NM_ANIM_POSE = 0x2771F8D3,
        SET_PED_NO_RAGDOLL_TO_BULLET_UNLESS_DEAD = 0xCEEE9EFE,
        SET_PED_NO_RAGDOLL_TO_EXPLOSION_UNLESS_DEAD = 0x49CCB497,
        SET_PED_NON_CREATION_AREA = 0x7A97283F,
        SET_PED_NON_REMOVAL_AREA = 0x599D82E7,
        SET_PED_NUM_ADVANCERS_OVERRIDE = 0xB194E66C,
        SET_PED_NUM_CHARGERS_OVERRIDE = 0x1A7D00D1,
        SET_PED_OBLIVIOUS_TO_DANGER = 0xCD1828FE,
        SET_PED_ONLY_COLLIDE_WITH_RAGDOLL_BOUNDS = 0x2B87EED7,
        SET_PED_ONLY_DAMAGED_BY_PLAYER = 0x785992AF,
        SET_PED_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP = 0x7CC6EF33,
        SET_PED_OUT_OF_VEHICLE = 0x22AE6723,
        SET_PED_PANIC_RANGE_OVERRIDE = 0xB83B634D,
        SET_PED_PATH_CAN_AVOID_DYNAMIC_OBJECTS = 0x57A414E5,
        SET_PED_PATH_CAN_AVOID_LINE_OF_FIRE = 0x626D65F6,
        SET_PED_PATH_CAN_DROP_FROM_HEIGHT = 0x394B7AC9,
        SET_PED_PATH_CAN_ENTER_WATER = 0xC61CA38D,
        SET_PED_PATH_CAN_OPEN_CLOSED_DOORS = 0x7C0C0376,
        SET_PED_PATH_CAN_USE_CLIMBOVERS = 0xB7B7D442,
        SET_PED_PATH_CAN_USE_LADDERS = 0x53A879EE,
        SET_PED_PATH_VAULTING_USAGE = 0x1E7312D0,
        SET_PED_PATHS_BACK_TO_ORIGINAL = 0x3F1ABDA4,
        SET_PED_PATHS_IN_AREA = 0x2148EA84,
        SET_PED_PERFECT_ACCURACY_OVERRIDE = 0x136BA027,
        SET_PED_PINNED_DOWN = 0xCC78999D,
        SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE = 0x7C563CD2,
        SET_PED_PRIMARY_LOOKAT = 0x6DEF6F1C,
        SET_PED_PROJECTILE_OVERRIDE_PARAMETERS = 0x708DE568,
        SET_PED_PROOFS = 0x094E8BC4,
        SET_PED_PROP_INDEX = 0x0829F2E2,
        SET_PED_PTFX_SPLASH_OUT_SPECIAL_EFFECT = 0xDE3F2565,
        SET_PED_RANDOM_COMPONENT_VARIATION = 0x4111BA46,
        SET_PED_REACT_TO_CAR_COLLISION = 0x6B4C2CC6,
        SET_PED_READY_TO_BE_EXECUTED = 0x4D19C95B,
        SET_PED_READY_TO_BE_STUNNED = 0xC6787268,
        SET_PED_RECORDING_PLAYBACK_SPEED = 0x74C0A42E,
        SET_PED_REDUCED_DAMAGE_IK = 0x23754843,
        SET_PED_RELATIONSHIP = 0x3326679D,
        SET_PED_RELATIONSHIP_GROUP = 0x859990D1,
        SET_PED_REQUIRE_HEADSHOT_TO_KILL = 0x12085B68,
        SET_PED_RESIST_TO_OBJECT_COLLISION = 0x2720C246,
        SET_PED_ROTATION = 0xE0C7B6BB,
        SET_PED_SECONDARY_LOOKAT = 0x09B700AE,
        SET_PED_SEEING_RANGE = 0x4BD72FE8,
        SET_PED_SENSE_RANGE = 0x7AC6C04A,
        SET_PED_SHOOT_RATE = 0xFB301746,
        SET_PED_SHOOTS_AT_COORD = 0xFD64EAE5,
        SET_PED_SILHOUETTE_COLOUR = 0x97F0EE26,
        SET_PED_SILHOUETTE_ENABLED = 0x56FB3FFD,
        SET_PED_SILHOUETTE_WHENVISIBLE_ENABLED = 0x3429857E,
        SET_PED_SIT_IDLE_ANIM = 0x1F0EFD92,
        SET_PED_SPHERE_DEFENSIVE_AREA = 0xBD96D8E8,
        SET_PED_STAND_GROUND_ON_PLAYER_IMPACT = 0x9660FB67,
        SET_PED_START_SUPPRESSIVE_FIRE = 0xE96A849D,
        SET_PED_STAY_IN_VEHICLE_WHEN_JACKED = 0xB014A09C,
        SET_PED_STEALTH_ATTRIBUTES = 0xB24394CA,
        SET_PED_STEALTH_MOVEMENT = 0x67E28E1D,
        SET_PED_STEERS_AROUND_OBJECTS = 0x3BD9B0A6,
        SET_PED_STEERS_AROUND_PEDS = 0x797CAE4F,
        SET_PED_STOP_SUPPRESSIVE_FIRE = 0x601F77B7,
        SET_PED_SUFFERS_CRITICAL_HITS = 0x6F6FC7E6,
        SET_PED_SUGGESTED_COMBAT_AREA_ADD_BOX = 0x4A92C506,
        SET_PED_SUGGESTED_COMBAT_AREA_REMOVE_BOX = 0xF2C00944,
        SET_PED_SUGGESTED_COMBAT_AREA_STEP = 0xD4781ED2,
        SET_PED_SUGGESTED_COVER_POINT = 0x198A63E4,
        SET_PED_SUPERLOD_THRESHOLD = 0x666EC267,
        SET_PED_SWEAT = 0x76A1DB9F,
        SET_PED_SYNC_POINT = 0x495AD422,
        SET_PED_TETHERING_ADD_BOX = 0x0E697ED0,
        SET_PED_TETHERING_OPTION = 0x2FE1B82A,
        SET_PED_TETHERING_REMOVE_BOX = 0x13DAB679,
        SET_PED_TO_ANIMATED = 0x48ED4F81,
        SET_PED_TO_INFORM_RESPECTED_FRIENDS = 0xD78AC46C,
        SET_PED_TO_LOAD_COVER = 0xCF94BA97,
        SET_PED_TO_RAGDOLL = 0x83CB5052,
        SET_PED_TO_RAGDOLL_WITH_EXPLOSION = 0xF561B007,
        SET_PED_TO_RAGDOLL_WITH_FALL = 0xFA12E286,
        SET_PED_USES_ANIMATED_DEATH = 0x7F575B71,
        SET_PED_USES_DEAFULT_ANIM_GROUP_WHEN_FLEEING = 0xF604C9E2,
        SET_PED_USES_DYING_ANIM = 0x4F0D8111,
        SET_PED_VALIDATE_BULLET_CAM_HIT = 0xFBB7E5C8,
        SET_PED_VELOCITY = 0xD34337FB,
        SET_PED_VISIBLE = 0xD599744F,
        SET_PED_VISIBLE_DURING_SEQUENCE = 0xA76C4A14,
        SET_PED_VOICE_FULL = 0x7A7C24DD,
        SET_PED_WANTED_BY_POLICE = 0xB255B830,
        SET_PED_WEAPON_BLOCK_CHECK = 0x06519D09,
        SET_PED_WEAPON_OBSTRUCTION_CHECK_DISTANCE = 0x6F1AC8DC,
        SET_PED_WETNESS = 0x836E9462,
        SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER = 0xF4C0C377,
        SET_PED_WITH_BRAIN_CAN_BE_CONVERTED_TO_DUMMY_PED = 0x71060A53,
        SET_PERSISTENT_PED_VARIATION = 0x3DDDB088,
        SET_PERSISTENT_PED_VARIATION_ENUM = 0x20485584,
        SET_PERSISTENT_STREAM_PED_VARIATION = 0x4206DB40,
        SET_PERSISTENT_STREAM_PED_VARIATION_ENUM = 0x91B49B0B,
        SET_PETROLTANK_BURN_RATE = 0xC06ADE7A,
        SET_PHONE_HUD_ITEM = 0x7FD60931,
        SET_PICKUP_AMMO = 0xCCA72391,
        SET_PICKUP_BLIP_COLOUR = 0x8E3E6E45,
        SET_PICKUP_BLIP_DISPLAY = 0xC7410B80,
        SET_PICKUP_BLIP_PRIORITY = 0x7E7DA662,
        SET_PICKUP_BLIP_SCALE = 0xD6A4F36B,
        SET_PICKUP_BLIP_SPRITE = 0xEE28B6FE,
        SET_PICKUP_LASER_SIGHT_ATTACHMENT = 0xB3C7B87A,
        SET_PICKUP_LIMIT_ANGLE = 0x12177009,
        SET_PICKUP_REMOVAL_TIMES = 0x172FA186,
        SET_PICKUP_WEAPON_DATA_FROM_WEAPON = 0x00D3791A,
        SET_PLACEMENT_CAN_BE_COLLECTED = 0x9AB53495,
        SET_PLAYBACK_SPEED = 0x684E26E4,
        SET_PLAYBACK_TO_USE_AI = 0xB536CCD7,
        SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER = 0x0C8ABAA4,
        SET_PLAYER_ALT_HEALTH = 0x4DB0855A,
        SET_PLAYER_ALT_MAX_HEALTH = 0x638660F0,
        SET_PLAYER_CACHED_CAMERA_ORIENTATION = 0x4B35E639,
        SET_PLAYER_CAN_ACTIVATE_BULLET_TIME = 0xECD0EB64,
        SET_PLAYER_CAN_BE_HASSLED_BY_GANGS = 0x71B305BB,
        SET_PLAYER_CAN_BE_PINNED_IN_COVER = 0x02343733,
        SET_PLAYER_CAN_CANCEL_SHOOTDODGE = 0x8FD7169A,
        SET_PLAYER_CAN_CARRY_NON_MISSION_OBJECTS = 0x54B0C19B,
        SET_PLAYER_CAN_DO_DRIVE_BY = 0xF4D99685,
        SET_PLAYER_CAN_USE_COVER = 0x13CAFAFA,
        SET_PLAYER_CAN_USE_FREEFORM_STRIKE = 0x21FC90F7,
        SET_PLAYER_CAN_USE_SHOOTDODGE = 0x880FAED5,
        SET_PLAYER_COLOUR = 0x24750296,
        SET_PLAYER_COMBAT_TIMER_MODE = 0x5E348DA2,
        SET_PLAYER_CONTROL = 0xD17AFCD8,
        SET_PLAYER_CONTROL_FOR_NETWORK = 0x04E33A0A,
        SET_PLAYER_CONTROL_ON_IN_MISSION_CLEANUP = 0xE886E2C5,
        SET_PLAYER_FORCE_PAIN_KILLER = 0x49F9AB61,
        SET_PLAYER_FORCED_AIM = 0x94E42E2E,
        SET_PLAYER_FORCED_AIM_MAINTAIN_DIRECTION = 0xFE1EC142,
        SET_PLAYER_GLOBAL_COMBAT_TIMER_STATE = 0xC02C4FE7,
        SET_PLAYER_HEALTH_REGENERATION = 0xFB207BEA,
        SET_PLAYER_HEALTH_REGENERATION_MAX = 0xA94E6088,
        SET_PLAYER_HEALTH_REGENERATION_RATE = 0x10182B3F,
        SET_PLAYER_ICON_COLOUR = 0x1630B64C,
        SET_PLAYER_IN_BECKER_BOSS_FIGHT = 0x31539EA2,
        SET_PLAYER_INFINTE_STAMINA = 0x44466C42,
        SET_PLAYER_INVINCIBLE = 0xDFB9A2A2,
        SET_PLAYER_KEEPS_WEAPONS_WHEN_RESPAWNED = 0xD10FC340,
        SET_PLAYER_LOCKED_IN_COVER = 0xAFD8C788,
        SET_PLAYER_LOCKON = 0x0B270E0F,
        SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE = 0xA454DD29,
        SET_PLAYER_MODEL = 0x774A4C54,
        SET_PLAYER_MOOD_NORMAL = 0xB1FF6041,
        SET_PLAYER_MOOD_PISSED_OFF = 0x6F60E94E,
        SET_PLAYER_OXYGEN = 0x1B92B5E5,
        SET_PLAYER_PLAYER_TARGETTING = 0xF12A7F7D,
        SET_PLAYER_POINTS = 0xAE5A0494,
        SET_PLAYER_SAFE_FOR_CUTSCENE = 0x7EBFBB34,
        SET_PLAYER_SHOOTDODGE_GET_UP_STATE = 0x5EDA74EA,
        SET_PLAYER_SPRINT = 0x7DD7900C,
        SET_PLAYER_SPRINT_SP = 0x92282FE2,
        SET_PLAYER_TEAM = 0x725ADCF2,
        SET_PLAYER_THREAT_REACTION = 0xE050BAC4,
        SET_PLAYER_USING_COVER = 0x67A896B3,
        SET_PLAYER_WANTED_LEVEL = 0xB7A0914B,
        SET_PLAYER_WANTED_LEVEL_NO_DROP = 0xED6F44F5,
        SET_PLAYER_WANTED_LEVEL_NOW = 0xAF3AFD83,
        SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED = 0xA86BD91F,
        SET_PLAYERS_DROP_MONEY_IN_NETWORK_GAME = 0x0806204B,
        SET_POLICE_FOCUS_WILL_TRACK_VEHICLE = 0x5690F6C3,
        SET_POLICE_IGNORE_PLAYER = 0xE6DE71B7,
        SET_POLICE_RADAR_BLIPS = 0x8E114B10,
        SET_PORTAL_TRACK_DEATH_CAMERA = 0x5B1065AF,
        SET_POST_LMS_DAMAGE_TO_PLAYER_OVERRIDES = 0xB9C2BFBD,
        SET_PRE_CUTSCENE_OBJECT_NO_LONGER_NEEDED = 0x2FB8D0E6,
        SET_PRE_CUTSCENE_PED_NO_LONGER_NEEDED = 0x54D1FACD,
        SET_PRE_CUTSCENE_VEHICLE_NO_LONGER_NEEDED = 0x2A9FF799,
        SET_PRE_CUTSCENE_WEAPON_NO_LONGER_NEEDED = 0x4F144C0B,
        SET_PRESET_TEXT = 0x58439F1A,
        SET_PRESET_TEXT_TIMING = 0xCA682A7E,
        SET_PRESET_TEXTVIDEO = 0x292E48B3,
        SET_PROFILE_SETTING = 0xF6FA0CA6,
        SET_PROGRESS_BAR_COLOURS = 0xE68944E3,
        SET_PROGRESS_BAR_FLASH = 0x7CCD409B,
        SET_PROGRESS_BAR_NAME = 0x07284689,
        SET_PROGRESS_BAR_PERCENT = 0x5D681AB9,
        SET_PROGRESS_BAR_POSITION = 0x7933FBC4,
        SET_PROGRESS_BAR_START_FLASH_PERCENT = 0x29FF4235,
        SET_PROGRESS_BAR_VISIBLE = 0x7CA2A24F,
        SET_PROJECTILE_THROW_USE_DAMPING_COMPENSATION = 0xBA40DC95,
        SET_PUDDLES = 0x7B0E77C5,
        SET_RADAR_AS_INTERIOR_THIS_FRAME = 0x6F2626E1,
        SET_RADAR_ZOOM = 0x2A50D1A6,
        SET_RAIL_RELATIVE_DIR = 0x69B9D3A5,
        SET_RANDOM_BOATS = 0xB505BD89,
        SET_RANDOM_SEED = 0xDB3FEB5C,
        SET_RANDOM_TRAINS = 0xD461CA7F,
        SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER = 0x876A0BCE,
        SET_RANDOM_WEATHER_TYPE = 0xE7AA1BC9,
        SET_REDUCE_PED_MODEL_BUDGET = 0xAFCB2B86,
        SET_REDUCE_VEHICLE_MODEL_BUDGET = 0xCDB4FB7E,
        SET_RELATIONSHIP_BETWEEN_REL_GROUPS = 0xDB37D46E,
        SET_RENDER_TRAIN_AS_DERAILED = 0x899D9092,
        SET_RICH_PRESENCE = 0x7BDCBD45,
        SET_RIGHT_TRIGGER_HOLD_TIME = 0x0BD1F617,
        SET_RINGICON_OBJECT = 0x8B6F801B,
        SET_RINGICON_OBJECT_PERCENT = 0x616D7ACC,
        SET_RINGICON_PLAYER = 0x9506F619,
        SET_RINGICON_PLAYER_PERCENT = 0x473ADD6D,
        SET_RINGICON_WORLD = 0x32BE24DE,
        SET_RINGICON_WORLD_PERCENT = 0x5BF34139,
        SET_ROADS_BACK_TO_ORIGINAL = 0x86AC4A85,
        SET_ROADS_IN_AREA = 0xEBC7B918,
        SET_ROCKET_LAUNCHER_FREEBIE_IN_HELI = 0x62F3E0F3,
        SET_ROOM_FOR_OBJECTS_IN_IPL = 0x2BE9CC9D,
        SET_ROOM_FOR_PED_BY_KEY = 0x41FC2A85,
        SET_ROOM_FOR_PED_BY_NAME = 0xD363B660,
        SET_ROOM_FOR_VEHICLE_BY_KEY = 0x83AFEA05,
        SET_ROOM_FOR_VEHICLE_BY_NAME = 0xCC9D85E7,
        SET_ROUTE_FLASHES = 0x93BD3E80,
        SET_SAFE_TO_KILL_PLAYER = 0x1328332A,
        SET_SCENARIO_PED_DENSITY_MULTIPLIER = 0x874B05BE,
        SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA = 0x80EAD297,
        SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND = 0x85615FD0,
        SET_SCENE_STREAMING = 0xC988470E,
        SET_SCRIPT_AS_NO_LONGER_NEEDED = 0x6FCB7795,
        SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH = 0x107EA41E,
        SET_SCRIPT_RENDERTARGET_SIZE_ID = 0x5155F6F8,
        SET_SCRIPT_SHOULD_BE_SAVED = 0xC109699A,
        SET_SCRIPT_VEHICLE_GENERATOR = 0x40D73747,
        SET_SCRIPTED_ANIM_SEAT_OFFSET = 0x7CEFFA45,
        SET_SCRIPTED_CONVERSION_COORD = 0x4A97C006,
        SET_SEAMLESS_CUTSCENE_COORDS = 0xB7A469ED,
        SET_SEAMLESS_CUTSCENE_TRIGGER_AREA = 0x96FF2315,
        SET_SECONDARY_LIFE_BACKGROUND_COLOR = 0xC509E8EA,
        SET_SECONDARY_LIFE_BACKGROUND_COLOR32 = 0xE6330B74,
        SET_SECONDARY_LIFE_BAR_ALPHA = 0xB0139147,
        SET_SECONDARY_LIFE_BAR_COLOR = 0xBBB82D30,
        SET_SECONDARY_LIFE_BAR_COLOR32 = 0x502ECD4B,
        SET_SECONDARY_LIFE_BAR_NAME = 0x6CB9CEA9,
        SET_SECONDARY_LIFE_BAR_PERCENT = 0x78474550,
        SET_SECONDARY_LIFE_BAR_START_FLASH_PERCENT = 0xB8BD396B,
        SET_SECONDARY_LIFE_ICON = 0x161011A3,
        SET_SECONDARY_LIFE_ICON_COLOR = 0x441B42D0,
        SET_SECONDARY_LIFE_ICON_COLOR32 = 0x585032B9,
        SET_SECONDARY_LIFE_SCALE = 0x5CE97A69,
        SET_SECONDARY_LIFE_TEXT_COLOR = 0x8333ADD4,
        SET_SECONDARY_LIFE_TEXT_COLOR32 = 0xADA42319,
        SET_SEQUENCE_TO_REPEAT = 0xCDDF1508,
        SET_SHELL_LOD_DIST_ENTITY = 0xCE6C2A4E,
        SET_SHELL_LOD_DIST_MESHFX = 0xA17BA731,
        SET_SILHOUETTE_ACTIVE = 0xBD11E03E,
        SET_SILHOUETTE_DISTANCE_FALLOFF = 0x5D9C6169,
        SET_SILHOUETTE_RENDER_SETTINGS = 0x251A1458,
        SET_SINGLE_PLAYER_TITLE_SCREEN_ENTRY_HANDLED = 0x9DF58C06,
        SET_SIREN_WITH_NO_DRIVER = 0x77182D58,
        SET_SLEEP_MODE_ACTIVE = 0x8AC848BA,
        SET_SMALL_BOAT_PTFX_CUTSCENE_EFFECT = 0x039101C7,
        SET_SMALL_BOAT_PTFX_CUTSCENE_PROPELLOR_EFFECT = 0x3B6463A8,
        SET_SMALL_BOATS_PROPELLOR_PTFX_MAX_SPEED_EVO = 0xEAB22432,
        SET_SMALL_BOATS_PTFX_MAX_SPEED_EVO = 0xCC4E37B9,
        SET_SNIPER_HUD_ALPHA = 0x13A2A389,
        SET_SPECIAL_MPITEM_BLIP_PARAMS = 0x90FD2B14,
        SET_SPRITES_DRAW_BEFORE_FADE = 0x275DE46E,
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE = 0x38C951A4,
        SET_STATIC_EMITTER_VOLUME = 0xFDF95AA4,
        SET_STREAM_PED_COMPONENT_VARIATION = 0x9F59036F,
        SET_STREAM_PED_CUSTOMISATION_DATA = 0xA3E802DD,
        SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED = 0xF07DDA38,
        SET_STREAMING = 0x27EF6CB2,
        SET_STREAMING_POINT_OF_INTEREST = 0x27BA0211,
        SET_SUPPRESSOR_DAMAGE_LEVEL = 0x5F580A8A,
        SET_SWEAT_ENABLED = 0x296668CC,
        SET_SYNC_WEATHER_AND_GAME_TIME = 0xB3A07403,
        SET_TAXI_LIGHTS = 0x68639D85,
        SET_TEAR_GAS_EFFECT_AUTO_END = 0xAA1C242F,
        SET_TERRITORY_BLIP_SCALE = 0xAB843007,
        SET_TEXT_BACKGROUND = 0x14ADAD25,
        SET_TEXT_CENTRE = 0xE26D39A1,
        SET_TEXT_COLOUR = 0xE54DD2C8,
        SET_TEXT_DRAW_BEFORE_FADE = 0x1B2BA35E,
        SET_TEXT_DROPSHADOW = 0xE6587517,
        SET_TEXT_EDGE = 0x3F1A5DAB,
        SET_TEXT_FONT = 0x80BC530D,
        SET_TEXT_JUSTIFY = 0xBC971139,
        SET_TEXT_LINE_DISPLAY = 0x5AE8AF79,
        SET_TEXT_LINE_HEIGHT_MULT = 0x2F947549,
        SET_TEXT_PROPORTIONAL = 0xF49D8A08,
        SET_TEXT_RENDER_ID = 0xC5C3B7F3,
        SET_TEXT_RIGHT_JUSTIFY = 0x45B60520,
        SET_TEXT_SCALE = 0xB6E15B23,
        SET_TEXT_TO_USE_TEXT_FILE_COLOURS = 0xB95E39DE,
        SET_TEXT_USE_UNDERSCORE = 0x95CD1881,
        SET_TEXT_WRAP = 0x6F60AB54,
        SET_THIS_MACHINE_RUNNING_SERVER_SCRIPT = 0x1626C5C3,
        SET_THIS_SCRIPT_CAN_BE_PAUSED = 0xA0C3CE29,
        SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT = 0xD06F1720,
        SET_TIME_CYCLE_MODIFIERS_ENABLED = 0xF9665C8C,
        SET_TIME_OF_DAY = 0xAD03186C,
        SET_TIME_ONE_DAY_BACK = 0x0DB2A037,
        SET_TIME_ONE_DAY_FORWARD = 0xBB56C2E5,
        SET_TIME_SCALE = 0xA7F84694,
        SET_TIMECYCLE_MODIFIER = 0xA81F3638,
        SET_TIMECYCLE_MODIFIER_OVERRIDE = 0xBCB2D9B5,
        SET_TIMEWARP_FIRE_SCALE = 0x68883C5E,
        SET_TOXICITY_LEVEL_TIME = 0x0AA9761E,
        SET_TRAFFIC_SYSTEM = 0xB0ABF560,
        SET_TRAIN_AUDIO_ROLLOFF = 0x56F2F2E9,
        SET_TRAIN_CRUISE_SPEED = 0xB507F51D,
        SET_TRAIN_FORCED_TO_SLOW_DOWN = 0x7C3600D4,
        SET_TRAIN_IS_STOPPED_AT_STATION = 0xE276A20D,
        SET_TRAIN_LEAVES_STATION = 0x4438873D,
        SET_TRAIN_SHAKE = 0x1C6901B3,
        SET_TRAIN_SPEED = 0xDFC35E4D,
        SET_TRAIN_STOPS_FOR_STATIONS = 0x43E5F109,
        SET_TRANSITION_MOVIE_SKIPPABLE = 0x4278FA3D,
        SET_TUTORIAL_COMPLETE = 0x854FAB50,
        SET_USE_ANIMATED_VELOCITY = 0x92FE3DB8,
        SET_USE_WEAPON_BOUND = 0xD1827431,
        SET_USES_COLLISION_OF_CLOSEST_OBJECT_OF_TYPE = 0x88042DC7,
        SET_USING_ALT_HEALTH = 0xB135037B,
        SET_VARIABLE_ON_SOUND = 0x606EE5FA,
        SET_VEHICLE_ALARM = 0x24877D84,
        SET_VEHICLE_ALPHA = 0x5D4A2BC2,
        SET_VEHICLE_AS_CONVOY_VEHICLE = 0x2CF62ABD,
        SET_VEHICLE_AS_ENTITY_SYNC_POINT = 0xAEB6D2DE,
        SET_VEHICLE_AS_MISSION_VEHICLE = 0x73FA1219,
        SET_VEHICLE_AS_NO_LONGER_NEEDED = 0x9B0E10BE,
        SET_VEHICLE_BLIP_THROTTLE_RANDOMLY = 0xC2F6FE4A,
        SET_VEHICLE_BLOWUP_ON_NEXT_COLLISION = 0xAF0FD67A,
        SET_VEHICLE_BULLET_CAM_PREF = 0x84DA3B85,
        SET_VEHICLE_BULLET_CAMERA_ON_NEXT_HIT = 0x7394BC1C,
        SET_VEHICLE_CAN_BE_DAMAGED = 0x2386C5B7,
        SET_VEHICLE_CAN_BE_TARGETTED = 0x64B70B1D,
        SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED = 0xC5D94017,
        SET_VEHICLE_CAN_BREAK = 0x90A810D1,
        SET_VEHICLE_CAN_TRIGGER_BULLET_CAM = 0xDF932BC,
        SET_VEHICLE_COLLISION = 0xC7A6A137,
        SET_VEHICLE_COLOUR_COMBINATION = 0xA557AEAD,
        SET_VEHICLE_COLOURS = 0x57F24253,
        SET_VEHICLE_CONTROL_TO_PLAYER = 0x6BC7338F,
        SET_VEHICLE_COORDS = 0x54C9AD1D,
        SET_VEHICLE_COORDS_NO_OFFSET = 0x67714186,
        SET_VEHICLE_DAMAGE = 0x21B458B2,
        SET_VEHICLE_DENSITY_MULTIPLIER = 0x8B289F79,
        SET_VEHICLE_DIRT_LEVEL = 0x2B39128B,
        SET_VEHICLE_DOOR_BROKEN = 0x8147FEA7,
        SET_VEHICLE_DOOR_CONTROL = 0x572DD360,
        SET_VEHICLE_DOOR_LATCHED = 0x4EB7BBFC,
        SET_VEHICLE_DOOR_OPEN = 0xBB75D38B,
        SET_VEHICLE_DOOR_SHUT = 0x142606BD,
        SET_VEHICLE_DOORS_LOCKED = 0x4CDD35D0,
        SET_VEHICLE_DOORS_SHUT = 0xBB1FF6E7,
        SET_VEHICLE_DRIVE_FORCE_IN_AIR = 0x2B97EF1F,
        SET_VEHICLE_ENGINE_CAN_BE_DAMAGED = 0x5AAB9674,
        SET_VEHICLE_ENGINE_HEALTH = 0x1B760FB5,
        SET_VEHICLE_ENGINE_ON = 0x7FBC86F1,
        SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE = 0x38CC692B,
        SET_VEHICLE_EXPLODES_ONLY_FROM_PROJECTILE_EXPLOSIONS = 0x8D359F17,
        SET_VEHICLE_EXTRA = 0x642D065C,
        SET_VEHICLE_EXTRA_COLOURS = 0x515DB2A0,
        SET_VEHICLE_FIXED = 0x17469AA1,
        SET_VEHICLE_FIXED_WEAPON_ACCURACY = 0xC38EDA8A,
        SET_VEHICLE_FIXED_WEAPON_DAMAGE = 0x4F177788,
        SET_VEHICLE_FIXED_WEAPON_FIRING_PATTERN_MODE = 0xC8FF4A34,
        SET_VEHICLE_FIXED_WEAPON_FIRING_PATTERN_SET = 0x0B4F809D,
        SET_VEHICLE_FORWARD_SPEED = 0x69880D14,
        SET_VEHICLE_FREEZE_AFTER_BLOWING_UP = 0xFCD50E3D,
        SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER = 0xB4D3DBFB,
        SET_VEHICLE_HAS_STRONG_AXLES = 0x0D1CBC65,
        SET_VEHICLE_HEADING = 0x3E502113,
        SET_VEHICLE_HEALTH = 0x3BCB0EA4,
        SET_VEHICLE_IN_CUTSCENE = 0x25533564,
        SET_VEHICLE_INST_LIGHT_TUNE_VALUES = 0x3ADF1AAA,
        SET_VEHICLE_INTERIORLIGHT = 0x9AD1FE1E,
        SET_VEHICLE_IS_CONSIDERED_BY_PLAYER = 0x14413319,
        SET_VEHICLE_LIGHT_MULTIPLIER = 0x48039D6A,
        SET_VEHICLE_LIGHTS = 0xE8930226,
        SET_VEHICLE_LIVERY = 0x7AD87059,
        SET_VEHICLE_MODEL_IS_SUPPRESSED = 0x42A08C9B,
        SET_VEHICLE_NAME_DEBUG = 0xA712FF5C,
        SET_VEHICLE_NEEDS_TO_BE_HOTWIRED = 0xD8260751,
        SET_VEHICLE_NOT_EXPLODABLE = 0x5F2B2A1C,
        SET_VEHICLE_ON_GROUND_PROPERLY = 0xE14FDBA6,
        SET_VEHICLE_ONLY_DAMAGED_BY_PLAYER = 0x5F6A171F,
        SET_VEHICLE_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP = 0x5A7B778A,
        SET_VEHICLE_ONLY_EXPLODES_WHEN_HIT_BY_MULTIPLE_EXPLOSIONS = 0x2A61C5E7,
        SET_VEHICLE_PETROL_TANK_HEALTH = 0x660A3692,
        SET_VEHICLE_PROOFS = 0x23448784,
        SET_VEHICLE_PROVIDES_COVER = 0xEFC01CA9,
        SET_VEHICLE_QUATERNION = 0x7A5B849E,
        SET_VEHICLE_RANDOM_ROUTE_SEED = 0x18271E90,
        SET_VEHICLE_REACT_TO_EXPLOSION = 0xB755CE11,
        SET_VEHICLE_SIREN = 0x4AC1EFC7,
        SET_VEHICLE_STEER_BIAS = 0x7357C1EB,
        SET_VEHICLE_STRONG = 0xC758D19F,
        SET_VEHICLE_TURNS_TO_FACE_COORD = 0x9F751407,
        SET_VEHICLE_TYRE_BURST = 0x89D28068,
        SET_VEHICLE_TYRE_FIXED = 0xA42EFA6B,
        SET_VEHICLE_TYRES_CAN_BURST = 0xA198DB54,
        SET_VEHICLE_VISIBLE = 0x033C606E,
        SET_VISIBILITY_OF_CLOSEST_OBJECT_OF_TYPE = 0x702FAEEB,
        SET_VOICE_ID_FROM_HEAD_COMPONENT = 0x84EDB1B8,
        SET_WAITING_AT_STATION_TIME = 0x745EA145,
        SET_WAKES_SECTION = 0x75BA1528,
        SET_WANTED_LEVEL_MULTIPLIER = 0x1359292F,
        SET_WEAPON_AMMO = 0x3A3DB7F1,
        SET_WEAPON_AMMO_IN_CLIP = 0xA5F4270F,
        SET_WEAPON_AS_NO_LONGER_NEEDED = 0x9A0E29DE,
        SET_WEAPON_CHANCE_TO_FIRE_BLANKS = 0x40BA5A39,
        SET_WEAPON_LIGHT_DATA = 0x29E99A13,
        SET_WEAPON_LIGHT_DATA_BY_NAME = 0x07F9CE88,
        SET_WEAPON_SLOT = 0x016DBCD1,
        SET_WEAPON_SPAWNS_PICKUP = 0x14645293,
        SET_WEAPON_VISIBLE = 0x529A119E,
        SET_WEATHER_TRANSITION_IMMEDIATE = 0x8DE31F0B,
        SET_WEATHER_TRANSITION_SPEED = 0x17EB71A7,
        SET_WEATHER_TYPE_NOW_PERSIST = 0xC869FE97,
        SET_WEATHER_TYPE_PERSIST = 0xC6C04C75,
        SET_WIDESCREEN_BORDERS = 0x1A75DC9A,
        SET_WIDESCREEN_FORMAT = 0xF016E08F,
        SET_WIND = 0xC6294698,
        SET_XBOX_SCREEN_SAVER = 0xD121D3DE,
        SET_ZONE_COPS_ACTIVE = 0xD604096C,
        SET_ZONE_POPULATION_TYPE = 0xFC30948B,
        SET_ZONE_SCUMMINESS = 0x6E35CF9A,
        SETTIMERA = 0x35785333,
        SETTIMERB = 0x27C1B7C6,
        SETTIMERSYSTEM = 0x12542514,
        SETUP_BULLET_CAMERA_ANIM_SCENE = 0xC527E29F,
        SETUP_BULLET_CAMERA_SCENE = 0x536FD4DA,
        SETUP_HUD_SCOREBOARD = 0xEE11C349,
        SEV_BINDC = 0x4F8EBA7E,
        SEV_CONDITION = 0xBE758B0C,
        SEV_CONNECTED_ONLY = 0x1BC7E9FB,
        SEV_CONSTRUCT_EVENT = 0xA9A14FD3,
        SEV_CREATE_OBJECT = 0x7D9E2B5F,
        SEV_CREATE_PED = 0xF9F0D9BB,
        SEV_CREATE_PICKUP = 0x9DFDA816,
        SEV_CREATE_VEHICLE = 0xD421FF04,
        SEV_CURRENT_EVENT = 0x1D049619,
        SEV_DELETE_OBJECT = 0xBEB0FDDE,
        SEV_GET_MY_PLAYER = 0x43BE716F,
        SEV_GET_PLAYER_FRIENDLY_FIRE = 0x52A421F3,
        SEV_GET_UNIQUE_PLAYER_MODEL_VARIATION = 0xCD0F2DB8,
        SEV_ID_TO_INDEX = 0x374F72FE,
        SEV_INDEX_TO_ID = 0x66169946,
        SEV_INDUCE_EVENT = 0xF7669E49,
        SEV_INDUCE_EVENT_ARGS = 0xF69FEF47,
        SEV_INDUCE_GATHER_EVENT = 0x7FD7CD71,
        SEV_INDUCE_LOCAL_EVENT = 0xF199C3EB,
        SEV_INDUCE_LOCAL_EVENT_ARGS = 0xA2793188,
        SEV_INT_TO_WATCHER = 0x98A92C54,
        SEV_INVALID_EVENT_ID = 0xAE382401,
        SEV_IS_POINT_VISIBLE_TO_POSITION_LIST = 0x7C932981,
        SEV_IS_PRIMARY = 0x2147F5F2,
        SEV_IS_SPHERE_VISIBLE_TO_OTHER_TEAM_PLAYERS = 0x6A1BA8C6,
        SEV_IS_SPHERE_VISIBLE_TO_PLAYER_LIST = 0x48990418,
        SEV_ISOLATE = 0xFC64AA42,
        SEV_ISOLATE_OFF = 0x821594DD,
        SEV_ISOLATED_ONLY = 0xBD5E1E6B,
        SEV_MAP_PLAYER_PED = 0x2E6A11AD,
        SEV_NEXT_EVENT = 0xAFB40502,
        SEV_OBSERVE_FLOAT = 0xB8084395,
        SEV_OBSERVE_INT = 0x55FCE28A,
        SEV_ON_ANY_PED_CREATED = 0x9939785A,
        SEV_ON_ANY_PED_DELETED = 0xE47E14C1,
        SEV_ON_ANY_PED_DIED = 0x087EE778,
        SEV_ON_ANY_PED_JOINED_NETGAME = 0x04C3C6D6,
        SEV_ON_ANY_PED_LEFT_NETGAME = 0xABA66068,
        SEV_ON_ANY_VEHICLE_CREATED = 0x0BFEF843,
        SEV_ON_ANY_VEHICLE_DELETED = 0x8A6CCF05,
        SEV_ON_ANY_VEHICLE_DESTROYED = 0xB841C0D6,
        SEV_ON_HOST_STATS_TABLE_VALID = 0x8B7EA849,
        SEV_ON_HOST_SYNC = 0x3CF8A812,
        SEV_ON_MP_INTERACTION_SUCCEEDED = 0xFAF50A5C,
        SEV_ON_MP_ITEM_PICKUP_ACTION = 0x903D285A,
        SEV_ON_OBJECT_DAMAGED = 0x7F5E8AD6,
        SEV_ON_PED_ASSIST = 0xBD0068C6,
        SEV_ON_PED_CREATED = 0xBD305A46,
        SEV_ON_PED_DELETED = 0xFA377D19,
        SEV_ON_PED_DIED = 0x2C21F110,
        SEV_ON_PED_ENTERED_VEHICLE = 0x93DAACB5,
        SEV_ON_PED_INJURED = 0x2F4FA7AA,
        SEV_ON_PED_LEFT_VEHICLE = 0xA70DCA9C,
        SEV_ON_PED_LMS_ACTIVATED = 0x48AFCC46,
        SEV_ON_PED_LMS_DEACTIVATED = 0x0D198A2D,
        SEV_ON_PED_LOOK_TRIGGER_END = 0x360B2C36,
        SEV_ON_PED_LOOK_TRIGGER_START = 0x91C64482,
        SEV_ON_PED_RANK_UP = 0x7B6F3CA4,
        SEV_ON_PED_TASK_FINISHED = 0xF50C10DC,
        SEV_ON_PED_TASK_STARTED = 0x298AEAB1,
        SEV_ON_PED_TRIGGER_ENTERED = 0x37DF6A31,
        SEV_ON_PED_TRIGGER_LEFT = 0xB18C949F,
        SEV_ON_PED_TRIGGER_LIST_ENTERED = 0xFCEC8FDF,
        SEV_ON_PED_TRIGGER_LIST_LEFT = 0xA80054BD,
        SEV_ON_PED_USE_STREAK = 0x43F36B61,
        SEV_ON_TIMER = 0x02FFAB17,
        SEV_ON_TIN_CAN_COLLISION = 0x9AB7A935,
        SEV_ON_VEHICLE_CREATED = 0xE6097F09,
        SEV_ON_VEHICLE_DAMAGED = 0x98A611A6,
        SEV_ON_VEHICLE_DELETED = 0x1E04C1A2,
        SEV_ON_VEHICLE_DESTROYED = 0xDAF25B5E,
        SEV_ONCE_ONLY = 0x6DA448CC,
        SEV_PLAYER_INDEX_TO_SLOT = 0xD5BDAF17,
        SEV_PLAYER_IS_VALID_SLOT = 0x0D6E3E53,
        SEV_PLAYER_SLOT_TO_INDEX = 0x18E183E8,
        SEV_RESET_UNIQUE_PLAYER_MODEL_VARIATIONS = 0x2772572D,
        SEV_RESURRECT_PLAYER = 0xC0AC4551,
        SEV_RESURRECT_PLAYER_FINISH = 0xD506CEF7,
        SEV_SET_PLAYER_AVATAR = 0x1778B6B6,
        SEV_SET_PLAYER_FRIENDLY_FIRE = 0x1B65C378,
        SEV_SET_PLAYER_MODEL = 0x4BAA35E9,
        SEV_SET_PLAYER_MODEL_DEFAULT_VARIATION = 0x86F9D4FF,
        SEV_THREAD_THIS = 0xD494158C,
        SEV_UNBIND = 0x34AD4192,
        SEV_UNBIND_ALL_FOR_PED = 0x7561DF34,
        SEV_UNBIND_CATEGORY = 0xEA305AC0,
        SEV_UNBIND_HANDLER = 0xAA607425,
        SEV_WAIT_FOR = 0xCD3036F5,
        SEV_WATCHER_TO_INT = 0x11A30848,
        SEV_YIELD = 0x7DE3579B,
        SHAKE_CAM = 0x1D4211B0,
        SHAKE_GAMEPLAY_CAM = 0xF2EFE660,
        SHIFT_LEFT = 0x314CC6CD,
        SHIFT_RIGHT = 0x352633CA,
        SHOOT_SINGLE_BULLET_BETWEEN_COORDS = 0xCB7415AC,
        SHOW_BLIP_ROTATION = 0x17773F15,
        SHUTDOWN_AND_LAUNCH_NETWORK_GAME = 0x691694D2,
        SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME = 0x92B7351C,
        SILENCE_VEHICLE = 0xA7250DE3,
        SIMULATE_PLAYER_INPUT_GAIT = 0x0D77CC34,
        SIN = 0xBF987F58,
        SKIP_FORWARD_TO_TIME_OF_DAY = 0x8B1C8A57,
        SKIP_ROTOR_SHADOW = 0xC96B8836,
        SKIP_TIME_IN_PLAYBACK_RECORDED_PED = 0x699F9D74,
        SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE = 0xCF3EFA4B,
        SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE = 0x8DEA18C8,
        SKIP_TO_NEXT_ALLOWED_STATION = 0xCF682EC7,
        SLIDE_OBJECT = 0x63BFA7A0,
        SMASH_GLASS_IN_RADIUS = 0x71B56B9F,
        SMASH_GLASS_ON_OBJECT = 0x4CB06A9F,
        SMASH_VEHICLE_WINDOW = 0xDDD9A8C2,
        SNAP_PLAYER_TO_COVER_COORDS = 0xEC2D5CFB,
        SNAP_PLAYER_TO_COVERLINE = 0x5A54CE7D,
        SNAP_PLAYER_TO_COVERPOINT = 0x464B1DB1,
        SNAP_PLAYER_TO_COVERPOINT_FROM_UID = 0x4548143F,
        SNAPSHOT_GLOBALS = 0x5A25520E,
        SPAWN_GRENADE = 0x34E8E337,
        SPLIT_LOCALISED_STRING = 0xE6102DD1,
        SQRT = 0x145C7701,
        START_CONTEXT = 0xF1A3B61A,
        START_CONTEXT_HASH = 0x906945AC,
        START_CUTSCENE_CAPTURE = 0x5B705AC1,
        START_CUTSCENE_WITH_FADES = 0x1C21BE91,
        START_FIRING_AMNESTY = 0x5F8A22A6,
        START_NEW_SCRIPT = 0x3F166D0E,
        START_NEW_SCRIPT_TYPED = 0x9EE416E7,
        START_NEW_SCRIPT_TYPED_WITH_ARGS = 0x50A1D455,
        START_NEW_SCRIPT_WITH_ARGS = 0x4A2100E4,
        START_NEW_WIDGET_COMBO = 0x284A3C93,
        START_PANEL_WIPE = 0x45E78975,
        START_PARTICLE_FX_LOOPED_AT_COORD = 0xD348E3E6,
        START_PARTICLE_FX_LOOPED_ON_OBJECT = 0x4B00E9F2,
        START_PARTICLE_FX_LOOPED_ON_OBJECT_BONE = 0x1B34D211,
        START_PARTICLE_FX_LOOPED_ON_PED_BONE = 0xF8FC196F,
        START_PARTICLE_FX_LOOPED_ON_VEHICLE = 0x58AA9FC3,
        START_PARTICLE_FX_NON_LOOPED_AT_COORD = 0xDD79D679,
        START_PARTICLE_FX_NON_LOOPED_AT_COORD_WITH_GROUND_PLANE = 0xD120A4B4,
        START_PARTICLE_FX_NON_LOOPED_AT_COORD_WITH_NEARBY_COLLISION = 0x5EFBDD3E,
        START_PARTICLE_FX_NON_LOOPED_AT_COORD_WITH_OFFSET_GROUND_PLANE = 0xC691A67E,
        START_PARTICLE_FX_NON_LOOPED_ON_OBJECT = 0xF9617406,
        START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE = 0x53DAEF4E,
        START_PARTICLE_FX_NON_LOOPED_ON_VEHICLE = 0x7C714DA3,
        START_PED_FIRE = 0x604950EB,
        START_PED_SEARCH_CRITERIA = 0x12B1686A,
        START_PLAYBACK_RECORDED_PED = 0x436563F4,
        START_PLAYBACK_RECORDED_VEHICLE = 0xCF614CA8,
        START_PLAYBACK_RECORDED_VEHICLE_USING_AI = 0x8DE8E24E,
        START_PLAYER_SHOOTDODGE = 0x96BB9783,
        START_POSTFX_BLENDER = 0x817C43D7,
        START_RECORDING_PED = 0x7AE7B65B,
        START_RECORDING_VEHICLE = 0x50117078,
        START_RECORDING_VEHICLE_TRANSITION_FROM_PLAYBACK = 0x1BDB2B3C,
        START_SCRIPT_CONVERSATION = 0xE5DE7D9D,
        START_SCRIPT_FIRE = 0xE7529357,
        START_SCRIPTED_CONVERSATION = 0x07E4CB1E,
        START_SEAMLESS_CUTSCENE = 0x243A852E,
        START_SEAMLESS_CUTSCENE_AT_COORDS = 0x08FE348F,
        START_VEHICLE_ALARM = 0x5B451FF7,
        START_VEHICLE_HORN = 0x0DF5ADB3,
        START_WIDGET_GROUP = 0xA782BE62,
        STAT_ADD_FLOAT = 0xA54780E8,
        STAT_ADD_INT = 0x528AA36E,
        STAT_DECREMENT_FLOAT = 0xEEB7CFAD,
        STAT_DECREMENT_INT = 0x5C7AA25B,
        STAT_EXISTS = 0x3076C37C,
        STAT_GET_FLOAT = 0xFCBDA612,
        STAT_GET_INT = 0x1C6FE43E,
        STAT_HASH_ADD_FLOAT = 0xB5B89FD2,
        STAT_HASH_ADD_INT = 0xA820FB24,
        STAT_HASH_DECREMENT_FLOAT = 0xBA1661EC,
        STAT_HASH_DECREMENT_INT = 0x04FBDB9F,
        STAT_HASH_EXISTS = 0x2146FEC9,
        STAT_HASH_GET_FLOAT = 0xE143F19A,
        STAT_HASH_GET_INT = 0xEC6F7181,
        STAT_HASH_INCREMENT_FLOAT = 0x9130A032,
        STAT_HASH_INCREMENT_INT = 0xD2B83ECE,
        STAT_HASH_SET_FLOAT = 0xF7291D39,
        STAT_HASH_SET_INT = 0x2D2ECF2D,
        STAT_HASH_WAIT_FOR_CHANGE_FLOAT = 0xEA2D7D0D,
        STAT_HASH_WAIT_FOR_CHANGE_INT = 0x59D78FCB,
        STAT_INCREMENT_FLOAT = 0x562B69E2,
        STAT_INCREMENT_INT = 0x4470A2D3,
        STAT_SET_FLOAT = 0x6CEA96F2,
        STAT_SET_INT = 0xC9CC1C5C,
        STAT_WAIT_FOR_CHANGE_FLOAT = 0x48E0F996,
        STAT_WAIT_FOR_CHANGE_INT = 0x04E41F40,
        STOP_ALL_IMAGEFX = 0xB7BC77AB,
        STOP_ALL_SCRIPTED_CONVERSATIONS = 0xCBE79A01,
        STOP_ANY_PED_MODEL_BEING_SUPPRESSED = 0x5AD7DC55,
        STOP_CAM_POINTING = 0x5435F6A5,
        STOP_CAM_SHAKING = 0x40D0EB87,
        STOP_CURRENT_PLAYING_AMBIENT_SPEECH = 0xBB8E64BF,
        STOP_CUTSCENE_AUDIO = 0x55461BE6,
        STOP_CUTSCENE_CAPTURE = 0x5BCC78E8,
        STOP_FIRE_IN_RANGE = 0x725C7205,
        STOP_GAMEPLAY_CAM_SHAKING = 0xFD569E4E,
        STOP_GAMEPLAY_HINT = 0x1BC28B7B,
        STOP_IMAGEFX = 0xB27BC9FD,
        STOP_MOVIE = 0x7827E516,
        STOP_MUSIC = 0x84A658A1,
        STOP_OVERRIDING_PED_FIRING_PATTERN = 0x954F6D21,
        STOP_PARTICLE_FX_LOOPED = 0xD245455B,
        STOP_PED_DOING_FALL_OFF_TESTS_WHEN_SHOT = 0x5B01902A,
        STOP_PED_FIRE = 0xABE73926,
        STOP_PED_SEARCH_CRITERIA = 0xE9AFE4DE,
        STOP_PED_SPEAKING = 0xFF92B49D,
        STOP_PED_WEAPON_FIRING_WHEN_DROPPED = 0x4AC3421E,
        STOP_PLAYBACK_RECORDED_PED = 0xD7358C69,
        STOP_PLAYBACK_RECORDED_VEHICLE = 0xAE99C57C,
        STOP_RECORDING_ALL_VEHICLES = 0x9A9A3735,
        STOP_RECORDING_PED = 0xEA90369A,
        STOP_RECORDING_PEDS = 0x0DFEB5BF,
        STOP_RECORDING_VEHICLE = 0x3ED10195,
        STOP_SCRIPT_STREAM = 0xD6CA123C,
        STOP_SCRIPTED_CONVERSATION = 0xAB77DA7D,
        STOP_SOUND = 0xCD7F4030,
        STOP_VEHICLE_FIRE = 0xCEC13B6B,
        STOP_WIDGET_COMBO = 0x4159C9A0,
        STOP_WIDGET_GROUP = 0xB7E25D55,
        STORE_FRONTEND_TIMECYCLE_SETTINGS = 0x9BDAB003,
        STREAM_HELPERS_DEACTIVATE = 0xBDA5C5F7,
        STREAM_HELPERS_INIT = 0x13D43922,
        STREAM_HELPERS_REACTIVATE = 0xE2E89E47,
        STREAM_HELPERS_REQUEST_AT_LOC = 0x7C544BF3,
        STRING_STORE = 0xC1389FB0,
        STRING_TO_INT = 0x590A8160,
        SWAP_NEAREST_BUILDING_MODEL = 0xFBD8341B,
        SWITCH_TO_LEVEL = 0xFA085695,
        SWITCH_TO_LEVEL_NAME = 0xB0F99718,
        SYNC_FRAGMENT_OBJECTS = 0x521555E5,
        SYNC_FRAGMENT_OBJECTS_IN_IPL = 0xCD06F35C,
        SYNCH_RECORDING_WITH_WATER = 0x74537488,
        TAN = 0xD320CE5E,
        TASK_ACHIEVE_HEADING = 0x0A0E9B42,
        TASK_AIM_GUN_AT_COORD = 0xFBF44AD3,
        TASK_AIM_GUN_AT_PED = 0x3B4CA777,
        TASK_AIM_GUN_AT_VEHICLE = 0x217E69A2,
        TASK_ATTACK_MOVE = 0x72EA9C48,
        TASK_ATTACK_MOVE_WHILE_AIMING_AT_COORD = 0xA08CC22F,
        TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED = 0x1AD378CB,
        TASK_CAUTIOUS_ADVANCE = 0xC559BB30,
        TASK_CAUTIOUS_MOVETO = 0x77B12033,
        TASK_CHAT_TO_PED = 0xA2BE1821,
        TASK_CHAT_WITH_PED = 0xBECAED75,
        TASK_CLEAR_DEFAULT_AIM = 0x009F9B15,
        TASK_CLEAR_LOOK_AT = 0x60EB4054,
        TASK_COMBAT_HATED_TARGETS_AROUND_PED = 0x2E7064E4,
        TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED = 0xF127AD6A,
        TASK_COMBAT_HATED_TARGETS_IN_AREA = 0xDF099E18,
        TASK_COMBAT_MOVE_TO_COVER = 0x98F7B4E3,
        TASK_COMBAT_MOVE_TO_COVER_COORDS = 0xC219CD65,
        TASK_COMBAT_MOVE_TO_COVER_TACTICAL = 0xB54F8633,
        TASK_COMBAT_MOVE_TO_COVER_TACTICAL_COORDS = 0xA538B46E,
        TASK_COMBAT_PED = 0xCB0D8932,
        TASK_COMBAT_PED_TIMED = 0xF5CA2A45,
        TASK_COMBAT_ROLL = 0x8BB401CE,
        TASK_COMBAT_SNAP_TO_COVER = 0x62DA169D,
        TASK_COMBAT_SNAP_TO_COVER_AMBUSH = 0xB42E30A0,
        TASK_COMBAT_SNAP_TO_COVER_AMBUSH_COORDS = 0xC047B95C,
        TASK_COMBAT_SNAP_TO_COVER_COORDS = 0x7342B8FD,
        TASK_COMBAT_SNAP_TO_COVER_TACTICAL = 0x60C0C2F7,
        TASK_COMBAT_SNAP_TO_COVER_TACTICAL_COORDS = 0x9BB448D7,
        TASK_COWER = 0x9CF1C19B,
        TASK_DEFAULT_AIM_AHEAD = 0x5748EDC0,
        TASK_DEFAULT_AIM_AT_COORD = 0x24190EC9,
        TASK_DEFAULT_AIM_AT_PED = 0x806DCEC3,
        TASK_DODGE = 0xE1931B3A,
        TASK_DRIVE_BY = 0x2B84D1C4,
        TASK_DRIVE_POINT_ROUTE = 0x4A2F3753,
        TASK_DRIVE_POINT_ROUTE_ADVANCED = 0x5BE99735,
        TASK_DRIVER_COMBAT = 0xAB123B77,
        TASK_DROP_WEAPON = 0xBCC51D2B,
        TASK_DUCK = 0x396A40E9,
        TASK_ENTER_VEHICLE = 0xB8689B4E,
        TASK_EVERYONE_LEAVE_VEHICLE = 0xC1971F30,
        TASK_EXTEND_ROUTE = 0x43271F69,
        TASK_FLUSH_ROUTE = 0x34219154,
        TASK_FOLLOW_NAV_MESH_TO_COORD = 0xFE4A10D9,
        TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED = 0x6BF6E296,
        TASK_FOLLOW_PATROL_ROUTE = 0xADDF1C66,
        TASK_FOLLOW_POINT_ROUTE = 0xB837C816,
        TASK_FOLLOW_TO_OFFSET_OF_PED = 0x8F10A775,
        TASK_GET_OFF_BOAT = 0x4293601F,
        TASK_GET_OFF_CUSTOM_BOAT = 0x9A082E32,
        TASK_GET_ON_CUSTOM_BOAT = 0x39E721B7,
        TASK_GET_ON_CUSTOM_VEHICLE = 0x87354C85,
        TASK_GO_STRAIGHT_TO_COORD = 0x80A9E7A7,
        TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_VEHICLE = 0x5BE44EF2,
        TASK_GO_TO_COORD_ANY_MEANS = 0xF91DF93B,
        TASK_GO_TO_COORD_DPV = 0x0B374EC5,
        TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD = 0x1552DC91,
        TASK_GO_TO_COORD_WHILE_AIMING_AT_OBJECT = 0xEA0E01E5,
        TASK_GO_TO_COORD_WHILE_AIMING_AT_PED = 0x19E32C2E,
        TASK_GO_TO_COORD_WHILE_AIMING_AT_VEHICLE = 0x56B67746,
        TASK_GO_TO_COORD_WHILE_SHOOTING = 0x424FED42,
        TASK_GO_TO_OBJECT = 0x01BACD08,
        TASK_GO_TO_PED = 0xC2F0E987,
        TASK_GO_TO_PED_WHILE_AIMING_AT_COORD = 0x4DF287BB,
        TASK_GO_TO_PED_WHILE_AIMING_AT_OBJECT = 0x1A817446,
        TASK_GO_TO_PED_WHILE_AIMING_AT_PED = 0x7068FC67,
        TASK_GO_TO_PED_WHILE_AIMING_AT_VEHICLE = 0x572F5FDF,
        TASK_GOTO_PED_AIMING = 0x676649DA,
        TASK_GOTO_PED_OFFSET = 0x92B6581E,
        TASK_GOTO_VEHICLE = 0x08DE489D,
        TASK_GUARD_ANGLED_DEFENSIVE_AREA = 0xD2062CA9,
        TASK_GUARD_ASSIGNED_DEFENSIVE_AREA = 0x7AF0133D,
        TASK_GUARD_CURRENT_POSITION = 0x2FB099E9,
        TASK_GUARD_SPHERE_DEFENSIVE_AREA = 0x86B76CB7,
        TASK_HANDS_UP = 0x8DCC19C5,
        TASK_HANG_GLIDER = 0xA0A33F8A,
        TASK_HELI_MISSION = 0x0C143E97,
        TASK_JUMP = 0x0356E3CE,
        TASK_JUMP_FORWARD = 0x3F5D4488,
        TASK_LEAVE_ANY_VEHICLE = 0xDBDD79FA,
        TASK_LEAVE_VEHICLE = 0x7B1141C6,
        TASK_LEAVE_VEHICLE_AND_FLEE = 0x8626D6F8,
        TASK_LEAVE_VEHICLE_DONT_CLOSE_DOOR = 0xF13827AD,
        TASK_LEAVE_VEHICLE_IMMEDIATELY = 0x59CC2ED0,
        TASK_LEAVE_VEHICLE_IN_DIRECTION = 0x4D7BF56D,
        TASK_LOOK_AT_COORD = 0x7B784DD8,
        TASK_LOOK_AT_OBJECT = 0x44C5D95B,
        TASK_LOOK_AT_PED = 0x930AE844,
        TASK_LOOK_AT_VEHICLE = 0x45651376,
        TASK_MELEE_GRAPPLE = 0x51B6927F,
        TASK_MELEE_LITE = 0x91BAB133,
        TASK_MOBILE_CONVERSATION = 0x060DA456,
        TASK_NAVIGATE_THROUGH_TRAM_CARS = 0x2E63F94A,
        TASK_OPEN_VEHICLE_DOOR = 0x8EE06BF4,
        TASK_PATROL = 0xB92E5AF6,
        TASK_PAUSE = 0x17A64668,
        TASK_PED_SLIDE_TO_COORD = 0x225380EF,
        TASK_PED_SLIDE_TO_COORD_AND_PLAY_ANIM = 0x94BBE5C4,
        TASK_PED_SLIDE_TO_COORD_AND_PLAY_ANIM_HDG_RATE = 0x95ABC676,
        TASK_PED_SLIDE_TO_COORD_HDG_RATE = 0x38A995C1,
        TASK_PERFORM_SEQUENCE = 0x4D9FBD11,
        TASK_PERFORM_SEQUENCE_FROM_PROGRESS = 0xFA60601B,
        TASK_PERFORM_SEQUENCE_LOCALLY = 0x974D3D66,
        TASK_PICKUP_AND_CARRY_OBJECT = 0x6C47A7D6,
        TASK_PLAY_ANIM = 0x5AB552C6,
        TASK_REACT_INITIAL = 0x43A09C27,
        TASK_SEARCH_FOR_PED_AT_COVER_POINT = 0x72C2B487,
        TASK_SEARCH_FOR_UNSEEN_ENEMY = 0x5246FFFA,
        TASK_SELECT_WEAPON_TO_HAND = 0xEF4D8FD9,
        TASK_SET_ACTION_INTENTION = 0x2E56473E,
        TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS = 0x1B54FB6B,
        TASK_SET_BLOCKING_OF_PED_TARGETTING = 0xC8CC8A7E,
        TASK_SET_PED_DECISION_MAKER = 0xB6C665A7,
        TASK_SET_PLAYER_CONTROL = 0x834490D1,
        TASK_SHOOT_AT_COORD = 0x601C22E3,
        TASK_SHOOT_AT_PED = 0xE878CC20,
        TASK_SHOOT_AT_VEHICLE = 0x009D5555,
        TASK_SHOOTDODGE = 0x1DBC90B4,
        TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT = 0xBEAF8F67,
        TASK_SIT_DOWN = 0xB40FC847,
        TASK_SIT_DOWN_INSTANTLY = 0xCAC2792F,
        TASK_SIT_DOWN_ON_NEAREST_OBJECT = 0xA287D0BD,
        TASK_SIT_DOWN_ON_OBJECT = 0x595E56B4,
        TASK_SIT_DOWN_ON_SEAT = 0xB457570A,
        TASK_SMART_FLEE_COORD = 0xB2E686FC,
        TASK_SMART_FLEE_PED = 0xE52EB560,
        TASK_SMART_FOLLOW_PED = 0x22CFC4BD,
        TASK_STAND_GUARD = 0xD130F636,
        TASK_STAND_STILL = 0x6F80965D,
        TASK_START_SCENARIO_AT_POSITION = 0xAA2C4AC2,
        TASK_START_SCENARIO_IN_PLACE = 0xE50D6DDE,
        TASK_STATIONARY_STRAFE_ATTACK = 0xAC987362,
        TASK_SURRENDER = 0xC5FA9CD6,
        TASK_SWAP_WEAPON = 0xDAF4F8FC,
        TASK_TOGGLE_DUCK = 0x61CFBCBF,
        TASK_TURN_PED_TO_FACE_COORD = 0x30463D73,
        TASK_TURN_PED_TO_FACE_PED = 0xDE13490F,
        TASK_USE_DPV = 0x518F8CF2,
        TASK_USE_MOBILE_PHONE = 0x225A38C8,
        TASK_USE_MOBILE_PHONE_TIMED = 0xC99C19F5,
        TASK_USE_NEAREST_MOUNTED_WEAPON = 0xB9F6EB6C,
        TASK_USE_NEAREST_SCENARIO_TO_COORD = 0x9C50FBF0,
        TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP = 0x1BE9D65C,
        TASK_USE_WALKIE_TALKIE = 0x3868BDE6,
        TASK_VEHICLE_DRIVE_TO_COORD = 0xE4AC0387,
        TASK_VEHICLE_DRIVE_TO_COORD_RUBBER_BAND = 0x72960B42,
        TASK_VEHICLE_DRIVE_WANDER = 0x36EC0EB0,
        TASK_VEHICLE_MISSION = 0x20609E56,
        TASK_VEHICLE_MISSION_COORS_TARGET = 0x6719C109,
        TASK_VEHICLE_MISSION_PED_TARGET = 0xC81C4677,
        TASK_VEHICLE_SHOOT_AT_COORD = 0xA7AAA4D6,
        TASK_VEHICLE_SHOOT_AT_PED = 0x59677BA0,
        TASK_VEHICLE_TEMP_ACTION = 0x0679DFB8,
        TASK_WANDER_STANDARD = 0xAF59151A,
        TASK_WARP_PED_INTO_VEHICLE = 0x65D4A35D,
        TASK_WEAPON_ROLL = 0x123B2716,
        TEMPORARILY_DISABLE_PED_SELF_COLLISION = 0x212533EF,
        TERMINATE_ALL_SCRIPTS_FOR_NETWORK_GAME = 0x51C902BD,
        TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME = 0x9F861FD4,
        TERMINATE_GAME_BULLET_CAMERA = 0xEE7F2F5D,
        TERMINATE_THIS_THREAD = 0x3CD9CBB7,
        TERMINATE_THREAD = 0x253FD520,
        THROW_MOLOTOV = 0x86770AD0,
        TIME_SINCE_LAST_MONOLOGUE = 0x4B91ACE8,
        TIMERA = 0x45C8C188,
        TIMERB = 0x330A9C0C,
        TIMERSYSTEM = 0x845A1774,
        TIMESTEP = 0x50597EE2,
        TIMESTEPUNWARPED = 0x99B02B53,
        TO_FLOAT = 0x67116627,
        TOGGLE_DISPLAY_AMMO = 0x08807D97,
        TOGGLE_NM_BINDPOSE_TASK = 0x8F0F700B,
        TOGGLE_PICKUP_ATTACHMENT = 0xDB0A1DF3,
        TOGGLE_SECONDARY_LIFE_BAR = 0x5BD64BF5,
        TOGGLE_SECONDARY_LIFE_BAR_FLASH = 0xE081A44C,
        TOGGLE_TRACER = 0xA4D5C061,
        TOGGLE_WEAPON_ATTACHMENT = 0xCDA89AA8,
        TRANSFER_PED_BLOOD_HANDLE = 0x1E3CF6F7,
        TRIGGER_EXPLOSION_AUDIO_FROM_COORDS = 0x02C7F4F0,
        TRIGGER_EXPLOSION_AUDIO_FROM_OBJECT = 0xD4807989,
        TRIGGER_EXPLOSION_AUDIO_FROM_PED = 0x7A936A56,
        TRIGGER_EXPLOSION_AUDIO_MIX_LAYER = 0xDA1CBE98,
        TRIGGER_LIGHTNING = 0xB53EE377,
        TRIGGER_PED_PORTAL_RESCAN = 0xE1531B10,
        TRIGGER_THUNDER = 0x57360FB9,
        UI_ADD_MP_HITMARK = 0xDA1F284A,
        UI_CLEAR_TOOLTIP = 0xB6CA18C1,
        UI_DOES_FRAME_EXIST_HASH = 0x32852FD0,
        UI_DOES_FRAME_EXIST_NAME = 0x279B59AB,
        UI_IS_QTE_MINIGAME_FAILURE = 0xEFEEDC60,
        UI_IS_QTE_MINIGAME_FINISHED = 0xC55DA3BB,
        UI_IS_QTE_MINIGAME_IN_WINDOW = 0xD6D05C65,
        UI_IS_QTE_MINIGAME_SUCCESS = 0xF664AEA4,
        UI_IS_TOOLTIP_SHOWING = 0x71C43A04,
        UI_LOAD_AFTER_ACTION_REPORT = 0x2399616B,
        UI_LOAD_MINIMAP_TXD = 0xBA0CC379,
        UI_REMOVE_MP_HITMARKS = 0x04155A12,
        UI_SHOW_TOOLTIP = 0x6A99EF9C,
        UI_START_QTE_MINIGAME = 0x0A6F90D0,
        UI_STOP_QTE_MINIGAME = 0x478F8D91,
        UNBIND_SCRIPT_DATABASE = 0xC6F9A3CD,
        UNLOCK = 0x98BAB591,
        UNMUTE_EXPLOSIONS = 0x72A9758E,
        UNPAUSE_PLAYBACK_RECORDED_PED = 0x57988394,
        UNPAUSE_PLAYBACK_RECORDED_VEHICLE = 0x59060F75,
        UNPIN_ROPE_VERTEX = 0xB30B552F,
        UPDATE_ARCADE_CHECK_POINT = 0x131CE7C6,
        UPDATE_SPECIAL_FX_MODIFIER_STRENGTH = 0x3D538351,
        USE_ANIMATED_LAST_MAN_STANDING = 0x3345BB01,
        USE_DEFAULT_WATER_SETTINGS = 0x48C6519C,
        VDIST = 0x3C08ECB7,
        VDIST2 = 0xC85DEF1F,
        VECTOR_ROTATE_AXIS = 0x649E57A6,
        VMAG = 0x1FCF1ECD,
        VMAG2 = 0xE796E629,
        WAIT = 0x7715C03B,
        WAITUNPAUSED = 0x7C496803,
        WAITUNWARPED = 0x01185F9B,
        WAKE_RESTING_OBJECTS_AROUND = 0x14EF5CEE,
        WAS_CUTSCENE_SKIPPED = 0xC9B6949D,
        WAS_SINGLE_PLAYER_TITLE_SCREEN_ENTERED = 0x3912FB64,
        WASH_PROJTEX_FROM_VEHICLE = 0x090EF385,
    };

public:
    static inline auto Absf(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ABSF), float>(value); }
    static inline auto Absi(int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ABSI), int>(value); }
    static inline auto Acos(float x) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ACOS), float>(x); }
    static inline auto ActionTreeForceUnload(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ACTION_TREE_FORCE_UNLOAD), BOOL>(name); }
    static inline auto ActionTreeLoad(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ACTION_TREE_LOAD), BOOL>(name); }
    static inline auto ActionTreeUnload(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ACTION_TREE_UNLOAD), BOOL>(name); }
    static inline auto ActivateBulletTime(BOOL a0, float a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ACTIVATE_BULLET_TIME), void>(a0, a1, a2); }
    static inline auto ActivateBulletTimeAsPlayer() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ACTIVATE_BULLET_TIME_AS_PLAYER), Any>(); }
    static inline auto ActivateDetonator(Ped ped, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ACTIVATE_DETONATOR), void>(ped, a1); }
    static inline auto ActivateLoadoutScreen() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ACTIVATE_LOADOUT_SCREEN), Any>(); }
    static inline auto AddAdrenaline(float amount, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_ADRENALINE), void>(amount, a1); }
    static inline auto AddAmmoToPed(Ped ped, Hash weaponHash, int ammo, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_AMMO_TO_PED), void>(ped, weaponHash, ammo, a3); }
    static inline auto AddArmourToPed(Ped ped, int armour) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_ARMOUR_TO_PED), void>(ped, armour); }
    static inline auto AddBlipForContact(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_BLIP_FOR_CONTACT), Blip>(x, y, z); }
    static inline auto AddBlipForCoord(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_BLIP_FOR_COORD), Blip>(x, y, z); }
    static inline auto AddBlipForGangTerritory(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_BLIP_FOR_GANG_TERRITORY), Blip>(x, y, z); }
    static inline auto AddBlipForObject(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_BLIP_FOR_OBJECT), Blip>(object); }
    static inline auto AddBlipForPed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_BLIP_FOR_PED), Blip>(ped); }
    static inline auto AddBlipForPickup(Pickup pickup) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_BLIP_FOR_PICKUP), Blip>(pickup); }
    static inline auto AddBlipForVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_BLIP_FOR_VEHICLE), Blip>(vehicle); }
    static inline auto AddBloodPool(float x, float y, float z, float a3, float a4, float a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_BLOOD_POOL), void>(x, y, z, a3, a4, a5); }
    static inline auto AddBulletCamText(const char* text, float a1, float a2, int a3, int a4, float a5, float a6, int a7, int a8, int a9, float a10, float a11, float a12, float a13) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_BULLET_CAM_TEXT), void>(text, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); }
    static inline auto AddCamSplineNode(Cam cam, float x, float y, float z, float xRot, float yRot, float zRot, int length) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_CAM_SPLINE_NODE), void>(cam, x, y, z, xRot, yRot, zRot, length); }
    static inline auto AddCoverBlockingArea() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_COVER_BLOCKING_AREA), Any>(); }
    static inline auto AddExplosion(float x, float y, float z, int explosionType, float damageScale, BOOL isAudible, BOOL isInvisible, float unk) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_EXPLOSION), void>(x, y, z, explosionType, damageScale, isAudible, isInvisible, unk); }
    static inline auto AddExplosionWithCause(Player player, float x, float y, float z, int explosionType, float damageScale, BOOL isAudible, BOOL isInvisible, float a8, BOOL a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_EXPLOSION_WITH_CAUSE), void>(player, x, y, z, explosionType, damageScale, isAudible, isInvisible, a8, a9); }
    static inline auto AddFollowNavmeshToPhoneTask(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_FOLLOW_NAVMESH_TO_PHONE_TASK), void>(ped, x, y, z); }
    static inline auto AddGroundPlaneCollisionToParticleFx(ScrHandle ptfxHandle, float a1, float a2, float a3, float a4, float a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_GROUND_PLANE_COLLISION_TO_PARTICLE_FX), void>(ptfxHandle, a1, a2, a3, a4, a5); }
    static inline auto AddGroupToNetworkRestartNodeGroupList(int group) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_GROUP_TO_NETWORK_RESTART_NODE_GROUP_LIST), void>(group); }
    static inline auto AddKillxpRule() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_KILLXP_RULE), Any>(); }
    static inline auto AddKillxpRuleAnykiller(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_KILLXP_RULE_ANYKILLER), void>(a0, a1); }
    static inline auto AddKillxpRuleAnyvictim(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_KILLXP_RULE_ANYVICTIM), void>(a0, a1); }
    static inline auto AddLineToConversation(int index, int a1, const char* a2, const char* a3, int a4, int a5, int a6, BOOL a7, BOOL a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_LINE_TO_CONVERSATION), void>(index, a1, a2, a3, a4, a5, a6, a7, a8); }
    static inline auto AddMultiplayerMessage(const char* message, BOOL belowTimer) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_MULTIPLAYER_MESSAGE), void>(message, belowTimer); }
    static inline auto AddNearbyCollisionToParticleFx(ScrHandle ptfxHandle, float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_NEARBY_COLLISION_TO_PARTICLE_FX), void>(ptfxHandle, x, y, z, radius); }
    static inline auto AddNextMessageToPreviousBriefs(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS), void>(toggle); }
    static inline auto AddObjectToExplosionOcclusionTests(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_OBJECT_TO_EXPLOSION_OCCLUSION_TESTS), void>(object, toggle); }
    static inline auto AddObjectToInteriorRoomByKey(Object object, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_OBJECT_TO_INTERIOR_ROOM_BY_KEY), void>(object, a1, a2); }
    static inline auto AddObjectToInteriorRoomByName(Object object, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME), void>(object, name); }
    static inline auto AddPatrolRouteLink(int a0, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_PATROL_ROUTE_LINK), void>(a0, a1); }
    static inline auto AddPatrolRouteNode(int a0, const char* a1, float x1, float y1, float z1, float x2, float y2, float z2, int a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_PATROL_ROUTE_NODE), void>(a0, a1, x1, y1, z1, x2, y2, z2, a8); }
    static inline auto AddPaynekiller(int amount) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_PAYNEKILLER), void>(amount); }
    static inline auto AddPedClone(Ped ped, float x, float y, float z, float heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_PED_CLONE), void>(ped, x, y, z, heading); }
    static inline auto AddPedDecisionMakerEventResponse() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_PED_DECISION_MAKER_EVENT_RESPONSE), Any>(); }
    static inline auto AddPedIgnoreCoverEntry() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_PED_IGNORE_COVER_ENTRY), Any>(); }
    static inline auto AddPedToConversation(int index, int speakerConversationIndex, Ped ped, const char* a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_PED_TO_CONVERSATION), void>(index, speakerConversationIndex, ped, a3); }
    static inline auto AddPedToConversationEnum(int index, int speakerConversationIndex, Ped ped, Hash a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_PED_TO_CONVERSATION_ENUM), void>(index, speakerConversationIndex, ped, a3); }
    static inline auto AddPedToMissionDeletionList(Ped ped, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_PED_TO_MISSION_DELETION_LIST), void>(ped, a1); }
    static inline auto AddPedUseCoverEntry(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_PED_USE_COVER_ENTRY), void>(a0, a1); }
    static inline auto AddPlacementToInteriorRoomByName(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_PLACEMENT_TO_INTERIOR_ROOM_BY_NAME), void>(a0, a1); }
    static inline auto AddPlayerScore(Player player, int amount) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_PLAYER_SCORE), void>(player, amount); }
    static inline auto AddRope(Vector3* coords, Vector3* rot, float length, int ropeType) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_ROPE), Rope>(coords, rot, length, ropeType); }
    static inline auto AddScenarioBlockingArea(float x1, float y1, float z1, float x2, float y2, float z2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_SCENARIO_BLOCKING_AREA), void>(x1, y1, z1, x2, y2, z2); }
    static inline auto AddScriptToObject(const char* scriptName, Hash modelHash, int a2, float a3, BOOL a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_SCRIPT_TO_OBJECT), void>(scriptName, modelHash, a2, a3, a4); }
    static inline auto AddScriptToRandomPed(const char* scriptName, Hash modelHash, int a2, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_SCRIPT_TO_RANDOM_PED), void>(scriptName, modelHash, a2, a3); }
    static inline auto AddScriptTunableBool(const char* context, const char* name, BOOL value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_SCRIPT_TUNABLE_BOOL), BOOL>(context, name, value); }
    static inline auto AddScriptTunableCrcBool(Hash tunableHash, BOOL value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_SCRIPT_TUNABLE_CRC_BOOL), BOOL>(tunableHash, value); }
    static inline auto AddScriptTunableCrcFloat(Hash tunableHash, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_SCRIPT_TUNABLE_CRC_FLOAT), BOOL>(tunableHash, value); }
    static inline auto AddScriptTunableCrcInt(Hash tunableHash, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_SCRIPT_TUNABLE_CRC_INT), BOOL>(tunableHash, value); }
    static inline auto AddScriptTunableFloat(const char* context, const char* name, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_SCRIPT_TUNABLE_FLOAT), BOOL>(context, name, value); }
    static inline auto AddScriptTunableInt(const char* context, const char* name, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_SCRIPT_TUNABLE_INT), BOOL>(context, name, value); }
    static inline auto AddScriptedWeaponModifier(Ped ped, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_SCRIPTED_WEAPON_MODIFIER), void>(ped, a1); }
    static inline auto AddSpatialdataCoverPoint(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_SPATIALDATA_COVER_POINT), Any>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto AddSpawnBlockingArea(float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_SPAWN_BLOCKING_AREA), void>(x, y, z, radius); }
    static inline auto AddSpecialFxModifier(const char* name, float a1, float a2, float a3, float a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_SPECIAL_FX_MODIFIER), void>(name, a1, a2, a3, a4); }
    static inline auto AddStringToNewsScrollbar(const char* str) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_STRING_TO_NEWS_SCROLLBAR), void>(str); }
    static inline auto AddTextWidget(const char* a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_TEXT_WIDGET), int>(a0); }
    static inline auto AddTickerMessage(Any* data) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_TICKER_MESSAGE), void>(data); }
    static inline auto AddToPreviousBrief() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_TO_PREVIOUS_BRIEF), Any>(); }
    static inline auto AddToPreviousBriefWithUnderscore() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_TO_PREVIOUS_BRIEF_WITH_UNDERSCORE), Any>(); }
    static inline auto AddToWidgetCombo(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_TO_WIDGET_COMBO), void>(a0); }
    static inline auto AddVehicleStuckCheck(Vehicle vehicle, float a1, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_VEHICLE_STUCK_CHECK), void>(vehicle, a1, a2); }
    static inline auto AddVehicleStuckCheckWithWarp(Vehicle vehicle, float a1, int a2, BOOL a3, BOOL a4, BOOL a5, int a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_VEHICLE_STUCK_CHECK_WITH_WARP), void>(vehicle, a1, a2, a3, a4, a5, a6); }
    static inline auto AddVehicleSubtaskAttackCoord() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_VEHICLE_SUBTASK_ATTACK_COORD), Any>(); }
    static inline auto AddVehicleSubtaskAttackPed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_VEHICLE_SUBTASK_ATTACK_PED), Any>(); }
    static inline auto AddVehicleSubtaskStrafeCoords() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_VEHICLE_SUBTASK_STRAFE_COORDS), Any>(); }
    static inline auto AddVehicleToMissionDeletionList(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_VEHICLE_TO_MISSION_DELETION_LIST), void>(vehicle); }
    static inline auto AddVehicleUpsidedownCheck(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_VEHICLE_UPSIDEDOWN_CHECK), void>(vehicle); }
    static inline auto AddWidgetBool(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_WIDGET_BOOL), Any>(a0, a1); }
    static inline auto AddWidgetFloatReadOnly(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_WIDGET_FLOAT_READ_ONLY), Any>(a0, a1); }
    static inline auto AddWidgetFloatSlider(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_WIDGET_FLOAT_SLIDER), Any>(a0, a1, a2, a3, a4); }
    static inline auto AddWidgetIntReadOnly(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_WIDGET_INT_READ_ONLY), Any>(a0, a1); }
    static inline auto AddWidgetIntSlider(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_WIDGET_INT_SLIDER), Any>(a0, a1, a2, a3, a4); }
    static inline auto AddWidgetString(const char* string) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_WIDGET_STRING), void>(string); }
    static inline auto AddWindThermal() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADD_WIND_THERMAL), Any>(); }
    static inline auto AdjustAmmoAttempts() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADJUST_AMMO_ATTEMPTS), void>(); }
    static inline auto AdjustPainKillersAttempts() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADJUST_PAIN_KILLERS_ATTEMPTS), void>(); }
    static inline auto AdjustTimecycleModifierOverride(float a0, float a1, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ADJUST_TIMECYCLE_MODIFIER_OVERRIDE), void>(a0, a1, a2); }
    static inline auto AllocateVehicleInstLightTuneData(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ALLOCATE_VEHICLE_INST_LIGHT_TUNE_DATA), void>(vehicle); }
    static inline auto AllowBulletCameraCheat(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ALLOW_BULLET_CAMERA_CHEAT), void>(toggle); }
    static inline auto AllowBulletCameraSlowdown(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ALLOW_BULLET_CAMERA_SLOWDOWN), void>(toggle); }
    static inline auto AllowBulletCameraToGameplay(BOOL a0, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ALLOW_BULLET_CAMERA_TO_GAMEPLAY), void>(a0, a1); }
    static inline auto AllowBulletCameraTutorialMsg(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ALLOW_BULLET_CAMERA_TUTORIAL_MSG), void>(toggle); }
    static inline auto ApplyDamageToPed(Ped ped, int damageAmount, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::APPLY_DAMAGE_TO_PED), void>(ped, damageAmount, a2); }
    static inline auto ApplyDamageToPedBodyPart(Ped ped, int bodyPartId, int amount) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::APPLY_DAMAGE_TO_PED_BODY_PART), void>(ped, bodyPartId, amount); }
    static inline auto ApplyDamageToPedWithHash(Ped ped, int damageAmount, Hash damageTypeHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::APPLY_DAMAGE_TO_PED_WITH_HASH), void>(ped, damageAmount, damageTypeHash); }
    static inline auto ApplyForceToObject(Object object, int forceType, float forceX, float forceY, float forceZ, float offX, float offY, float offZ, int bone, BOOL isDirectionRel, BOOL ignoreUpVec, BOOL isForceRel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::APPLY_FORCE_TO_OBJECT), void>(object, forceType, forceX, forceY, forceZ, offX, offY, offZ, bone, isDirectionRel, ignoreUpVec, isForceRel); }
    static inline auto ApplyForceToPed(Ped ped, int forceType, float forceX, float forceY, float forceZ, float offX, float offY, float offZ, int bone, BOOL isDirectionRel, BOOL ignoreUpVec, BOOL isForceRel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::APPLY_FORCE_TO_PED), void>(ped, forceType, forceX, forceY, forceZ, offX, offY, offZ, bone, isDirectionRel, ignoreUpVec, isForceRel); }
    static inline auto ApplyForceToVehicle(Vehicle vehicle, int forceType, float forceX, float forceY, float forceZ, float offX, float offY, float offZ, int bone, BOOL isDirectionRel, BOOL ignoreUpVec, BOOL isForceRel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::APPLY_FORCE_TO_VEHICLE), void>(vehicle, forceType, forceX, forceY, forceZ, offX, offY, offZ, bone, isDirectionRel, ignoreUpVec, isForceRel); }
    static inline auto ApplyPlayerPreloadVariation(Ped ped, int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::APPLY_PLAYER_PRELOAD_VARIATION), void>(ped, index); }
    static inline auto ApplyUniformlyDistributedImpulseToRagdoll(Ped ped, float xOffset, float yOffset, float zOffset) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::APPLY_UNIFORMLY_DISTRIBUTED_IMPULSE_TO_RAGDOLL), void>(ped, xOffset, yOffset, zOffset); }
    static inline auto AreAllNavmeshRegionsLoaded() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ARE_ALL_NAVMESH_REGIONS_LOADED), BOOL>(); }
    static inline auto AreCreditsActive() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ARE_CREDITS_ACTIVE), BOOL>(); }
    static inline auto AreMpStatsLoaded() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ARE_MP_STATS_LOADED), BOOL>(); }
    static inline auto ArePlayerCoverMovementTransitionsBlocked() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ARE_PLAYER_COVER_MOVEMENT_TRANSITIONS_BLOCKED), BOOL>(); }
    static inline auto ArePlayerFlashingStarsAboutToDrop() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP), Any>(); }
    static inline auto ArePlayerStarsGreyedOut() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ARE_PLAYER_STARS_GREYED_OUT), Any>(); }
    static inline auto AreSpStatsLoaded() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ARE_SP_STATS_LOADED), BOOL>(); }
    static inline auto AreStringsEqual(const char* str1, const char* str2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ARE_STRINGS_EQUAL), BOOL>(str1, str2); }
    static inline auto AreUnitTestsRunning() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ARE_UNIT_TESTS_RUNNING), BOOL>(); }
    static inline auto AreVehicleHeadlightsBroken(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ARE_VEHICLE_HEADLIGHTS_BROKEN), BOOL>(vehicle); }
    static inline auto AreWidescreenBordersActive() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ARE_WIDESCREEN_BORDERS_ACTIVE), BOOL>(); }
    static inline auto Asin(float x) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ASIN), float>(x); }
    static inline auto AssistedMovementAddPoint(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ASSISTED_MOVEMENT_ADD_POINT), void>(x, y, z); }
    static inline auto AssistedMovementCloseRoute() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ASSISTED_MOVEMENT_CLOSE_ROUTE), void>(); }
    static inline auto AssistedMovementFlushRoute() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ASSISTED_MOVEMENT_FLUSH_ROUTE), void>(); }
    static inline auto AssistedMovementIsOnAnyRoute() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ASSISTED_MOVEMENT_IS_ON_ANY_ROUTE), BOOL>(); }
    static inline auto AssistedMovementIsOnScriptedRoute() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ASSISTED_MOVEMENT_IS_ON_SCRIPTED_ROUTE), int>(); }
    static inline auto AssistedMovementOpenRoute() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ASSISTED_MOVEMENT_OPEN_ROUTE), void>(); }
    static inline auto AssistedMovementSetWidth(float width) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ASSISTED_MOVEMENT_SET_WIDTH), void>(width); }
    static inline auto Atan(float x) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATAN), float>(x); }
    static inline auto Atan2(float y, float x) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATAN2), float>(y, x); }
    static inline auto AttachCamToObject(Cam cam, Object object, float offsetX, float offsetY, float offsetZ, BOOL heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_CAM_TO_OBJECT), void>(cam, object, offsetX, offsetY, offsetZ, heading); }
    static inline auto AttachCamToPed(Cam cam, Ped ped, float offsetX, float offsetY, float offsetZ, BOOL heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_CAM_TO_PED), void>(cam, ped, offsetX, offsetY, offsetZ, heading); }
    static inline auto AttachCamToVehicle(Cam cam, Vehicle vehicle, float offsetX, float offsetY, float offsetZ, BOOL heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_CAM_TO_VEHICLE), void>(cam, vehicle, offsetX, offsetY, offsetZ, heading); }
    static inline auto AttachExplosiveInteractVolumeToPed(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11, Any a12) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_EXPLOSIVE_INTERACT_VOLUME_TO_PED), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); }
    static inline auto AttachInteractVolumeToPed(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_INTERACT_VOLUME_TO_PED), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); }
    static inline auto AttachLaserToObject(int laser, Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_LASER_TO_OBJECT), void>(laser, object); }
    static inline auto AttachLaserToObjectBone(int laser, Object object, const char* boneName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_LASER_TO_OBJECT_BONE), void>(laser, object, boneName); }
    static inline auto AttachObjectToObject(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_OBJECT_TO_OBJECT), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8); }
    static inline auto AttachObjectToObjectPhysically() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_OBJECT_TO_OBJECT_PHYSICALLY), Any>(); }
    static inline auto AttachObjectToPed(Object object, Ped ped, int boneId, float a3, float a4, float a5, float a6, float a7, float a8, BOOL a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_OBJECT_TO_PED), void>(object, ped, boneId, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto AttachObjectToVehicle(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_OBJECT_TO_VEHICLE), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8); }
    static inline auto AttachObjectToVehiclePhysically() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_OBJECT_TO_VEHICLE_PHYSICALLY), Any>(); }
    static inline auto AttachObjectVehicleToRope(Rope rope, Object object, Vehicle vehicle, Vector3* offset1, Vector3* offset2, float a5, int a6, int a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_OBJECT_VEHICLE_TO_ROPE), void>(rope, object, vehicle, offset1, offset2, a5, a6, a7); }
    static inline auto AttachObjectsToRope(Rope rope, Object object1, Object object2, Vector3* offset1, Vector3* offset2, float a5, int a6, int a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_OBJECTS_TO_ROPE), void>(rope, object1, object2, offset1, offset2, a5, a6, a7); }
    static inline auto AttachPedToObject(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_PED_TO_OBJECT), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto AttachPedToObjectPhysically() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_PED_TO_OBJECT_PHYSICALLY), Any>(); }
    static inline auto AttachPedToPed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_PED_TO_PED), Any>(); }
    static inline auto AttachPedToPedPhysically() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_PED_TO_PED_PHYSICALLY), Any>(); }
    static inline auto AttachPedToVehicle(Ped ped, Vehicle vehicle, int bone, float a3, float a4, float a5, float a6, float a7, BOOL a8, BOOL a9, BOOL a10, BOOL a11) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_PED_TO_VEHICLE), void>(ped, vehicle, bone, a3, a4, a5, a6, a7, a8, a9, a10, a11); }
    static inline auto AttachPedToVehiclePhysically(Ped ped, Vehicle vehicle, int bone1, int bone2, float a4, float a5, float a6, float a7, BOOL a8, BOOL a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_PED_TO_VEHICLE_PHYSICALLY), void>(ped, vehicle, bone1, bone2, a4, a5, a6, a7, a8, a9); }
    static inline auto AttachPedToWorldPhysically(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_PED_TO_WORLD_PHYSICALLY), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto AttachRopeToObject(Rope rope, Object object, Vector3* offset, int a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_ROPE_TO_OBJECT), void>(rope, object, offset, a3); }
    static inline auto AttachVehicleToObject(Vehicle vehicle, Object object, int bone, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_VEHICLE_TO_OBJECT), void>(vehicle, object, bone, xPos, yPos, zPos, xRot, yRot, zRot); }
    static inline auto AttachVehicleToVehicle(Vehicle vehicle1, Vehicle vehicle2, int bone, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_VEHICLE_TO_VEHICLE), void>(vehicle1, vehicle2, bone, xPos, yPos, zPos, xRot, yRot, zRot); }
    static inline auto AttachVehicleToVehiclePhysically(Vehicle vehicle1, Vehicle vehicle2, int bone1, int bone2, float xPos1, float yPos1, float zPos1, float xPos2, float yPos2, float zPos2, float xRot, float yRot, float zRot, float breakForce, BOOL fixedRot) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_VEHICLE_TO_VEHICLE_PHYSICALLY), void>(vehicle1, vehicle2, bone1, bone2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot); }
    static inline auto AttachVehiclesToRope(Rope rope, Vehicle vehicle1, Vehicle vehicle2, Vector3* offset1, Vector3* offset2, float a5, int a6, int a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_VEHICLES_TO_ROPE), void>(rope, vehicle1, vehicle2, offset1, offset2, a5, a6, a7); }
    static inline auto AttachWeaponToVehicle(Hash weaponHash, Vehicle vehicle, int a2, float a3, float a4, float a5, float a6, float a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ATTACH_WEAPON_TO_VEHICLE), void>(weaponHash, vehicle, a2, a3, a4, a5, a6, a7); }
    static inline auto AudEnablePreBinkShutdown(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUD_ENABLE_PRE_BINK_SHUTDOWN), void>(a0); }
    static inline auto AudGetAnimMarkerLevel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUD_GET_ANIM_MARKER_LEVEL), int>(); }
    static inline auto AudSetIsPowerOn(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUD_SET_IS_POWER_ON), void>(toggle); }
    static inline auto AudioChangePortalSettings() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_CHANGE_PORTAL_SETTINGS), Any>(); }
    static inline auto AudioDisableWadingSounds() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_DISABLE_WADING_SOUNDS), Any>(); }
    static inline auto AudioEnableFeMusic(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_ENABLE_FE_MUSIC), void>(toggle); }
    static inline auto AudioEnableHealthMix(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_ENABLE_HEALTH_MIX), void>(toggle); }
    static inline auto AudioEnableTvMovie(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_ENABLE_TV_MOVIE), void>(toggle); }
    static inline auto AudioIgnoreNextWarpTransitionSound() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_IGNORE_NEXT_WARP_TRANSITION_SOUND), void>(); }
    static inline auto AudioIsCutscenePlaying() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_IS_CUTSCENE_PLAYING), Any>(); }
    static inline auto AudioIsFrontendMusicPlaying() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_IS_FRONTEND_MUSIC_PLAYING), Any>(); }
    static inline auto AudioIsMusicPlaying() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_IS_MUSIC_PLAYING), BOOL>(); }
    static inline auto AudioIsScriptedMusicPlaying() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_IS_SCRIPTED_MUSIC_PLAYING), BOOL>(); }
    static inline auto AudioLoadBank() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_LOAD_BANK), Any>(); }
    static inline auto AudioLoadMetadata() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_LOAD_METADATA), Any>(); }
    static inline auto AudioLoadSpeechData() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_LOAD_SPEECH_DATA), Any>(); }
    static inline auto AudioMakeSlotStatic() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MAKE_SLOT_STATIC), Any>(); }
    static inline auto AudioMusicAdjustVolume(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_ADJUST_VOLUME), void>(a0); }
    static inline auto AudioMusicClearAudioSyncVariables() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_CLEAR_AUDIO_SYNC_VARIABLES), Any>(); }
    static inline auto AudioMusicForceTrack(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_FORCE_TRACK), void>(a0, a1, a2, a3, a4, a5, a6, a7); }
    static inline auto AudioMusicForceTrackHash() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_FORCE_TRACK_HASH), Any>(); }
    static inline auto AudioMusicGetMsUntilAudioSync() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_GET_MS_UNTIL_AUDIO_SYNC), Any>(); }
    static inline auto AudioMusicIsAudioSyncNow() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_IS_AUDIO_SYNC_NOW), Any>(); }
    static inline auto AudioMusicIsMarkerInRange() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_IS_MARKER_IN_RANGE), Any>(); }
    static inline auto AudioMusicIsOneshotPrepared(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_IS_ONESHOT_PREPARED), Any>(a0); }
    static inline auto AudioMusicIsPrepared() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_IS_PREPARED), Any>(); }
    static inline auto AudioMusicOneShot() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_ONE_SHOT), Any>(); }
    static inline auto AudioMusicPlayOneshot() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_PLAY_ONESHOT), void>(); }
    static inline auto AudioMusicPlayPrepared() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_PLAY_PREPARED), Any>(); }
    static inline auto AudioMusicPlayUnscriptedNow() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_PLAY_UNSCRIPTED_NOW), Any>(); }
    static inline auto AudioMusicPreloadOneshot(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_PRELOAD_ONESHOT), Any>(a0, a1); }
    static inline auto AudioMusicReleaseControl() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_RELEASE_CONTROL), Any>(); }
    static inline auto AudioMusicRequestOneshot(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_REQUEST_ONESHOT), Any>(a0, a1); }
    static inline auto AudioMusicResume() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_RESUME), Any>(); }
    static inline auto AudioMusicSetMood(const char* a0, const char* a1, float a2, int a3, int a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_SET_MOOD), void>(a0, a1, a2, a3, a4); }
    static inline auto AudioMusicSetState() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_SET_STATE), Any>(); }
    static inline auto AudioMusicSetSuspenseAllowed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_SET_SUSPENSE_ALLOWED), Any>(); }
    static inline auto AudioMusicStopOneshot() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_STOP_ONESHOT), void>(); }
    static inline auto AudioMusicSuspend(int a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_MUSIC_SUSPEND), void>(a0); }
    static inline auto AudioResetPedDeadSpeechFlag(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_RESET_PED_DEAD_SPEECH_FLAG), void>(ped); }
    static inline auto AudioSetBreathingStatus() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_SET_BREATHING_STATUS), Any>(); }
    static inline auto AudioSetPedFootstepsOn(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_SET_PED_FOOTSTEPS_ON), void>(a0); }
    static inline auto AudioSetPedFootstepsRolloff() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_SET_PED_FOOTSTEPS_ROLLOFF), Any>(); }
    static inline auto AudioSetPedFootstepsVolume(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_SET_PED_FOOTSTEPS_VOLUME), void>(a0, a1); }
    static inline auto AudioSetPedHasMpBurstGrounded(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_SET_PED_HAS_MP_BURST_GROUNDED), void>(a0, a1); }
    static inline auto AudioSetPlayerPainName() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_SET_PLAYER_PAIN_NAME), Any>(); }
    static inline auto AudioSetSidekickPainName() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_SET_SIDEKICK_PAIN_NAME), Any>(); }
    static inline auto AudioSetSinglePedFootstepsOn() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_SET_SINGLE_PED_FOOTSTEPS_ON), Any>(); }
    static inline auto AudioUnloadMetadata() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::AUDIO_UNLOAD_METADATA), Any>(); }
    static inline auto BgScriptAdjustByUnit(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::BG_SCRIPT_ADJUST_BY_UNIT), Any>(a0, a1); }
    static inline auto BindScriptDatabase(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::BIND_SCRIPT_DATABASE), void>(name); }
    static inline auto BlockPlayerCoverMovementTransitions(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::BLOCK_PLAYER_COVER_MOVEMENT_TRANSITIONS), void>(toggle); }
    static inline auto BloodDecalOnPedBone(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::BLOOD_DECAL_ON_PED_BONE), void>(a0, a1, a2, a3, a4, a5); }
    static inline auto BoobyTrapAllCorpseVolumes(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::BOOBY_TRAP_ALL_CORPSE_VOLUMES), void>(a0, a1); }
    static inline auto BotSetInput(const char* a0, float a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::BOT_SET_INPUT), void>(a0, a1); }
    static inline auto BotUpdateInput() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::BOT_UPDATE_INPUT), void>(); }
    static inline auto BreakRope(Rope* rope, int* a1, int* a2, float a3, float a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::BREAK_ROPE), void>(rope, a1, a2, a3, a4); }
    static inline auto Breakpoint() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::BREAKPOINT), void>(); }
    static inline auto BroadcastUnitTestMessage() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::BROADCAST_UNIT_TEST_MESSAGE), Any>(); }
    static inline auto BulletCameraAllowTrackBullet(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::BULLET_CAMERA_ALLOW_TRACK_BULLET), void>(toggle); }
    static inline auto BulletCameraPreloadTextBink(const char* a0, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::BULLET_CAMERA_PRELOAD_TEXT_BINK), void>(a0, a1); }
    static inline auto BulletCameraTrackUntilGrounded(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::BULLET_CAMERA_TRACK_UNTIL_GROUNDED), void>(toggle); }
    static inline auto CameraAimOverride(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_AIM_OVERRIDE), void>(toggle); }
    static inline auto CameraAnimatedCurrentTime() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_ANIMATED_CURRENT_TIME), Any>(); }
    static inline auto CameraAnimatedLength(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_ANIMATED_LENGTH), Any>(a0, a1); }
    static inline auto CameraAnimatedRecordSrl() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_ANIMATED_RECORD_SRL), void>(); }
    static inline auto CameraAnimatedStartFov(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_ANIMATED_START_FOV), Any>(a0, a1, a2); }
    static inline auto CameraAnimatedStartHeading(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_ANIMATED_START_HEADING), Any>(a0, a1, a2); }
    static inline auto CameraAnimatedStartPosition(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_ANIMATED_START_POSITION), Any>(a0, a1, a2); }
    static inline auto CameraAnimatedStop(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_ANIMATED_STOP), void>(a0, a1); }
    static inline auto CameraAnimatedUseDof() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_ANIMATED_USE_DOF), Any>(); }
    static inline auto CameraCanTargetObject(BOOL toggle, Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_CAN_TARGET_OBJECT), void>(toggle, object); }
    static inline auto CameraCanTargetProjectiles(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_CAN_TARGET_PROJECTILES), void>(toggle); }
    static inline auto CameraCanTargetTires(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_CAN_TARGET_TIRES), void>(toggle); }
    static inline auto CameraCanTargetVehicle(BOOL toggle, Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_CAN_TARGET_VEHICLE), void>(toggle, vehicle); }
    static inline auto CameraClearPointAtTarget() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_CLEAR_POINT_AT_TARGET), void>(); }
    static inline auto CameraEnableFirstTimeAimLock(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_ENABLE_FIRST_TIME_AIM_LOCK), void>(toggle); }
    static inline auto CameraEnableShoulderMode(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_ENABLE_SHOULDER_MODE), void>(toggle); }
    static inline auto CameraFirstPersonTrackRate(float rate) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_FIRST_PERSON_TRACK_RATE), void>(rate); }
    static inline auto CameraFreezeFrame(BOOL a0, int a1, int a2, float a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_FREEZE_FRAME), void>(a0, a1, a2, a3); }
    static inline auto CameraIsPointingAtTarget() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_IS_POINTING_AT_TARGET), Any>(); }
    static inline auto CameraOverrideEffectObstruction(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_OVERRIDE_EFFECT_OBSTRUCTION), void>(toggle); }
    static inline auto CameraPlayAnimated(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_PLAY_ANIMATED), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8); }
    static inline auto CameraPlayAnimatedAttachedPedRelative(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_PLAY_ANIMATED_ATTACHED_PED_RELATIVE), void>(a0, a1, a2, a3, a4); }
    static inline auto CameraPlayAnimatedAttachedVehicle(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_PLAY_ANIMATED_ATTACHED_VEHICLE), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8); }
    static inline auto CameraPlayAnimatedAttachedVehicleRelative(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_PLAY_ANIMATED_ATTACHED_VEHICLE_RELATIVE), void>(a0, a1, a2, a3, a4); }
    static inline auto CameraPlayAnimatedWithSrl(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_PLAY_ANIMATED_WITH_SRL), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto CameraPointAtCoord(float x, float y, float z, int duration) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_POINT_AT_COORD), void>(x, y, z, duration); }
    static inline auto CameraPointAtGrenade(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_POINT_AT_GRENADE), void>(toggle); }
    static inline auto CameraPointAtObject(Object object, int duration) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_POINT_AT_OBJECT), void>(object, duration); }
    static inline auto CameraPointAtPed(Ped ped, int duration) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_POINT_AT_PED), void>(ped, duration); }
    static inline auto CameraPointAtVehicle(Vehicle vehicle, int duration) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_POINT_AT_VEHICLE), void>(vehicle, duration); }
    static inline auto CameraSetHighCoverLockOnAngleLimit(float limit) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_SET_HIGH_COVER_LOCK_ON_ANGLE_LIMIT), void>(limit); }
    static inline auto CameraSettingsIsHardLockEnabled() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_SETTINGS_IS_HARD_LOCK_ENABLED), BOOL>(); }
    static inline auto CameraSnapPointAtCoord(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_SNAP_POINT_AT_COORD), void>(a0, a1, a2); }
    static inline auto CameraUseHandyCam(BOOL a0, float a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAMERA_USE_HANDY_CAM), void>(a0, a1, a2); }
    static inline auto CanCreateRandomCops() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAN_CREATE_RANDOM_COPS), BOOL>(); }
    static inline auto CanCreateRandomPed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAN_CREATE_RANDOM_PED), BOOL>(); }
    static inline auto CanPedSeeOtherPed(Ped ped, Ped ped2, float a2, float a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAN_PED_SEE_OTHER_PED), BOOL>(ped, ped2, a2, a3); }
    static inline auto CanPlayerStartMission(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAN_PLAYER_START_MISSION), BOOL>(player); }
    static inline auto CanSetEnterStateForCutscenePed(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAN_SET_ENTER_STATE_FOR_CUTSCENE_PED), BOOL>(name); }
    static inline auto CanSetExitStateForCutscenePed(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CAN_SET_EXIT_STATE_FOR_CUTSCENE_PED), BOOL>(name); }
    static inline auto Ceil(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CEIL), int>(value); }
    static inline auto ChangeAmbientStreamSound() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CHANGE_AMBIENT_STREAM_SOUND), Any>(); }
    static inline auto ChangeStaticEmitterSound(const char* emitterName, const char* soundName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CHANGE_STATIC_EMITTER_SOUND), void>(emitterName, soundName); }
    static inline auto CheckpointStorageLoad(Any* data, int dataSize) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CHECKPOINT_STORAGE_LOAD), BOOL>(data, dataSize); }
    static inline auto CheckpointStorageSave(Any* data, int dataSize, int checkpoint) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CHECKPOINT_STORAGE_SAVE), void>(data, dataSize, checkpoint); }
    static inline auto ClearAdditionalText(int slot, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_ADDITIONAL_TEXT), void>(slot, a1); }
    static inline auto ClearAllPedProps(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_ALL_PED_PROPS), void>(ped); }
    static inline auto ClearAllRingiconWorld() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_ALL_RINGICON_WORLD), void>(); }
    static inline auto ClearAllSpawnBlockingAreas() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_ALL_SPAWN_BLOCKING_AREAS), void>(); }
    static inline auto ClearAngledAreaOfVehicles(float x1, float y1, float z1, float x2, float y2, float z2, float a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_ANGLED_AREA_OF_VEHICLES), void>(x1, y1, z1, x2, y2, z2, a6); }
    static inline auto ClearArea(float x, float y, float z, float radius, BOOL dontIgnoreProjectiles) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_AREA), void>(x, y, z, radius, dontIgnoreProjectiles); }
    static inline auto ClearAreaOfCops(float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_AREA_OF_COPS), void>(x, y, z, radius); }
    static inline auto ClearAreaOfFiresAndExplosions(float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_AREA_OF_FIRES_AND_EXPLOSIONS), void>(x, y, z, radius); }
    static inline auto ClearAreaOfObjects(float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_AREA_OF_OBJECTS), void>(x, y, z, radius); }
    static inline auto ClearAreaOfPeds(float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_AREA_OF_PEDS), void>(x, y, z, radius); }
    static inline auto ClearAreaOfVehicles(float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_AREA_OF_VEHICLES), void>(x, y, z, radius); }
    static inline auto ClearBit(int* data, int bit) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_BIT), void>(data, bit); }
    static inline auto ClearBrief() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_BRIEF), void>(); }
    static inline auto ClearCentralMessages() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_CENTRAL_MESSAGES), void>(); }
    static inline auto ClearCollectableStats() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_COLLECTABLE_STATS), void>(); }
    static inline auto ClearCurrentWidgetGroup(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_CURRENT_WIDGET_GROUP), void>(a0); }
    static inline auto ClearDeathRecords() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_DEATH_RECORDS), void>(); }
    static inline auto ClearHelp() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_HELP), void>(); }
    static inline auto ClearIkAttachTarget(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_IK_ATTACH_TARGET), void>(ped); }
    static inline auto ClearInteriorCollisionRequired(Interior interior) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_INTERIOR_COLLISION_REQUIRED), void>(interior); }
    static inline auto ClearKillStreakRecords() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_KILL_STREAK_RECORDS), void>(); }
    static inline auto ClearKillxpRules() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_KILLXP_RULES), void>(); }
    static inline auto ClearLevelCompletion() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_LEVEL_COMPLETION), void>(); }
    static inline auto ClearLockedTarget(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_LOCKED_TARGET), void>(ped); }
    static inline auto ClearNamedCutscene(const char* cutsceneName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_NAMED_CUTSCENE), void>(cutsceneName); }
    static inline auto ClearNamedDebugFile() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_NAMED_DEBUG_FILE), Any>(); }
    static inline auto ClearNetworkObjectTerritoryEffect(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_NETWORK_OBJECT_TERRITORY_EFFECT), void>(object); }
    static inline auto ClearNetworkRestartNodeGroupList() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_NETWORK_RESTART_NODE_GROUP_LIST), void>(); }
    static inline auto ClearNewsScrollbar() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_NEWS_SCROLLBAR), void>(); }
    static inline auto ClearObjectLastDamageEntity(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_OBJECT_LAST_DAMAGE_ENTITY), void>(object); }
    static inline auto ClearPedDecisionMakerEventResponse() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PED_DECISION_MAKER_EVENT_RESPONSE), Any>(); }
    static inline auto ClearPedDefaultAim(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PED_DEFAULT_AIM), void>(ped); }
    static inline auto ClearPedLastDamageBone(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PED_LAST_DAMAGE_BONE), void>(ped); }
    static inline auto ClearPedLastDamageEntity(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PED_LAST_DAMAGE_ENTITY), void>(ped); }
    static inline auto ClearPedLastWeaponDamage(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PED_LAST_WEAPON_DAMAGE), void>(ped); }
    static inline auto ClearPedNonCreationArea() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PED_NON_CREATION_AREA), void>(); }
    static inline auto ClearPedNonRemovalArea() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PED_NON_REMOVAL_AREA), void>(); }
    static inline auto ClearPedPrimaryLookat(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PED_PRIMARY_LOOKAT), void>(ped); }
    static inline auto ClearPedProp(Ped ped, int propIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PED_PROP), void>(ped, propIndex); }
    static inline auto ClearPedRelationship(Ped ped, int relGroupId, int flags) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PED_RELATIONSHIP), void>(ped, relGroupId, flags); }
    static inline auto ClearPedSecondaryLookat(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PED_SECONDARY_LOOKAT), void>(ped); }
    static inline auto ClearPedSecondaryTask(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PED_SECONDARY_TASK), void>(ped); }
    static inline auto ClearPedTasks(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PED_TASKS), void>(ped); }
    static inline auto ClearPedTasksImmediately(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PED_TASKS_IMMEDIATELY), void>(ped); }
    static inline auto ClearPlayerHasDamagedAtLeastOnePed(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED), void>(player); }
    static inline auto ClearPlayerWantedLevel(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PLAYER_WANTED_LEVEL), void>(player); }
    static inline auto ClearPrints() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PRINTS), void>(); }
    static inline auto ClearProjectiles() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_PROJECTILES), void>(); }
    static inline auto ClearRelationshipBetweenRelGroups(int relGroupId1, int relGroupId2, int flags) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_RELATIONSHIP_BETWEEN_REL_GROUPS), void>(relGroupId1, relGroupId2, flags); }
    static inline auto ClearRingiconObject(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_RINGICON_OBJECT), void>(object); }
    static inline auto ClearRingiconPlayer(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_RINGICON_PLAYER), void>(player); }
    static inline auto ClearRingiconWorld(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_RINGICON_WORLD), void>(x, y, z); }
    static inline auto ClearRoomForObject(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_ROOM_FOR_OBJECT), void>(object); }
    static inline auto ClearRoomForPed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_ROOM_FOR_PED), void>(ped); }
    static inline auto ClearRoomForVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_ROOM_FOR_VEHICLE), void>(vehicle); }
    static inline auto ClearScriptArrayFromScratchpad() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_SCRIPT_ARRAY_FROM_SCRATCHPAD), Any>(); }
    static inline auto ClearScriptStreamRequests() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_SCRIPT_STREAM_REQUESTS), Any>(); }
    static inline auto ClearScriptedConversionCoord() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_SCRIPTED_CONVERSION_COORD), void>(); }
    static inline auto ClearSequenceTask(ScrHandle taskSequence) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_SEQUENCE_TASK), void>(taskSequence); }
    static inline auto ClearSmallPrints() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_SMALL_PRINTS), Any>(); }
    static inline auto ClearTextLabel(const char* textLabel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_TEXT_LABEL), void>(textLabel); }
    static inline auto ClearThisPrint() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_THIS_PRINT), Any>(); }
    static inline auto ClearTickerMessages() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_TICKER_MESSAGES), void>(); }
    static inline auto ClearTimecycleModifier() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_TIMECYCLE_MODIFIER), void>(); }
    static inline auto ClearTimecycleModifierOverride(int a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_TIMECYCLE_MODIFIER_OVERRIDE), void>(a0); }
    static inline auto ClearTutorialComplete() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_TUTORIAL_COMPLETE), void>(); }
    static inline auto ClearVehicleLastDamageEntity(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_VEHICLE_LAST_DAMAGE_ENTITY), void>(vehicle); }
    static inline auto ClearVehicleLastWeaponDamage(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_VEHICLE_LAST_WEAPON_DAMAGE), void>(vehicle); }
    static inline auto ClearWeatherTypePersist() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLEAR_WEATHER_TYPE_PERSIST), void>(); }
    static inline auto CloseDebugFile() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLOSE_DEBUG_FILE), Any>(); }
    static inline auto ClosePatrolRoute() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLOSE_PATROL_ROUTE), void>(); }
    static inline auto CloseSequenceTask(ScrHandle taskSequence) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CLOSE_SEQUENCE_TASK), void>(taskSequence); }
    static inline auto CommitExperience() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::COMMIT_EXPERIENCE), Any>(); }
    static inline auto CompareAgainstScoreParam(int a0, int a1, const char* paramName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::COMPARE_AGAINST_SCORE_PARAM), BOOL>(a0, a1, paramName); }
    static inline auto CompareAndSwap(int* a0, int a1, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::COMPARE_AND_SWAP), int>(a0, a1, a2); }
    static inline auto CopyAnimations(Ped ped, Ped ped2, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::COPY_ANIMATIONS), void>(ped, ped2, a2); }
    static inline auto CopyGroupPedDecisionMaker() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::COPY_GROUP_PED_DECISION_MAKER), Any>(); }
    static inline auto CopyPedDecisionMaker() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::COPY_PED_DECISION_MAKER), Any>(); }
    static inline auto Cos(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::COS), float>(value); }
    static inline auto CreateAicombatactionCoverenter(const char* a0, const char* a1, const char* a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_AICOMBATACTION_COVERENTER), void>(a0, a1, a2); }
    static inline auto CreateAmmobagPlacement() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_AMMOBAG_PLACEMENT), Any>(); }
    static inline auto CreateAmmobagPlacementRotate(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_AMMOBAG_PLACEMENT_ROTATE), Any>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto CreateAnimatedText(const char* text, float x, float y) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_ANIMATED_TEXT), void>(text, x, y); }
    static inline auto CreateCam(const char* camName, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_CAM), Cam>(camName, a1); }
    static inline auto CreateCamWithParams(const char* camName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fieldOfView, BOOL a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_CAM_WITH_PARAMS), Cam>(camName, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, a8); }
    static inline auto CreateCheckpoint(int type, float posX1, float posY1, float posZ1, float posX2, float posY2, float posZ2, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_CHECKPOINT), ScrHandle>(type, posX1, posY1, posZ1, posX2, posY2, posZ2, radius); }
    static inline auto CreateCoordInteractionVolume(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11, Any a12) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_COORD_INTERACTION_VOLUME), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); }
    static inline auto CreateDirectionsToCoord(float x, float y, float z, int* a3, int* a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_DIRECTIONS_TO_COORD), void>(x, y, z, a3, a4); }
    static inline auto CreateDynamicPathObstruction(float x1, float y1, float z1, float x2, float y2, float z2, float a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_DYNAMIC_PATH_OBSTRUCTION), int>(x1, y1, z1, x2, y2, z2, a6); }
    static inline auto CreateGlint(Hash glintType, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_GLINT), int>(glintType, x, y, z); }
    static inline auto CreateGroup(int unused, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_GROUP), Group>(unused, a1); }
    static inline auto CreateLaser(const char* a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_LASER), int>(a0); }
    static inline auto CreateLoadoutScreen() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_LOADOUT_SCREEN), Any>(); }
    static inline auto CreateMissionTrain(int variation, float x, float y, float z, BOOL direction) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_MISSION_TRAIN), Vehicle>(variation, x, y, z, direction); }
    static inline auto CreateNewScriptedConversation(int a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_NEW_SCRIPTED_CONVERSATION), int>(a0); }
    static inline auto CreateNmMessage(int flags, int messageId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_NM_MESSAGE), void>(flags, messageId); }
    static inline auto CreateObject(Hash modelHash, float x, float y, float z, BOOL dynamic, BOOL dontOwn) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_OBJECT), Object>(modelHash, x, y, z, dynamic, dontOwn); }
    static inline auto CreateObjectMover(Hash modelHash, float x, float y, float z, BOOL dynamic, const char* pathName, BOOL dontOwn) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_OBJECT_MOVER), Object>(modelHash, x, y, z, dynamic, pathName, dontOwn); }
    static inline auto CreateObjectNoOffset(Hash modelHash, float x, float y, float z, BOOL dynamic, BOOL dontOwn) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_OBJECT_NO_OFFSET), Object>(modelHash, x, y, z, dynamic, dontOwn); }
    static inline auto CreatePatrolRoute() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_PATROL_ROUTE), void>(); }
    static inline auto CreatePed(int pedType, Hash modelHash, float x, float y, float z, float heading, BOOL isNetwork, BOOL dontOwn) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_PED), Ped>(pedType, modelHash, x, y, z, heading, isNetwork, dontOwn); }
    static inline auto CreatePedCorpse(Ped ped, Ped dummyPed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_PED_CORPSE), void>(ped, dummyPed); }
    static inline auto CreatePedInsideVehicle(Vehicle vehicle, int pedType, Hash modelHash, int seatIndex, const char* a4, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_PED_INSIDE_VEHICLE), Ped>(vehicle, pedType, modelHash, seatIndex, a4, a5); }
    static inline auto CreatePlacement() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_PLACEMENT), Any>(); }
    static inline auto CreatePlacementRotate(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_PLACEMENT_ROTATE), Any>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); }
    static inline auto CreatePlayer(Any a0, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_PLAYER), Any>(a0, x, y, z); }
    static inline auto CreatePlayerWithAvatar(Hash avatarHash, float x, float y, float z, BOOL a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_PLAYER_WITH_AVATAR), Any>(avatarHash, x, y, z, a4); }
    static inline auto CreatePlayerWithModel(Hash modelHash, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_PLAYER_WITH_MODEL), Any>(modelHash, x, y, z); }
    static inline auto CreateRandomFemalePed(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_RANDOM_FEMALE_PED), Ped>(x, y, z); }
    static inline auto CreateRandomMalePed(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_RANDOM_MALE_PED), Ped>(x, y, z); }
    static inline auto CreateRandomPed(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_RANDOM_PED), Ped>(x, y, z); }
    static inline auto CreateRandomPedAsDriver(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_RANDOM_PED_AS_DRIVER), Ped>(vehicle); }
    static inline auto CreateScriptVehicleGenerator(float x, float y, float z, float heading, float a4, float a5, Hash modelHash, int a7, int a8, int a9, int a10, BOOL a11, int a12, int a13) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_SCRIPT_VEHICLE_GENERATOR), int>(x, y, z, heading, a4, a5, modelHash, a7, a8, a9, a10, a11, a12, a13); }
    static inline auto CreateSimplePed(Hash modelHash, float x, float y, float z, float heading, Hash a6, BOOL a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_SIMPLE_PED), Object>(modelHash, x, y, z, heading, a6, a7); }
    static inline auto CreateVehicle(Hash modelHash, float x, float y, float z, float heading, BOOL isNetwork, BOOL dontOwn) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CREATE_VEHICLE), Vehicle>(modelHash, x, y, z, heading, isNetwork, dontOwn); }
    static inline auto CutsceneDisableCrosshair() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_DISABLE_CROSSHAIR), void>(); }
    static inline auto CutsceneDisableFadeInGameAtEnd(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_DISABLE_FADE_IN_GAME_AT_END), void>(toggle); }
    static inline auto CutsceneEnableSkip(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_ENABLE_SKIP), void>(toggle); }
    static inline auto CutsceneExist(const char* cutsceneName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_EXIST), BOOL>(cutsceneName); }
    static inline auto CutsceneForceGameplayHeadingPitchUpdate() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_FORCE_GAMEPLAY_HEADING_PITCH_UPDATE), void>(); }
    static inline auto CutsceneForcePlayerInvisible() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_FORCE_PLAYER_INVISIBLE), void>(); }
    static inline auto CutsceneIsLoaded(const char* cutsceneName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_IS_LOADED), BOOL>(cutsceneName); }
    static inline auto CutsceneIsLoading() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_IS_LOADING), BOOL>(); }
    static inline auto CutsceneIsWaitingForMovie() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_IS_WAITING_FOR_MOVIE), BOOL>(); }
    static inline auto CutsceneModelNoLongerNeeded(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_MODEL_NO_LONGER_NEEDED), void>(modelHash); }
    static inline auto CutsceneNamedIsLoading(const char* cutsceneName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_NAMED_IS_LOADING), BOOL>(cutsceneName); }
    static inline auto CutsceneObjectOverrideVisibility(const char* objectName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_OBJECT_OVERRIDE_VISIBILITY), void>(objectName); }
    static inline auto CutsceneRegisterActionTreePlayNode(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_REGISTER_ACTION_TREE_PLAY_NODE), void>(a0, a1); }
    static inline auto CutsceneRegisterInteractiveSequence(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_REGISTER_INTERACTIVE_SEQUENCE), void>(name); }
    static inline auto CutsceneRegisterIseq(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_REGISTER_ISEQ), void>(hash); }
    static inline auto CutsceneRegisterObjectAnim(Object object, const char* animName, const char* animDict, float a3, BOOL a4, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_REGISTER_OBJECT_ANIM), Any>(object, animName, animDict, a3, a4, a5); }
    static inline auto CutsceneRegisterPedActionIntention(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_REGISTER_PED_ACTION_INTENTION), void>(a0, a1, a2, a3, a4, a5); }
    static inline auto CutsceneRegisterPedAttachToVehicle(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_REGISTER_PED_ATTACH_TO_VEHICLE), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto CutsceneRegisterPedTeleport(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_REGISTER_PED_TELEPORT), void>(a0, a1, a2, a3, a4); }
    static inline auto CutsceneRegisterPedWeaponHand(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_REGISTER_PED_WEAPON_HAND), void>(a0, a1, a2); }
    static inline auto CutsceneRegisterSetPedInCover(Ped ped, const char* a1, const char* a2, Ped ped2, BOOL a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_REGISTER_SET_PED_IN_COVER), void>(ped, a1, a2, ped2, a4); }
    static inline auto CutsceneRegisterSetPlayerInCover(const char* a0, const char* a1, BOOL a2, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_REGISTER_SET_PLAYER_IN_COVER), void>(a0, a1, a2, a3); }
    static inline auto CutsceneRegisterStreamHelper(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_REGISTER_STREAM_HELPER), void>(a0, a1, a2); }
    static inline auto CutsceneRegisterSwitchToLevel(int levelIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_REGISTER_SWITCH_TO_LEVEL), void>(levelIndex); }
    static inline auto CutsceneRegisterSwitchToLevelName(const char* levelName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_REGISTER_SWITCH_TO_LEVEL_NAME), void>(levelName); }
    static inline auto CutsceneRegisterVehicleCopy(Vehicle vehicle, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_REGISTER_VEHICLE_COPY), void>(vehicle, name); }
    static inline auto CutsceneSetCoverCameraDirection(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_SET_COVER_CAMERA_DIRECTION), void>(a0, a1); }
    static inline auto CutsceneSetIsUnapproved() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_SET_IS_UNAPPROVED), void>(); }
    static inline auto CutsceneSetOverlayType(int type) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_SET_OVERLAY_TYPE), void>(type); }
    static inline auto CutsceneSetWaitForMovie(int a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_SET_WAIT_FOR_MOVIE), void>(a0); }
    static inline auto CutsceneShowUnapproved() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::CUTSCENE_SHOW_UNAPPROVED), BOOL>(); }
    static inline auto DamageAllGroupsOnObject(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DAMAGE_ALL_GROUPS_ON_OBJECT), void>(object); }
    static inline auto DamageDecalOnPedBone(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DAMAGE_DECAL_ON_PED_BONE), void>(a0, a1, a2, a3, a4); }
    static inline auto DamageDecalsOnPed(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DAMAGE_DECALS_ON_PED), void>(a0, a1); }
    static inline auto DamageGlassInRadius(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DAMAGE_GLASS_IN_RADIUS), void>(a0, a1, a2, a3, a4); }
    static inline auto DbDeleteBool(const char* name, const char* entryName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DB_DELETE_BOOL), void>(name, entryName); }
    static inline auto DbDeleteFloat(const char* name, const char* entryName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DB_DELETE_FLOAT), void>(name, entryName); }
    static inline auto DbDeleteInt(const char* name, const char* entryName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DB_DELETE_INT), void>(name, entryName); }
    static inline auto DbGetBool(const char* name, const char* entryName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DB_GET_BOOL), BOOL>(name, entryName); }
    static inline auto DbGetFloat(const char* name, const char* entryName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DB_GET_FLOAT), float>(name, entryName); }
    static inline auto DbGetInt(const char* name, const char* entryName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DB_GET_INT), int>(name, entryName); }
    static inline auto DbInsertBool(const char* name, const char* entryName, BOOL value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DB_INSERT_BOOL), void>(name, entryName, value); }
    static inline auto DbInsertFloat(const char* name, const char* entryName, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DB_INSERT_FLOAT), void>(name, entryName, value); }
    static inline auto DbInsertInt(const char* name, const char* entryName, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DB_INSERT_INT), void>(name, entryName, value); }
    static inline auto DbIsBoolValid(const char* name, const char* entryName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DB_IS_BOOL_VALID), BOOL>(name, entryName); }
    static inline auto DbIsFloatValid(const char* name, const char* entryName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DB_IS_FLOAT_VALID), BOOL>(name, entryName); }
    static inline auto DbIsIntValid(const char* name, const char* entryName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DB_IS_INT_VALID), BOOL>(name, entryName); }
    static inline auto DbSetBool(const char* name, const char* entryName, BOOL value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DB_SET_BOOL), void>(name, entryName, value); }
    static inline auto DbSetFloat(const char* name, const char* entryName, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DB_SET_FLOAT), void>(name, entryName, value); }
    static inline auto DbSetInt(const char* name, const char* entryName, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DB_SET_INT), void>(name, entryName, value); }
    static inline auto DbgActivateBulletCamTime(float a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DBG_ACTIVATE_BULLET_CAM_TIME), void>(a0); }
    static inline auto DbgDeactivateBulletCamTime(BOOL a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DBG_DEACTIVATE_BULLET_CAM_TIME), void>(a0); }
    static inline auto DeactivateBulletTime(BOOL toggle, BOOL ignoreScript) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEACTIVATE_BULLET_TIME), void>(toggle, ignoreScript); }
    static inline auto DeactivateBulletTimeAsPlayer() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEACTIVATE_BULLET_TIME_AS_PLAYER), Any>(); }
    static inline auto DeactivateSpecialFxModifier(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEACTIVATE_SPECIAL_FX_MODIFIER), void>(name); }
    static inline auto DeathrecordClear(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_CLEAR), void>(index); }
    static inline auto DeathrecordClearAll() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_CLEAR_ALL), void>(); }
    static inline auto DeathrecordEnableAssistXp() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_ENABLE_ASSIST_XP), Any>(); }
    static inline auto DeathrecordGetNumKillers() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_NUM_KILLERS), int>(); }
    static inline auto DeathrecordGetNumRecords(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_NUM_RECORDS), int>(index); }
    static inline auto DeathrecordGetNumShots(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_NUM_SHOTS), Any>(a0); }
    static inline auto DeathrecordGetRecordBulletcount() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_RECORD_BULLETCOUNT), Any>(); }
    static inline auto DeathrecordGetRecordComponent() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_RECORD_COMPONENT), Any>(); }
    static inline auto DeathrecordGetRecordDamage() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_RECORD_DAMAGE), Any>(); }
    static inline auto DeathrecordGetRecordFlags() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_RECORD_FLAGS), Any>(); }
    static inline auto DeathrecordGetRecordFrom() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_RECORD_FROM), Any>(); }
    static inline auto DeathrecordGetRecordInjurer() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_RECORD_INJURER), Any>(); }
    static inline auto DeathrecordGetRecordIsCurrentLife() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_RECORD_IS_CURRENT_LIFE), Any>(); }
    static inline auto DeathrecordGetRecordTime() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_RECORD_TIME), Any>(); }
    static inline auto DeathrecordGetRecordWeapon() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_RECORD_WEAPON), Any>(); }
    static inline auto DeathrecordGetShotBulletcount(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_SHOT_BULLETCOUNT), Any>(a0, a1); }
    static inline auto DeathrecordGetShotComponent(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_SHOT_COMPONENT), Any>(a0, a1); }
    static inline auto DeathrecordGetShotDamage(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_SHOT_DAMAGE), Any>(a0, a1); }
    static inline auto DeathrecordGetShotFlags() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_SHOT_FLAGS), Any>(); }
    static inline auto DeathrecordGetShotFrom() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_SHOT_FROM), Any>(); }
    static inline auto DeathrecordGetShotInjurer(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_SHOT_INJURER), Any>(a0, a1); }
    static inline auto DeathrecordGetShotIsCurrentLife(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_SHOT_IS_CURRENT_LIFE), Any>(a0, a1); }
    static inline auto DeathrecordGetShotTime(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_SHOT_TIME), Any>(a0, a1); }
    static inline auto DeathrecordGetShotWeapon(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_SHOT_WEAPON), Any>(a0, a1); }
    static inline auto DeathrecordGetSubKillerName(int bufferSize, char* buffer, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_SUB_KILLER_NAME), void>(bufferSize, buffer, a2); }
    static inline auto DeathrecordGetSubKillerPercent() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_SUB_KILLER_PERCENT), Any>(); }
    static inline auto DeathrecordGetSubKillerPlayerIndex(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_SUB_KILLER_PLAYER_INDEX), Any>(a0); }
    static inline auto DeathrecordGetSubKillerPrimary() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_SUB_KILLER_PRIMARY), Any>(); }
    static inline auto DeathrecordGetSubKillerRank() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_SUB_KILLER_RANK), Any>(); }
    static inline auto DeathrecordGetSubKillerSecondary() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORD_GET_SUB_KILLER_SECONDARY), Any>(); }
    static inline auto DeathrecordsClearKillshotdata() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORDS_CLEAR_KILLSHOTDATA), void>(); }
    static inline auto DeathrecordsGetPlayerdetailsClantag() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORDS_GET_PLAYERDETAILS_CLANTAG), Any>(); }
    static inline auto DeathrecordsGetPlayerdetailsName(int bufferSize, char* buffer, int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORDS_GET_PLAYERDETAILS_NAME), void>(bufferSize, buffer, index); }
    static inline auto DeathrecordsGetPlayerdetailsTitle() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEATHRECORDS_GET_PLAYERDETAILS_TITLE), Any>(); }
    static inline auto DebugGetBgScriptName(int index, int bufferSize, char* buffer) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEBUG_GET_BG_SCRIPT_NAME), void>(index, bufferSize, buffer); }
    static inline auto DebugSetSelectedPed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEBUG_SET_SELECTED_PED), Any>(); }
    static inline auto DebugdrawGetscreenspacetextheight() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DEBUGDRAW_GETSCREENSPACETEXTHEIGHT), Any>(); }
    static inline auto DeleteAllPedCorpses() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_ALL_PED_CORPSES), void>(); }
    static inline auto DeleteAllTrains() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_ALL_TRAINS), void>(); }
    static inline auto DeleteCheckpoint(ScrHandle checkpoint) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_CHECKPOINT), void>(checkpoint); }
    static inline auto DeleteMissionTrain(Vehicle train) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_MISSION_TRAIN), void>(train); }
    static inline auto DeleteObject(Object* object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_OBJECT), void>(object); }
    static inline auto DeletePatrolRoute(const char* patrolRouteName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_PATROL_ROUTE), void>(patrolRouteName); }
    static inline auto DeletePed(Ped* ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_PED), void>(ped); }
    static inline auto DeletePedCorpse(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_PED_CORPSE), void>(ped); }
    static inline auto DeleteRope(Rope* rope) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_ROPE), void>(rope); }
    static inline auto DeleteScriptVehicleGenerator(int scriptVehicleGenerator) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_SCRIPT_VEHICLE_GENERATOR), void>(scriptVehicleGenerator); }
    static inline auto DeleteSimplePed(Object* ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_SIMPLE_PED), void>(ped); }
    static inline auto DeleteVehicle(Vehicle* vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_VEHICLE), void>(vehicle); }
    static inline auto DeleteVehicleAnimator(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_VEHICLE_ANIMATOR), void>(vehicle); }
    static inline auto DeleteWidget(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_WIDGET), void>(a0); }
    static inline auto DeleteWidgetGroup(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_WIDGET_GROUP), void>(a0); }
    static inline auto DeleteXmlFile() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DELETE_XML_FILE), void>(); }
    static inline auto DestroyAllCams() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DESTROY_ALL_CAMS), void>(); }
    static inline auto DestroyCam(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DESTROY_CAM), void>(cam); }
    static inline auto DestroyDynamicPathObstruction(int id) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DESTROY_DYNAMIC_PATH_OBSTRUCTION), void>(id); }
    static inline auto DestroyFragmentObject(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DESTROY_FRAGMENT_OBJECT), void>(object); }
    static inline auto DestroyLaser(int laser) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DESTROY_LASER), void>(laser); }
    static inline auto DestroyLoadoutScreen() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DESTROY_LOADOUT_SCREEN), Any>(); }
    static inline auto DetachCam(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DETACH_CAM), void>(cam); }
    static inline auto DetachObject(Object object, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DETACH_OBJECT), void>(object, a1); }
    static inline auto DetachPed(Ped ped, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DETACH_PED), void>(ped, a1); }
    static inline auto DetachPedFromWithinVehicle(Ped ped, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DETACH_PED_FROM_WITHIN_VEHICLE), void>(ped, a1); }
    static inline auto DetachRopeFromObject(Rope rope, Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DETACH_ROPE_FROM_OBJECT), void>(rope, object); }
    static inline auto DetachVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DETACH_VEHICLE), void>(vehicle); }
    static inline auto DidPlayerQuitLevel(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DID_PLAYER_QUIT_LEVEL), BOOL>(a0); }
    static inline auto DisableDirectionalLight(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISABLE_DIRECTIONAL_LIGHT), void>(toggle); }
    static inline auto DisableFadeBetweenSpLevels() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISABLE_FADE_BETWEEN_SP_LEVELS), void>(); }
    static inline auto DisablePickupsForPlayer(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISABLE_PICKUPS_FOR_PLAYER), void>(toggle); }
    static inline auto DisableRestartCheckpoint(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISABLE_RESTART_CHECKPOINT), void>(toggle); }
    static inline auto DisallowJoiners() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISALLOW_JOINERS), void>(); }
    static inline auto DisplayArcadeModeLevelEnd(const char* levelName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_ARCADE_MODE_LEVEL_END), void>(levelName); }
    static inline auto DisplayAreaName(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_AREA_NAME), void>(toggle); }
    static inline auto DisplayFrontendMapBlips(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_FRONTEND_MAP_BLIPS), void>(toggle); }
    static inline auto DisplayHelpTextThisFrame(const char* textLabel, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_HELP_TEXT_THIS_FRAME), void>(textLabel, a1); }
    static inline auto DisplayHud(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_HUD), void>(toggle); }
    static inline auto DisplayLoadingScreenNow(BOOL a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_LOADING_SCREEN_NOW), void>(a0); }
    static inline auto DisplayNonMinigameHelpMessages(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_NON_MINIGAME_HELP_MESSAGES), void>(toggle); }
    static inline auto DisplayPlaybackRecordedVehicle() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_PLAYBACK_RECORDED_VEHICLE), Any>(); }
    static inline auto DisplayPlayerComponent(int component, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_PLAYER_COMPONENT), void>(component, toggle); }
    static inline auto DisplayPlayerNames(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_PLAYER_NAMES), void>(toggle); }
    static inline auto DisplaySeamlessCutsceneTriggerArea() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_SEAMLESS_CUTSCENE_TRIGGER_AREA), Any>(); }
    static inline auto DisplaySystemSigninUi() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_SYSTEM_SIGNIN_UI), void>(); }
    static inline auto DisplayText(float x, float y, const char* text) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_TEXT), void>(x, y, text); }
    static inline auto DisplayTextWith2Numbers() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_2_NUMBERS), Any>(); }
    static inline auto DisplayTextWith3Numbers() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_3_NUMBERS), Any>(); }
    static inline auto DisplayTextWithFloat(float x, float y, const char* textLabel, float value, int a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_FLOAT), void>(x, y, textLabel, value, a4); }
    static inline auto DisplayTextWithLiteralString(float x, float y, const char* textLabel, const char* string) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_LITERAL_STRING), void>(x, y, textLabel, string); }
    static inline auto DisplayTextWithNumber() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_NUMBER), Any>(); }
    static inline auto DisplayTextWithString() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_STRING), Any>(); }
    static inline auto DisplayTextWithTwoLiteralStrings() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_TWO_LITERAL_STRINGS), Any>(); }
    static inline auto DisplayTextWithTwoStrings() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_TWO_STRINGS), Any>(); }
    static inline auto DoScreenFadeIn(int duration) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DO_SCREEN_FADE_IN), void>(duration); }
    static inline auto DoScreenFadeOut(int duration) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DO_SCREEN_FADE_OUT), void>(duration); }
    static inline auto DoesBlipExist(Blip blip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_BLIP_EXIST), BOOL>(blip); }
    static inline auto DoesCamExist(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_CAM_EXIST), BOOL>(cam); }
    static inline auto DoesCorpseExist(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_CORPSE_EXIST), BOOL>(ped); }
    static inline auto DoesDecisionMakerExist(ScrHandle decisionMaker) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_DECISION_MAKER_EXIST), BOOL>(decisionMaker); }
    static inline auto DoesGlintExist(int glint) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_GLINT_EXIST), BOOL>(glint); }
    static inline auto DoesGroupExist(Group group) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_GROUP_EXIST), BOOL>(group); }
    static inline auto DoesLaunchParamExist(int a0, const char* paramName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_LAUNCH_PARAM_EXIST), BOOL>(a0, paramName); }
    static inline auto DoesLoadoutSlotHaveCustomName(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_LOADOUT_SLOT_HAVE_CUSTOM_NAME), BOOL>(index); }
    static inline auto DoesMainPlayerExist() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_MAIN_PLAYER_EXIST), BOOL>(); }
    static inline auto DoesObjectExist(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_OBJECT_EXIST), BOOL>(object); }
    static inline auto DoesObjectHavePhysics(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_OBJECT_HAVE_PHYSICS), BOOL>(object); }
    static inline auto DoesObjectOfTypeExistAtCoords(float x, float y, float z, float radius, Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS), BOOL>(x, y, z, radius, modelHash); }
    static inline auto DoesPadExist(int padIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_PAD_EXIST), BOOL>(padIndex); }
    static inline auto DoesPedExist(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_PED_EXIST), BOOL>(ped); }
    static inline auto DoesPickupExist(Pickup pickup) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_PICKUP_EXIST), BOOL>(pickup); }
    static inline auto DoesPlacementExist(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_PLACEMENT_EXIST), BOOL>(index); }
    static inline auto DoesScenarioExistInArea() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_SCENARIO_EXIST_IN_AREA), Any>(); }
    static inline auto DoesScriptExist(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_SCRIPT_EXIST), BOOL>(name); }
    static inline auto DoesSpatialdataCoverPointExist(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_SPATIALDATA_COVER_POINT_EXIST), Any>(a0); }
    static inline auto DoesTextLabelExist(const char* textLabel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_TEXT_LABEL_EXIST), BOOL>(textLabel); }
    static inline auto DoesThisMinigameScriptAllowNonMinigameHelpMessages() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_THIS_MINIGAME_SCRIPT_ALLOW_NON_MINIGAME_HELP_MESSAGES), BOOL>(); }
    static inline auto DoesVehicleExist(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_VEHICLE_EXIST), BOOL>(vehicle); }
    static inline auto DoesVehicleHaveRoof(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_VEHICLE_HAVE_ROOF), BOOL>(vehicle); }
    static inline auto DoesVehicleHaveStuckVehicleCheck(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK), BOOL>(vehicle); }
    static inline auto DoesWidgetGroupExist() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOES_WIDGET_GROUP_EXIST), Any>(); }
    static inline auto DoorActivateSpatialData() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_ACTIVATE_SPATIAL_DATA), Any>(); }
    static inline auto DoorFindClosest(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_FIND_CLOSEST), Any>(a0, a1, a2, a3); }
    static inline auto DoorFindClosestActivateSpatialData(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_FIND_CLOSEST_ACTIVATE_SPATIAL_DATA), void>(a0, a1, a2, a3, a4); }
    static inline auto DoorFindClosestGetAutoClose() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_FIND_CLOSEST_GET_AUTO_CLOSE), Any>(); }
    static inline auto DoorFindClosestGetClose() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_FIND_CLOSEST_GET_CLOSE), Any>(); }
    static inline auto DoorFindClosestGetLatch() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_FIND_CLOSEST_GET_LATCH), Any>(); }
    static inline auto DoorFindClosestGetLimitMax() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_FIND_CLOSEST_GET_LIMIT_MAX), Any>(); }
    static inline auto DoorFindClosestGetLimitMin() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_FIND_CLOSEST_GET_LIMIT_MIN), Any>(); }
    static inline auto DoorFindClosestSetAutoClose(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_FIND_CLOSEST_SET_AUTO_CLOSE), void>(a0, a1, a2, a3, a4); }
    static inline auto DoorFindClosestSetClose(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_FIND_CLOSEST_SET_CLOSE), void>(a0, a1, a2, a3, a4); }
    static inline auto DoorFindClosestSetForceClose(Hash modelHash, float x, float y, float z, BOOL a4, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_FIND_CLOSEST_SET_FORCE_CLOSE), void>(modelHash, x, y, z, a4, a5); }
    static inline auto DoorFindClosestSetLatch(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_FIND_CLOSEST_SET_LATCH), void>(a0, a1, a2, a3, a4); }
    static inline auto DoorFindClosestSetLimit() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_FIND_CLOSEST_SET_LIMIT), Any>(); }
    static inline auto DoorFindClosestSetLimitMax(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_FIND_CLOSEST_SET_LIMIT_MAX), void>(a0, a1, a2, a3, a4); }
    static inline auto DoorFindClosestSetLimitMin(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_FIND_CLOSEST_SET_LIMIT_MIN), void>(a0, a1, a2, a3, a4); }
    static inline auto DoorGetAutoClose() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_GET_AUTO_CLOSE), Any>(); }
    static inline auto DoorGetClose() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_GET_CLOSE), Any>(); }
    static inline auto DoorGetIsAffectedByBullets(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_GET_IS_AFFECTED_BY_BULLETS), Any>(a0); }
    static inline auto DoorGetLatch() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_GET_LATCH), Any>(); }
    static inline auto DoorGetLimitMax() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_GET_LIMIT_MAX), Any>(); }
    static inline auto DoorGetLimitMin() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_GET_LIMIT_MIN), Any>(); }
    static inline auto DoorSetAutoClose() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_SET_AUTO_CLOSE), Any>(); }
    static inline auto DoorSetClose() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_SET_CLOSE), Any>(); }
    static inline auto DoorSetIsAffectedByBullets(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_SET_IS_AFFECTED_BY_BULLETS), void>(a0, a1); }
    static inline auto DoorSetLatch() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_SET_LATCH), Any>(); }
    static inline auto DoorSetLimit() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_SET_LIMIT), Any>(); }
    static inline auto DoorSetLimitMax() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_SET_LIMIT_MAX), Any>(); }
    static inline auto DoorSetLimitMin() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DOOR_SET_LIMIT_MIN), Any>(); }
    static inline auto DrawAnimatedText() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_ANIMATED_TEXT), void>(); }
    static inline auto DrawBackground(int a0, int a1, int r, int g, int b, int a) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_BACKGROUND), void>(a0, a1, r, g, b, a); }
    static inline auto DrawCheckpoint() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_CHECKPOINT), Any>(); }
    static inline auto DrawCheckpointWithAlpha() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_CHECKPOINT_WITH_ALPHA), Any>(); }
    static inline auto DrawColouredCylinder(float x, float y, float z, float a3, int r, int g, int b, int a) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_COLOURED_CYLINDER), void>(x, y, z, a3, r, g, b, a); }
    static inline auto DrawCurvedWindow(float screenX, float screenY, float width, float height, int alpha) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_CURVED_WINDOW), void>(screenX, screenY, width, height, alpha); }
    static inline auto DrawDebugBox() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_DEBUG_BOX), Any>(); }
    static inline auto DrawDebugCross() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_DEBUG_CROSS), Any>(); }
    static inline auto DrawDebugLine(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_DEBUG_LINE), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto DrawDebugLine2d() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_DEBUG_LINE_2D), Any>(); }
    static inline auto DrawDebugLine2dWithTwoColours() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_DEBUG_LINE_2D_WITH_TWO_COLOURS), Any>(); }
    static inline auto DrawDebugLineWithTwoColours() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_DEBUG_LINE_WITH_TWO_COLOURS), Any>(); }
    static inline auto DrawDebugPoly(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11, Any a12) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_DEBUG_POLY), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); }
    static inline auto DrawDebugPoly2d() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_DEBUG_POLY_2D), Any>(); }
    static inline auto DrawDebugPoly2dWithThreeColours() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_DEBUG_POLY_2D_WITH_THREE_COLOURS), Any>(); }
    static inline auto DrawDebugPolyWithThreeColours() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_DEBUG_POLY_WITH_THREE_COLOURS), Any>(); }
    static inline auto DrawDebugSphere(Vector3 coords, float radius, int r, int g, int b, int a) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_DEBUG_SPHERE), void>(coords, radius, r, g, b, a); }
    static inline auto DrawDebugText(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_DEBUG_TEXT), void>(a0, a1, a2, a3, a4, a5, a6, a7); }
    static inline auto DrawDebugText2d() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_DEBUG_TEXT_2D), Any>(); }
    static inline auto DrawDebugTextWithOffset() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_DEBUG_TEXT_WITH_OFFSET), Any>(); }
    static inline auto DrawLine() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_LINE), Any>(); }
    static inline auto DrawMovie(float x, float y, float width, float height, float a4, int r, int g, int b, int a, BOOL a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_MOVIE), void>(x, y, width, height, a4, r, g, b, a, a9); }
    static inline auto DrawPointLight(float x, float y, float z, int r, int g, int b, float a6, float a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_POINT_LIGHT), void>(x, y, z, r, g, b, a6, a7); }
    static inline auto DrawRect(float x, float y, float width, float height, int r, int g, int b, int a) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_RECT), void>(x, y, width, height, r, g, b, a); }
    static inline auto DrawSphere() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_SPHERE), Any>(); }
    static inline auto DrawSpotLight(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, int r, int g, int b, float a9, float a10, float a11, float a12, float a13, float a14, BOOL a15) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_SPOT_LIGHT), void>(posX, posY, posZ, dirX, dirY, dirZ, r, g, b, a9, a10, a11, a12, a13, a14, a15); }
    static inline auto DrawSprite(ScrHandle texture, float screenX, float screenY, float width, float height, float heading, int red, int green, int blue, int alpha) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_SPRITE), void>(texture, screenX, screenY, width, height, heading, red, green, blue, alpha); }
    static inline auto DrawVectorMapCircle() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_VECTOR_MAP_CIRCLE), Any>(); }
    static inline auto DrawVectorMapEventRipple() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_VECTOR_MAP_EVENT_RIPPLE), Any>(); }
    static inline auto DrawVectorMapLine() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_VECTOR_MAP_LINE), Any>(); }
    static inline auto DrawVectorMapLineThick() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_VECTOR_MAP_LINE_THICK), Any>(); }
    static inline auto DrawVectorMapLocalPlayerCam() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_VECTOR_MAP_LOCAL_PLAYER_CAM), Any>(); }
    static inline auto DrawVectorMapMarker() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_VECTOR_MAP_MARKER), Any>(); }
    static inline auto DrawVectorMapPed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_VECTOR_MAP_PED), Any>(); }
    static inline auto DrawVectorMapPoly() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_VECTOR_MAP_POLY), Any>(); }
    static inline auto DrawVectorMapRectangle() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_VECTOR_MAP_RECTANGLE), Any>(); }
    static inline auto DrawVectorMapText() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_VECTOR_MAP_TEXT), Any>(); }
    static inline auto DrawVectorMapVehicle() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_VECTOR_MAP_VEHICLE), Any>(); }
    static inline auto DrawVectorMapWedge() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::DRAW_VECTOR_MAP_WEDGE), Any>(); }
    static inline auto EnableAdrenaline(int index, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_ADRENALINE), void>(index, toggle); }
    static inline auto EnableAimAssist(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_AIM_ASSIST), void>(toggle); }
    static inline auto EnableAllAdrenaline(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_ALL_ADRENALINE), void>(toggle); }
    static inline auto EnableAmbientStream(const char* streamName, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_AMBIENT_STREAM), void>(streamName, toggle); }
    static inline auto EnableAmbientZone(const char* zoneName, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_AMBIENT_ZONE), void>(zoneName, toggle); }
    static inline auto EnableAmmopickup(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_AMMOPICKUP), void>(toggle); }
    static inline auto EnableAudioMissionFlag(int a0, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_AUDIO_MISSION_FLAG), void>(a0, toggle); }
    static inline auto EnableAudioMixLayer(int a0, BOOL a1, float a2, int a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_AUDIO_MIX_LAYER), void>(a0, a1, a2, a3); }
    static inline auto EnableBulletCameraWipe(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_BULLET_CAMERA_WIPE), void>(toggle); }
    static inline auto EnableBullettimemeter(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_BULLETTIMEMETER), void>(toggle); }
    static inline auto EnableCheckpointIcon() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_CHECKPOINT_ICON), void>(); }
    static inline auto EnableCoverpointmp3(const char* a0, const char* a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_COVERPOINTMP3), void>(a0, a1, a2); }
    static inline auto EnableCoverpointmp3Group(const char* a0, const char* a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_COVERPOINTMP3_GROUP), void>(a0, a1, a2); }
    static inline auto EnableCoverpointmp3GroupFromLine(Hash a0, Hash a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_COVERPOINTMP3_GROUP_FROM_LINE), void>(a0, a1, a2); }
    static inline auto EnableCrosshair(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_CROSSHAIR), void>(toggle); }
    static inline auto EnableDeathhelpertext(BOOL a0, BOOL a1, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_DEATHHELPERTEXT), void>(a0, a1, a2); }
    static inline auto EnableDirectionalShadows(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_DIRECTIONAL_SHADOWS), void>(toggle); }
    static inline auto EnableDualWieldInInventory(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_DUAL_WIELD_IN_INVENTORY), void>(toggle); }
    static inline auto EnableEquippedweapon(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_EQUIPPEDWEAPON), void>(toggle); }
    static inline auto EnableFirstTimeLock(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_FIRST_TIME_LOCK), void>(toggle); }
    static inline auto EnableGlint(int glint, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_GLINT), void>(glint, toggle); }
    static inline auto EnableGravityWell(const char* a0, const char* a1, BOOL a2, BOOL a3, BOOL a4, float a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_GRAVITY_WELL), void>(a0, a1, a2, a3, a4, a5); }
    static inline auto EnableGrenadeWarning(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_GRENADE_WARNING), void>(toggle); }
    static inline auto EnableHeartbeatRumble(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_HEARTBEAT_RUMBLE), void>(toggle); }
    static inline auto EnableHitDetection(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_HIT_DETECTION), void>(toggle); }
    static inline auto EnableInventory(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_INVENTORY), void>(toggle); }
    static inline auto EnableLastManStanding(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_LAST_MAN_STANDING), void>(toggle); }
    static inline auto EnableMpLastManStanding(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_MP_LAST_MAN_STANDING), void>(toggle); }
    static inline auto EnableMpm(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_MPM), void>(toggle); }
    static inline auto EnableNormalLine(const char* a0, const char* a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_NORMAL_LINE), void>(a0, a1, a2); }
    static inline auto EnableNormalLineByHash(Hash a0, Hash a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_NORMAL_LINE_BY_HASH), void>(a0, a1, a2); }
    static inline auto EnableOverheatIcon(BOOL toggle, const char* iconName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_OVERHEAT_ICON), void>(toggle, iconName); }
    static inline auto EnablePauseMenu(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_PAUSE_MENU), void>(toggle); }
    static inline auto EnablePedJumping(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_PED_JUMPING), void>(ped, toggle); }
    static inline auto EnablePedPain(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_PED_PAIN), void>(ped, toggle); }
    static inline auto EnablePickupAttachment(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_PICKUP_ATTACHMENT), void>(a0, a1, a2); }
    static inline auto EnablePlayerTaunt(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_PLAYER_TAUNT), void>(toggle); }
    static inline auto EnablePlayerhealth(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_PLAYERHEALTH), void>(toggle); }
    static inline auto EnableShootDodgeHighFallStairsDetection(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_SHOOT_DODGE_HIGH_FALL_STAIRS_DETECTION), void>(toggle); }
    static inline auto EnableSniperHud(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_SNIPER_HUD), void>(toggle); }
    static inline auto EnableSoftTargeting(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_SOFT_TARGETING), void>(toggle); }
    static inline auto EnableStaticEmitter(const char* emitterName, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_STATIC_EMITTER), void>(emitterName, toggle); }
    static inline auto EnableTinnitus(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_TINNITUS), void>(toggle); }
    static inline auto EnableTutorialHud(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_TUTORIAL_HUD), void>(toggle); }
    static inline auto EnableWallaZone(const char* zoneName, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_WALLA_ZONE), void>(zoneName, toggle); }
    static inline auto EnableWeaponAttachment(Weapon weapon, int attachmentIndex, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_WEAPON_ATTACHMENT), void>(weapon, attachmentIndex, toggle); }
    static inline auto EnableWeaponpickup(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ENABLE_WEAPONPICKUP), void>(toggle); }
    static inline auto EndContext(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::END_CONTEXT), void>(name); }
    static inline auto EndContextHash(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::END_CONTEXT_HASH), void>(hash); }
    static inline auto EndPostfxBlender(int a0, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::END_POSTFX_BLENDER), void>(a0, a1); }
    static inline auto ExistsScriptTunableVariableBool(const char* context, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::EXISTS_SCRIPT_TUNABLE_VARIABLE_BOOL), BOOL>(context, name); }
    static inline auto ExistsScriptTunableVariableCrcBool(Hash tunableHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::EXISTS_SCRIPT_TUNABLE_VARIABLE_CRC_BOOL), BOOL>(tunableHash); }
    static inline auto Exp(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::EXP), float>(value); }
    static inline auto ExperienceClearPointPerInjury() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::EXPERIENCE_CLEAR_POINT_PER_INJURY), void>(); }
    static inline auto ExperienceClearXpPerInjury() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::EXPERIENCE_CLEAR_XP_PER_INJURY), void>(); }
    static inline auto ExperienceSetPointPerInjury(int a0, int index, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::EXPERIENCE_SET_POINT_PER_INJURY), void>(a0, index, value); }
    static inline auto ExperienceSetXpPerInjury(int a0, int index, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::EXPERIENCE_SET_XP_PER_INJURY), void>(a0, index, value); }
    static inline auto ExplodeObject(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::EXPLODE_OBJECT), void>(object); }
    static inline auto ExplodePedHead(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::EXPLODE_PED_HEAD), void>(ped); }
    static inline auto ExplodeProjectiles(Ped ped, Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::EXPLODE_PROJECTILES), void>(ped, weaponHash); }
    static inline auto ExplodeVehicle(Vehicle vehicle, BOOL a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::EXPLODE_VEHICLE), void>(vehicle, a1, a2); }
    static inline auto ExplodeVehicleInCutscene(Vehicle vehicle, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::EXPLODE_VEHICLE_IN_CUTSCENE), void>(vehicle, a1); }
    static inline auto FinaleGrenadeExplodeOnImpact(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FINALE_GRENADE_EXPLODE_ON_IMPACT), void>(toggle); }
    static inline auto FinaleGrenadeLauncherSettings(BOOL enabled, Hash modelHash1, Hash modelHash2, Hash modelHash3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FINALE_GRENADE_LAUNCHER_SETTINGS), void>(enabled, modelHash1, modelHash2, modelHash3); }
    static inline auto FindLaser(const char* a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FIND_LASER), int>(a0); }
    static inline auto FindObjectAtPosition(const char* modelName, float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FIND_OBJECT_AT_POSITION), Object>(modelName, x, y, z, radius); }
    static inline auto Floor(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FLOOR), int>(value); }
    static inline auto FlushDiscardableMemory(int a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FLUSH_DISCARDABLE_MEMORY), void>(a0); }
    static inline auto FlushStreamMemory() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FLUSH_STREAM_MEMORY), void>(); }
    static inline auto ForceAllStreamingHelpersActive(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_ALL_STREAMING_HELPERS_ACTIVE), void>(toggle); }
    static inline auto ForceCloseNetwork() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_CLOSE_NETWORK), void>(); }
    static inline auto ForceCustomWipeBulletCamera(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_CUSTOM_WIPE_BULLET_CAMERA), void>(toggle); }
    static inline auto ForceInteractiontextVisible(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_INTERACTIONTEXT_VISIBLE), void>(toggle); }
    static inline auto ForceOpenNetwork() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_OPEN_NETWORK), void>(); }
    static inline auto ForcePausemenuOpen() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_PAUSEMENU_OPEN), void>(); }
    static inline auto ForcePedToUseDeathSuggestionWhenShot(Ped ped, BOOL a1, BOOL a2, BOOL a3, BOOL a4, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_PED_TO_USE_DEATH_SUGGESTION_WHEN_SHOT), void>(ped, a1, a2, a3, a4, a5); }
    static inline auto ForceQuickDeathCameras(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_QUICK_DEATH_CAMERAS), void>(toggle); }
    static inline auto ForceRedReticule(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_RED_RETICULE), void>(toggle); }
    static inline auto ForceRemoveAndAddObject(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_REMOVE_AND_ADD_OBJECT), void>(object); }
    static inline auto ForceSkipAttractScreen(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_SKIP_ATTRACT_SCREEN), void>(toggle); }
    static inline auto ForceSubtitles(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_SUBTITLES), void>(toggle); }
    static inline auto ForceTrainDoorOpenClose(Vehicle train, int a1, BOOL a2, BOOL a3, BOOL a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_TRAIN_DOOR_OPEN_CLOSE), void>(train, a1, a2, a3, a4); }
    static inline auto ForceUpdateObjectPhysicalState(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_UPDATE_OBJECT_PHYSICAL_STATE), void>(object); }
    static inline auto ForceWeaponLoad() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_WEAPON_LOAD), void>(); }
    static inline auto ForceWeaponScope(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FORCE_WEAPON_SCOPE), void>(toggle); }
    static inline auto FoundExplorationItem(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FOUND_EXPLORATION_ITEM), void>(name); }
    static inline auto FreeVehicleInstLightTuneData(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FREE_VEHICLE_INST_LIGHT_TUNE_DATA), void>(vehicle); }
    static inline auto FreezeCurrentPanel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FREEZE_CURRENT_PANEL), void>(); }
    static inline auto FreezeObjectPosition(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FREEZE_OBJECT_POSITION), void>(object, toggle); }
    static inline auto FreezePedPosition(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FREEZE_PED_POSITION), void>(ped, toggle); }
    static inline auto FreezePedPositionAndDontLoadCollision(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FREEZE_PED_POSITION_AND_DONT_LOAD_COLLISION), void>(ped, toggle); }
    static inline auto FreezePositionOfClosestObjectOfType(float x, float y, float z, float radius, Hash modelHash, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FREEZE_POSITION_OF_CLOSEST_OBJECT_OF_TYPE), void>(x, y, z, radius, modelHash, toggle); }
    static inline auto FreezeTimeOfDay(int hour, int minute) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FREEZE_TIME_OF_DAY), void>(hour, minute); }
    static inline auto FreezeVehiclePosition(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FREEZE_VEHICLE_POSITION), void>(vehicle, toggle); }
    static inline auto FreezeVehiclePositionAndDontLoadCollision(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::FREEZE_VEHICLE_POSITION_AND_DONT_LOAD_COLLISION), void>(vehicle, toggle); }
    static inline auto GameplayHelperBoxAngledCreate(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GAMEPLAY_HELPER_BOX_ANGLED_CREATE), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); }
    static inline auto GameplayHelperBoxAngledCreateVer2() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GAMEPLAY_HELPER_BOX_ANGLED_CREATE_VER2), Any>(); }
    static inline auto GameplayHelperBoxCreate(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GAMEPLAY_HELPER_BOX_CREATE), void>(a0, a1, a2, a3, a4, a5, a6, a7); }
    static inline auto GameplayHelperBoxCreatePedAttached(int a0, const char* name, Ped ped, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, BOOL a12, BOOL a13) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GAMEPLAY_HELPER_BOX_CREATE_PED_ATTACHED), void>(a0, name, ped, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); }
    static inline auto GameplayHelperBoxCreateVehicleAttached(int a0, const char* boxName, Vehicle vehicle, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, BOOL a12, BOOL a13) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GAMEPLAY_HELPER_BOX_CREATE_VEHICLE_ATTACHED), void>(a0, boxName, vehicle, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); }
    static inline auto GameplayHelperBoxDestroy(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GAMEPLAY_HELPER_BOX_DESTROY), void>(a0); }
    static inline auto GameplayHelperBoxSetEnabled(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GAMEPLAY_HELPER_BOX_SET_ENABLED), void>(a0, a1); }
    static inline auto GameplayHelperCylinderCreate(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GAMEPLAY_HELPER_CYLINDER_CREATE), void>(a0, a1, a2, a3, a4, a5, a6); }
    static inline auto GameplayHelperCylinderCreatePedAttached(int a0, const char* name, Ped ped, float a3, float a4, float a5, float a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GAMEPLAY_HELPER_CYLINDER_CREATE_PED_ATTACHED), void>(a0, name, ped, a3, a4, a5, a6); }
    static inline auto GameplayHelperVolumeDestroy(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GAMEPLAY_HELPER_VOLUME_DESTROY), void>(a0); }
    static inline auto GameplayHelperVolumeSetEnabled() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GAMEPLAY_HELPER_VOLUME_SET_ENABLED), Any>(); }
    static inline auto GenerateObjectCrushImminentEvent(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GENERATE_OBJECT_CRUSH_IMMINENT_EVENT), void>(object); }
    static inline auto GetAchievementHash(int a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_ACHIEVEMENT_HASH), Hash>(a0); }
    static inline auto GetActiontreeInfo(const char* name, int bufferSize1, char* buffer1, int bufferSize2, char* buffer2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_ACTIONTREE_INFO), void>(name, bufferSize1, buffer1, bufferSize2, buffer2); }
    static inline auto GetAdrenalineAmt() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_ADRENALINE_AMT), float>(); }
    static inline auto GetAimCamZoolLevel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_AIM_CAM_ZOOL_LEVEL), int>(); }
    static inline auto GetAllowedToFailCoverForBlockingLineOfFire() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_ALLOWED_TO_FAIL_COVER_FOR_BLOCKING_LINE_OF_FIRE), BOOL>(); }
    static inline auto GetAmmoInClip(Ped ped, Hash weaponHash, int* ammo) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_AMMO_IN_CLIP), BOOL>(ped, weaponHash, ammo); }
    static inline auto GetAmmoInPedWeapon(Ped ped, Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_AMMO_IN_PED_WEAPON), int>(ped, weaponHash); }
    static inline auto GetAngleBetween2dVectors(float x1, float y1, float x2, float y2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_ANGLE_BETWEEN_2D_VECTORS), float>(x1, y1, x2, y2); }
    static inline auto GetAnimatedTextHeight() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_ANIMATED_TEXT_HEIGHT), float>(); }
    static inline auto GetAnimatedTextWidth() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_ANIMATED_TEXT_WIDTH), float>(); }
    static inline auto GetBestHeadingIfPossible(float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BEST_HEADING_IF_POSSIBLE), float>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto GetBgScriptLeaderboardName(int index, int bufferSize, char* buffer) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BG_SCRIPT_LEADERBOARD_NAME), BOOL>(index, bufferSize, buffer); }
    static inline auto GetBgScriptUnit(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BG_SCRIPT_UNIT), int>(index); }
    static inline auto GetBgTextureForBgScript(Any a0, Any* a1, Any* a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BG_TEXTURE_FOR_BG_SCRIPT), void>(a0, a1, a2); }
    static inline auto GetBitsInRange(int data, int rangeStart, int rangeEnd) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BITS_IN_RANGE), int>(data, rangeStart, rangeEnd); }
    static inline auto GetBlipAlpha(Blip blip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BLIP_ALPHA), int>(blip); }
    static inline auto GetBlipColour(Blip blip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BLIP_COLOUR), int>(blip); }
    static inline auto GetBlipCoords(Blip blip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BLIP_COORDS), Vector3>(blip); }
    static inline auto GetBlipInfoIdCoord(Blip blip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BLIP_INFO_ID_COORD), Vector3>(blip); }
    static inline auto GetBlipInfoIdDisplay(Blip blip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BLIP_INFO_ID_DISPLAY), int>(blip); }
    static inline auto GetBlipInfoIdObjectIndex(Blip blip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BLIP_INFO_ID_OBJECT_INDEX), Object>(blip); }
    static inline auto GetBlipInfoIdPedIndex(Blip blip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BLIP_INFO_ID_PED_INDEX), Ped>(blip); }
    static inline auto GetBlipInfoIdPickupIndex(Blip blip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BLIP_INFO_ID_PICKUP_INDEX), Pickup>(blip); }
    static inline auto GetBlipInfoIdType(Blip blip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BLIP_INFO_ID_TYPE), int>(blip); }
    static inline auto GetBlipInfoIdVehicleIndex(Blip blip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BLIP_INFO_ID_VEHICLE_INDEX), Vehicle>(blip); }
    static inline auto GetBlipSprite(Blip blip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BLIP_SPRITE), int>(blip); }
    static inline auto GetBlockingOfNonTemporaryEvents(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BLOCKING_OF_NON_TEMPORARY_EVENTS), BOOL>(ped); }
    static inline auto GetBlockingOfPedTargetting(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BLOCKING_OF_PED_TARGETTING), BOOL>(ped); }
    static inline auto GetBoolFromXmlNodeAttribute(int attributeIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BOOL_FROM_XML_NODE_ATTRIBUTE), BOOL>(attributeIndex); }
    static inline auto GetBulletCamPref(Ped ped, int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BULLET_CAM_PREF), Any>(ped, index); }
    static inline auto GetBulletCameraMarker(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BULLET_CAMERA_MARKER), Any>(a0); }
    static inline auto GetBulletCameraSceneStart(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BULLET_CAMERA_SCENE_START), Any>(a0); }
    static inline auto GetBulletImpactArea(float x, float y, float z, float radius, Ped* outPed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BULLET_IMPACT_AREA), Vector3>(x, y, z, radius, outPed); }
    static inline auto GetBulletTimeCount() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BULLET_TIME_COUNT), int>(); }
    static inline auto GetBulletTimeTeamCount() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_BULLET_TIME_TEAM_COUNT), int>(); }
    static inline auto GetCamCoord(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CAM_COORD), Vector3>(cam); }
    static inline auto GetCamDofStrength(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CAM_DOF_STRENGTH), float>(cam); }
    static inline auto GetCamFarClip(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CAM_FAR_CLIP), float>(cam); }
    static inline auto GetCamFarDof(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CAM_FAR_DOF), float>(cam); }
    static inline auto GetCamFov(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CAM_FOV), float>(cam); }
    static inline auto GetCamMotionBlurStrength(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CAM_MOTION_BLUR_STRENGTH), float>(cam); }
    static inline auto GetCamNearClip(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CAM_NEAR_CLIP), float>(cam); }
    static inline auto GetCamNearDof(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CAM_NEAR_DOF), float>(cam); }
    static inline auto GetCamRot(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CAM_ROT), Vector3>(cam); }
    static inline auto GetCamViewMode() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CAM_VIEW_MODE), int>(); }
    static inline auto GetCanPedCanSlowDownWhenTurning(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CAN_PED_CAN_SLOW_DOWN_WHEN_TURNING), BOOL>(ped); }
    static inline auto GetCanPedPlayLocoFlavorStarts(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CAN_PED_PLAY_LOCO_FLAVOR_STARTS), BOOL>(ped); }
    static inline auto GetCentreBlipId() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CENTRE_BLIP_ID), Blip>(); }
    static inline auto GetChallengeFailedState(int challengeId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CHALLENGE_FAILED_STATE), BOOL>(challengeId); }
    static inline auto GetChallengeProgress(int challengeId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CHALLENGE_PROGRESS), int>(challengeId); }
    static inline auto GetCheckHashFromConversationId(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CHECK_HASH_FROM_CONVERSATION_ID), Any>(a0); }
    static inline auto GetCheckpointSelected() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CHECKPOINT_SELECTED), int>(); }
    static inline auto GetClosestEnemyPed(Ped ped, float a1, float a2, float a3, float a4, BOOL a5, BOOL a6, BOOL a7, BOOL a8, BOOL a9, BOOL a10, Ped* outPed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CLOSEST_ENEMY_PED), BOOL>(ped, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, outPed); }
    static inline auto GetClosestMajorVehicleNode(float x, float y, float z, Vector3* coords) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CLOSEST_MAJOR_VEHICLE_NODE), BOOL>(x, y, z, coords); }
    static inline auto GetClosestNetworkRestartNode(float x, float y, float z, Vector3* coords, float* heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CLOSEST_NETWORK_RESTART_NODE), BOOL>(x, y, z, coords, heading); }
    static inline auto GetClosestPed(float x, float y, float z, float radius, BOOL a4, BOOL a5, Ped* outPed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CLOSEST_PED), BOOL>(x, y, z, radius, a4, a5, outPed); }
    static inline auto GetClosestRoad(float x, float y, float z, float a3, Any a4, Vector3* a5, Vector3* a6, Any* a7, Any* a8, Any* a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CLOSEST_ROAD), BOOL>(x, y, z, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto GetClosestVehicle(float x, float y, float z, float radius, Hash modelHash, int flags) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CLOSEST_VEHICLE), Vehicle>(x, y, z, radius, modelHash, flags); }
    static inline auto GetClosestVehicleNode(float x, float y, float z, Vector3* coords) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CLOSEST_VEHICLE_NODE), BOOL>(x, y, z, coords); }
    static inline auto GetClosestVehicleNodeWithHeading(float x, float y, float z, Vector3* coords, float* heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING), BOOL>(x, y, z, coords, heading); }
    static inline auto GetCompletedGrindGoal(int grindId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_COMPLETED_GRIND_GOAL), int>(grindId); }
    static inline auto GetContentsOfComboWidgetSelection(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CONTENTS_OF_COMBO_WIDGET_SELECTION), void>(a0, a1, a2); }
    static inline auto GetContentsOfTextWidget(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CONTENTS_OF_TEXT_WIDGET), void>(a0, a1, a2); }
    static inline auto GetCoordsForNetworkRestartNode(int nodeId, Vector3* coords, float* heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_COORDS_FOR_NETWORK_RESTART_NODE), void>(nodeId, coords, heading); }
    static inline auto GetCorpseCoords(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CORPSE_COORDS), Vector3>(ped); }
    static inline auto GetCorrectedColour(int r, int g, int b, int* correctedR, int* correctedG, int* correctedB) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CORRECTED_COLOUR), void>(r, g, b, correctedR, correctedG, correctedB); }
    static inline auto GetCurrentArcadeMode() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_ARCADE_MODE), int>(); }
    static inline auto GetCurrentBasicCopModel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_BASIC_COP_MODEL), Hash>(); }
    static inline auto GetCurrentBasicPoliceVehicleModel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_BASIC_POLICE_VEHICLE_MODEL), Hash>(); }
    static inline auto GetCurrentControlConfig() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_CONTROL_CONFIG), Any>(); }
    static inline auto GetCurrentCopModel(Hash* modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_COP_MODEL), void>(modelHash); }
    static inline auto GetCurrentDate(int* day, int* month) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_DATE), void>(day, month); }
    static inline auto GetCurrentDayOfWeek() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_DAY_OF_WEEK), int>(); }
    static inline auto GetCurrentFps() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_FPS), float>(); }
    static inline auto GetCurrentLanguage() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_LANGUAGE), int>(); }
    static inline auto GetCurrentLevelFinish() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_LEVEL_FINISH), int>(); }
    static inline auto GetCurrentLevelName(int bufferSize, char* buffer) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_LEVEL_NAME), void>(bufferSize, buffer); }
    static inline auto GetCurrentLevelStart() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_LEVEL_START), int>(); }
    static inline auto GetCurrentLoadoutSlot() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_LOADOUT_SLOT), int>(); }
    static inline auto GetCurrentPedWeapon(Ped ped, Hash* weaponHash, int handType) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_PED_WEAPON), BOOL>(ped, weaponHash, handType); }
    static inline auto GetCurrentPlaybackNumberForPed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_PLAYBACK_NUMBER_FOR_PED), int>(ped); }
    static inline auto GetCurrentPlaybackNumberForVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_PLAYBACK_NUMBER_FOR_VEHICLE), int>(vehicle); }
    static inline auto GetCurrentPoliceVehicleModel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_POLICE_VEHICLE_MODEL), Hash>(); }
    static inline auto GetCurrentScriptedConversationLine() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_SCRIPTED_CONVERSATION_LINE), Any>(); }
    static inline auto GetCurrentStationForTrain(Vehicle train) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_STATION_FOR_TRAIN), int>(train); }
    static inline auto GetCurrentTaxiVehicleModel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CURRENT_TAXI_VEHICLE_MODEL), Hash>(); }
    static inline auto GetCustomPlayerVariation() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CUSTOM_PLAYER_VARIATION), int>(); }
    static inline auto GetCutsceneAudioTimeMs() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CUTSCENE_AUDIO_TIME_MS), int>(); }
    static inline auto GetCutsceneCaptureRequest(int bufferSize, char* buffer) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CUTSCENE_CAPTURE_REQUEST), BOOL>(bufferSize, buffer); }
    static inline auto GetCutscenePedCoord(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CUTSCENE_PED_COORD), Vector3>(a0); }
    static inline auto GetCutsceneSectionPlaying() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CUTSCENE_SECTION_PLAYING), int>(); }
    static inline auto GetCutsceneTime() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CUTSCENE_TIME), int>(); }
    static inline auto GetCutsceneTimeMs() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_CUTSCENE_TIME_MS), int>(); }
    static inline auto GetDeadPedCoords(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_DEAD_PED_COORDS), Vector3>(ped); }
    static inline auto GetDeadPedPickupCoords(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_DEAD_PED_PICKUP_COORDS), Vector3>(ped); }
    static inline auto GetDeadVehicleCoords(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_DEAD_VEHICLE_COORDS), Vector3>(vehicle); }
    static inline auto GetDebugCam() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_DEBUG_CAM), Cam>(); }
    static inline auto GetDifferenceInDaysBetweenDates(int* a0, int* a1, int* a2, int* a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_DIFFERENCE_IN_DAYS_BETWEEN_DATES), int>(a0, a1, a2, a3); }
    static inline auto GetDisplayNameFromVehicleModel(int bufferSize, char* buffer, Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL), void>(bufferSize, buffer, modelHash); }
    static inline auto GetDistanceBetweenCoords(float x1, float y1, float z1, float x2, float y2, float z2, BOOL useZ) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_DISTANCE_BETWEEN_COORDS), float>(x1, y1, z1, x2, y2, z2, useZ); }
    static inline auto GetDoesWeaponExist(Weapon weapon) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_DOES_WEAPON_EXIST), BOOL>(weapon); }
    static inline auto GetExistsInPlayerSave(const char* unlockSemantic) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_EXISTS_IN_PLAYER_SAVE), BOOL>(unlockSemantic); }
    static inline auto GetExperienceForRank(int rank) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_EXPERIENCE_FOR_RANK), int>(rank); }
    static inline auto GetExperienceMaxRank() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_EXPERIENCE_MAX_RANK), int>(); }
    static inline auto GetFirstBlipInfoId(int sprite) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_FIRST_BLIP_INFO_ID), Blip>(sprite); }
    static inline auto GetFirstIndexOf(const char* str, const char* substr) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_FIRST_INDEX_OF), int>(str, substr); }
    static inline auto GetFloatFromXmlNodeAttribute(int attributeIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_FLOAT_FROM_XML_NODE_ATTRIBUTE), float>(attributeIndex); }
    static inline auto GetFollowPedCamZoomLevel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_FOLLOW_PED_CAM_ZOOM_LEVEL), int>(); }
    static inline auto GetFollowVehicleCamZoomLevel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL), int>(); }
    static inline auto GetFrameTime() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_FRAME_TIME), float>(); }
    static inline auto GetFrontendStateName(int bufferSize, char* buffer) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_FRONTEND_STATE_NAME), Hash>(bufferSize, buffer); }
    static inline auto GetGameDifficulty() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GAME_DIFFICULTY), int>(); }
    static inline auto GetGameIdleTimer() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GAME_IDLE_TIMER), int>(); }
    static inline auto GetGameTextureDict(const char* dictName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GAME_TEXTURE_DICT), ScrHandle>(dictName); }
    static inline auto GetGameTimer() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GAME_TIMER), int>(); }
    static inline auto GetGameplayCamCoord() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GAMEPLAY_CAM_COORD), Vector3>(); }
    static inline auto GetGameplayCamFov() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GAMEPLAY_CAM_FOV), float>(); }
    static inline auto GetGameplayCamRelativeHeading() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GAMEPLAY_CAM_RELATIVE_HEADING), float>(); }
    static inline auto GetGameplayCamRelativePitch() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GAMEPLAY_CAM_RELATIVE_PITCH), float>(); }
    static inline auto GetGameplayCamRot() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GAMEPLAY_CAM_ROT), Vector3>(); }
    static inline auto GetGameplayHelperBoxCoord(const char* boxName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GAMEPLAY_HELPER_BOX_COORD), Vector3>(boxName); }
    static inline auto GetGameplayHelperCylinderHeight() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GAMEPLAY_HELPER_CYLINDER_HEIGHT), Any>(); }
    static inline auto GetGameplayHelperCylinderRadius() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GAMEPLAY_HELPER_CYLINDER_RADIUS), Any>(); }
    static inline auto GetGameplayHelperVolumeCoord(const char* volumeName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GAMEPLAY_HELPER_VOLUME_COORD), Vector3>(volumeName); }
    static inline auto GetGrindGoal(int grindId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GRIND_GOAL), int>(grindId); }
    static inline auto GetGrindLevel(int grindId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GRIND_LEVEL), int>(grindId); }
    static inline auto GetGrindProgress(int grindId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GRIND_PROGRESS), int>(grindId); }
    static inline auto GetGroundZFor3dCoord(float x, float y, float z, float* groundZ) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GROUND_Z_FOR_3D_COORD), BOOL>(x, y, z, groundZ); }
    static inline auto GetGroupSize(Group group) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_GROUP_SIZE), int>(group); }
    static inline auto GetHashKey(const char* value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_HASH_KEY), Hash>(value); }
    static inline auto GetHeadingFromVector2d(float dx, float dy) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_HEADING_FROM_VECTOR_2D), float>(dx, dy); }
    static inline auto GetHeightOfVehicle(Vehicle vehicle, float x, float y, float z, BOOL a4, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_HEIGHT_OF_VEHICLE), float>(vehicle, x, y, z, a4, a5); }
    static inline auto GetHelpMessageBoxSize() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_HELP_MESSAGE_BOX_SIZE), Any>(); }
    static inline auto GetHoursOfDay() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_HOURS_OF_DAY), int>(); }
    static inline auto GetHudColour(int hudColorIndex, int* r, int* g, int* b, int* a) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_HUD_COLOUR), void>(hudColorIndex, r, g, b, a); }
    static inline auto GetIconTextureDictionaryForBgScript(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_ICON_TEXTURE_DICTIONARY_FOR_BG_SCRIPT), Any>(a0); }
    static inline auto GetIconTextureForBgScript(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_ICON_TEXTURE_FOR_BG_SCRIPT), Any>(a0); }
    static inline auto GetIdOfThisThread() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_ID_OF_THIS_THREAD), int>(); }
    static inline auto GetIndexOfCurrentLevel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_INDEX_OF_CURRENT_LEVEL), int>(); }
    static inline auto GetInfoAboutNearbyEntityWithSpecialAttribute(int index, Vector3* coords, float* a2, BOOL* a3, Hash* modelHash, float* a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_INFO_ABOUT_NEARBY_ENTITY_WITH_SPECIAL_ATTRIBUTE), BOOL>(index, coords, a2, a3, modelHash, a5); }
    static inline auto GetIntFromXmlNodeAttribute(int attributeIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_INT_FROM_XML_NODE_ATTRIBUTE), int>(attributeIndex); }
    static inline auto GetInteractionVolumePos(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_INTERACTION_VOLUME_POS), Any>(a0, a1); }
    static inline auto GetInteriorAtCoords(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_INTERIOR_AT_COORDS), Interior>(x, y, z); }
    static inline auto GetInteriorFromName(const char* name, int numAttempts) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_INTERIOR_FROM_NAME), Interior>(name, numAttempts); }
    static inline auto GetInteriorFromPed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_INTERIOR_FROM_PED), Interior>(ped); }
    static inline auto GetInteriorFromVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_INTERIOR_FROM_VEHICLE), Interior>(vehicle); }
    static inline auto GetInteriorHeading() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_INTERIOR_HEADING), Any>(); }
    static inline auto GetIsDetonatorFired(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_IS_DETONATOR_FIRED), BOOL>(ped); }
    static inline auto GetIsHidef() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_IS_HIDEF), BOOL>(); }
    static inline auto GetIsPedForcedToRun(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_IS_PED_FORCED_TO_RUN), BOOL>(ped); }
    static inline auto GetIsPedForcedToWalk(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_IS_PED_FORCED_TO_WALK), BOOL>(ped); }
    static inline auto GetIsPedListeningToPed(Ped ped, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_IS_PED_LISTENING_TO_PED), float>(ped, ped2); }
    static inline auto GetIsPedPhotographingCoord(Ped ped, float x, float y, float z, float a4, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_IS_PED_PHOTOGRAPHING_COORD), BOOL>(ped, x, y, z, a4, a5); }
    static inline auto GetIsPlayerInAir(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_IS_PLAYER_IN_AIR), BOOL>(player); }
    static inline auto GetIsPlayerInBulletTime(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_IS_PLAYER_IN_BULLET_TIME), BOOL>(player); }
    static inline auto GetIsPlayerInLastStand(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_IS_PLAYER_IN_LAST_STAND), BOOL>(player); }
    static inline auto GetIsPlayerShootDodging(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_IS_PLAYER_SHOOT_DODGING), BOOL>(player); }
    static inline auto GetIsUnlocked(const char* unlockSemantic) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_IS_UNLOCKED), BOOL>(unlockSemantic); }
    static inline auto GetIsWidescreen() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_IS_WIDESCREEN), BOOL>(); }
    static inline auto GetKeyForPedInRoom(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_KEY_FOR_PED_IN_ROOM), Hash>(ped); }
    static inline auto GetKeyForVehicleInRoom(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_KEY_FOR_VEHICLE_IN_ROOM), Hash>(vehicle); }
    static inline auto GetLaserSightAttachment(Weapon weapon) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LASER_SIGHT_ATTACHMENT), Hash>(weapon); }
    static inline auto GetLastLevelPlayed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LAST_LEVEL_PLAYED), int>(); }
    static inline auto GetLastShotByPlayer(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LAST_SHOT_BY_PLAYER), Any>(a0); }
    static inline auto GetLastShotToPlayer(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LAST_SHOT_TO_PLAYER), Any>(a0); }
    static inline auto GetLaunchParamValue(int a0, const char* paramName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LAUNCH_PARAM_VALUE), int>(a0, paramName); }
    static inline auto GetLaunchScript(int bufferSize, char* buffer) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LAUNCH_SCRIPT), void>(bufferSize, buffer); }
    static inline auto GetLengthOfLiteralString(const char* literalString) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LENGTH_OF_LITERAL_STRING), int>(literalString); }
    static inline auto GetLengthOfStringWithThisTextLabel(const char* textLabel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL), int>(textLabel); }
    static inline auto GetLevelCompletion() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LEVEL_COMPLETION), int>(); }
    static inline auto GetLoadoutSlotName(int bufferSize, char* buffer, int slot) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LOADOUT_SLOT_NAME), void>(bufferSize, buffer, slot); }
    static inline auto GetLocalPlayerAgility() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LOCAL_PLAYER_AGILITY), int>(); }
    static inline auto GetLocalPlayerLegendLevel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LOCAL_PLAYER_LEGEND_LEVEL), int>(); }
    static inline auto GetLocalPlayerSprintMeter(float* outValue) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LOCAL_PLAYER_SPRINT_METER), BOOL>(outValue); }
    static inline auto GetLocalPlayerXp() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LOCAL_PLAYER_XP), int>(); }
    static inline auto GetLocalisedString(int bufferSize, char* buffer, const char* textLabel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LOCALISED_STRING), void>(bufferSize, buffer, textLabel); }
    static inline auto GetLowestUsedGameDifficulty() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_LOWEST_USED_GAME_DIFFICULTY), int>(); }
    static inline auto GetMapAreaFromCoords(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_MAP_AREA_FROM_COORDS), int>(x, y, z); }
    static inline auto GetMaxAmmo(Ped ped, Hash weaponHash, int* ammo) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_MAX_AMMO), BOOL>(ped, weaponHash, ammo); }
    static inline auto GetMaxAmmoInClip(Ped ped, Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_MAX_AMMO_IN_CLIP), int>(ped, weaponHash); }
    static inline auto GetMaxAmmoInHandClipMp(Ped ped, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_MAX_AMMO_IN_HAND_CLIP_MP), int>(ped, a1); }
    static inline auto GetMaxWantedLevel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_MAX_WANTED_LEVEL), int>(); }
    static inline auto GetMeleeGrappleFailCheckOn(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_MELEE_GRAPPLE_FAIL_CHECK_ON), BOOL>(ped); }
    static inline auto GetMinutesOfDay() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_MINUTES_OF_DAY), int>(); }
    static inline auto GetMinutesToTimeOfDay(int hour, int minute) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_MINUTES_TO_TIME_OF_DAY), int>(hour, minute); }
    static inline auto GetMissionFlag() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_MISSION_FLAG), BOOL>(); }
    static inline auto GetMobilePhoneTaskSubTask(Ped ped, int* subtask) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_MOBILE_PHONE_TASK_SUB_TASK), BOOL>(ped, subtask); }
    static inline auto GetModelDimensions(Hash modelHash, Vector3* minimum, Vector3* maximum) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_MODEL_DIMENSIONS), void>(modelHash, minimum, maximum); }
    static inline auto GetModelName(int bufferSize, char* buffer, Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_MODEL_NAME), void>(bufferSize, buffer, modelHash); }
    static inline auto GetMotionControlPreference() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_MOTION_CONTROL_PREFERENCE), Any>(); }
    static inline auto GetNameOfCurrentLevel(int bufferSize, char* buffer) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NAME_OF_CURRENT_LEVEL), BOOL>(bufferSize, buffer); }
    static inline auto GetNameOfInfoZone(int bufferSize, char* buffer, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NAME_OF_INFO_ZONE), void>(bufferSize, buffer, x, y, z); }
    static inline auto GetNameOfScriptToAutomaticallyStart(int bufferSize, char* buffer) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NAME_OF_SCRIPT_TO_AUTOMATICALLY_START), void>(bufferSize, buffer); }
    static inline auto GetNameOfZone(int bufferSize, char* buffer, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NAME_OF_ZONE), void>(bufferSize, buffer, x, y, z); }
    static inline auto GetNavmeshRouteDistanceRemaining(Ped ped, float* a1, BOOL* a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NAVMESH_ROUTE_DISTANCE_REMAINING), int>(ped, a1, a2); }
    static inline auto GetNearbyObjectWithSpecialAttribute(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NEARBY_OBJECT_WITH_SPECIAL_ATTRIBUTE), Object>(index); }
    static inline auto GetNearestCableCar(float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NEAREST_CABLE_CAR), Vehicle>(x, y, z, radius); }
    static inline auto GetNearestCollectableBinBags(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NEAREST_COLLECTABLE_BIN_BAGS), void>(x, y, z); }
    static inline auto GetNetworkPlayerXp(Player player, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NETWORK_PLAYER_XP), int>(player, a1); }
    static inline auto GetNetworkRestartNodeDebug() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NETWORK_RESTART_NODE_DEBUG), Any>(); }
    static inline auto GetNetworkTimer() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NETWORK_TIMER), float>(); }
    static inline auto GetNextBlipInfoId(int sprite) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NEXT_BLIP_INFO_ID), Blip>(sprite); }
    static inline auto GetNextClosestVehicleNodeWithHeadingOnIsland(float x, float y, float z, int a3, Vector3* coords, float* heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NEXT_CLOSEST_VEHICLE_NODE_WITH_HEADING_ON_ISLAND), BOOL>(x, y, z, a3, coords, heading); }
    static inline auto GetNextStationForTrain(Vehicle train) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NEXT_STATION_FOR_TRAIN), int>(train); }
    static inline auto GetNextXmlNode() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NEXT_XML_NODE), void>(); }
    static inline auto GetNthClosestVehicleNode(float x, float y, float z, int n, Vector3* coords) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NTH_CLOSEST_VEHICLE_NODE), BOOL>(x, y, z, n, coords); }
    static inline auto GetNthClosestVehicleNodeFavourDirection(float x1, float y1, float z1, float x2, float y2, float z2, int n, Vector3* coords, float* heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION), BOOL>(x1, y1, z1, x2, y2, z2, n, coords, heading); }
    static inline auto GetNthClosestVehicleNodeWithHeading(float x, float y, float z, int n, Vector3* coords, float* heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING), BOOL>(x, y, z, n, coords, heading); }
    static inline auto GetNthClosestVehicleNodeWithHeadingOnIsland(float x, float y, float z, int n, Vector3* coords, float* heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING_ON_ISLAND), BOOL>(x, y, z, n, coords, heading); }
    static inline auto GetNthIntegerInString(const char* textLabel, int n) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NTH_INTEGER_IN_STRING), int>(textLabel, n); }
    static inline auto GetNumLoadoutSlots() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NUM_LOADOUT_SLOTS), int>(); }
    static inline auto GetNumberLinesWithSubstrings() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NUMBER_LINES_WITH_SUBSTRINGS), Any>(); }
    static inline auto GetNumberOfFiresInRange(float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NUMBER_OF_FIRES_IN_RANGE), int>(x, y, z, radius); }
    static inline auto GetNumberOfPedDrawableVariations(Ped ped, int componentId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS), int>(ped, componentId); }
    static inline auto GetNumberOfPedTextureVariations(Ped ped, int componentId, int drawableIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NUMBER_OF_PED_TEXTURE_VARIATIONS), int>(ped, componentId, drawableIndex); }
    static inline auto GetNumberOfPickupsAndPlacementsOfType() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NUMBER_OF_PICKUPS_AND_PLACEMENTS_OF_TYPE), Any>(); }
    static inline auto GetNumberOfPlayers() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NUMBER_OF_PLAYERS), int>(); }
    static inline auto GetNumberOfPlayersInTeam(int team) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NUMBER_OF_PLAYERS_IN_TEAM), int>(team); }
    static inline auto GetNumberOfStreamingRequests() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NUMBER_OF_STREAMING_REQUESTS), int>(); }
    static inline auto GetNumberOfThreadsRunningThisScript(const char* scriptName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NUMBER_OF_THREADS_RUNNING_THIS_SCRIPT), int>(scriptName); }
    static inline auto GetNumberOfVehicleColours(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NUMBER_OF_VEHICLE_COLOURS), int>(vehicle); }
    static inline auto GetNumberOfXmlNodeAttributes() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NUMBER_OF_XML_NODE_ATTRIBUTES), int>(); }
    static inline auto GetNumberOfXmlNodes() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_NUMBER_OF_XML_NODES), int>(); }
    static inline auto GetObjectAnimCurrentTime(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_ANIM_CURRENT_TIME), Any>(a0, a1, a2); }
    static inline auto GetObjectBoneCoords(Object object, int boneId, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_BONE_COORDS), Vector3>(object, boneId, a2); }
    static inline auto GetObjectBoneIndex(Object object, const char* boneName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_BONE_INDEX), int>(object, boneName); }
    static inline auto GetObjectBoneOrientation(Object object, int boneId, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_BONE_ORIENTATION), Vector3>(object, boneId, a2); }
    static inline auto GetObjectCanTriggerBulletCam(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_CAN_TRIGGER_BULLET_CAM), BOOL>(object); }
    static inline auto GetObjectCoords(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_COORDS), Vector3>(object); }
    static inline auto GetObjectFragmentDamageHealth(Object object, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_FRAGMENT_DAMAGE_HEALTH), float>(object, a1); }
    static inline auto GetObjectHeading(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_HEADING), float>(object); }
    static inline auto GetObjectHealth(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_HEALTH), float>(object); }
    static inline auto GetObjectMass(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_MASS), float>(object); }
    static inline auto GetObjectMatrix(Object object, Vector3* rightVector, Vector3* forwardVector, Vector3* upVector, Vector3* position) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_MATRIX), void>(object, rightVector, forwardVector, upVector, position); }
    static inline auto GetObjectMatrixVector(Object object, const char* axisName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_MATRIX_VECTOR), Vector3>(object, axisName); }
    static inline auto GetObjectModel(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_MODEL), Hash>(object); }
    static inline auto GetObjectPlayerWillPickup(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_PLAYER_WILL_PICKUP), Object>(player); }
    static inline auto GetObjectQuaternion(Object object, float* x, float* y, float* z, float* w) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_QUATERNION), void>(object, x, y, z, w); }
    static inline auto GetObjectReflects(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_REFLECTS), BOOL>(object); }
    static inline auto GetObjectRotation(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_ROTATION), Vector3>(object); }
    static inline auto GetObjectRotationVelocity(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_ROTATION_VELOCITY), Vector3>(object); }
    static inline auto GetObjectSpeed(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_SPEED), float>(object); }
    static inline auto GetObjectVelocity(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OBJECT_VELOCITY), Vector3>(object); }
    static inline auto GetOffsetFromInteriorInWorldCoords() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS), Any>(); }
    static inline auto GetOffsetFromObjectInWorldCoords(Object object, float offsetX, float offsetY, float offsetZ) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OFFSET_FROM_OBJECT_IN_WORLD_COORDS), Vector3>(object, offsetX, offsetY, offsetZ); }
    static inline auto GetOffsetFromPedInWorldCoords(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OFFSET_FROM_PED_IN_WORLD_COORDS), Vector3>(ped, x, y, z); }
    static inline auto GetOffsetFromVehicleGivenWorldCoords(Vehicle vehicle, float offsetX, float offsetY, float offsetZ) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OFFSET_FROM_VEHICLE_GIVEN_WORLD_COORDS), Vector3>(vehicle, offsetX, offsetY, offsetZ); }
    static inline auto GetOffsetFromVehicleInWorldCoords(Vehicle vehicle, float offsetX, float offsetY, float offsetZ) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_OFFSET_FROM_VEHICLE_IN_WORLD_COORDS), Vector3>(vehicle, offsetX, offsetY, offsetZ); }
    static inline auto GetPadPitchRoll(int padIndex, Any* a1, Any* a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PAD_PITCH_ROLL), BOOL>(padIndex, a1, a2); }
    static inline auto GetPatrolTaskInfo(Ped ped, Any* a1, Any* a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PATROL_TASK_INFO), BOOL>(ped, a1, a2); }
    static inline auto GetPaynekillerAmt() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PAYNEKILLER_AMT), int>(); }
    static inline auto GetPedAlertness(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_ALERTNESS), int>(ped); }
    static inline auto GetPedAnimCurrentTime(Ped ped, const char* animDict, const char* animName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_ANIM_CURRENT_TIME), float>(ped, animDict, animName); }
    static inline auto GetPedAnimGroup(int bufferSize, char* buffer, Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_ANIM_GROUP), void>(bufferSize, buffer, ped); }
    static inline auto GetPedAnimTotalTime(Ped ped, const char* animDict, const char* animName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_ANIM_TOTAL_TIME), float>(ped, animDict, animName); }
    static inline auto GetPedArmour(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_ARMOUR), int>(ped); }
    static inline auto GetPedAsGroupLeader(Group group) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_AS_GROUP_LEADER), Ped>(group); }
    static inline auto GetPedAsGroupMember(Group group, int memberIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_AS_GROUP_MEMBER), Ped>(group, memberIndex); }
    static inline auto GetPedAwarenessState(Ped ped, Ped targetPed, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_AWARENESS_STATE), BOOL>(ped, targetPed, a2); }
    static inline auto GetPedBodyPartDamage(Ped ped, int bodyPartId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_BODY_PART_DAMAGE), int>(ped, bodyPartId); }
    static inline auto GetPedBoneCoords(Ped ped, int boneId, float offsetX, float offsetY, float offsetZ) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_BONE_COORDS), Vector3>(ped, boneId, offsetX, offsetY, offsetZ); }
    static inline auto GetPedBullettimeStatus(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_BULLETTIME_STATUS), int>(ped); }
    static inline auto GetPedCanInitiateBulletCam(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_CAN_INITIATE_BULLET_CAM), BOOL>(ped); }
    static inline auto GetPedCanTriggerBulletCam(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_CAN_TRIGGER_BULLET_CAM), BOOL>(ped); }
    static inline auto GetPedCombatAbility(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_COMBAT_ABILITY), int>(ped); }
    static inline auto GetPedCombatMovement(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_COMBAT_MOVEMENT), int>(ped); }
    static inline auto GetPedCombatRangeHalfHeight(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_COMBAT_RANGE_HALF_HEIGHT), float>(ped); }
    static inline auto GetPedCombatRangeMax(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_COMBAT_RANGE_MAX), float>(ped); }
    static inline auto GetPedCombatRangeMin(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_COMBAT_RANGE_MIN), float>(ped); }
    static inline auto GetPedCoords(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_COORDS), Vector3>(ped); }
    static inline auto GetPedDamageWeaponType(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_DAMAGE_WEAPON_TYPE), Hash>(ped); }
    static inline auto GetPedDirection(Ped ped, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_DIRECTION), Vector3>(ped, a1); }
    static inline auto GetPedDrawableVariation(Ped ped, int componentId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_DRAWABLE_VARIATION), int>(ped, componentId); }
    static inline auto GetPedEmotionState(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_EMOTION_STATE), int>(ped); }
    static inline auto GetPedExtractedDisplacement(Ped ped, BOOL worldSpace) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_EXTRACTED_DISPLACEMENT), Vector3>(ped, worldSpace); }
    static inline auto GetPedGroupIndex(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_GROUP_INDEX), Group>(ped); }
    static inline auto GetPedHasPaletteVariations(Ped ped, Hash a1, Hash a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_HAS_PALETTE_VARIATIONS), BOOL>(ped, a1, a2); }
    static inline auto GetPedHasSeenDeadPed(Ped ped, BOOL a1, Ped* ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_HAS_SEEN_DEAD_PED), BOOL>(ped, a1, ped2); }
    static inline auto GetPedHasSurrendered(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_HAS_SURRENDERED), BOOL>(ped); }
    static inline auto GetPedHeading(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_HEADING), float>(ped); }
    static inline auto GetPedHealth(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_HEALTH), int>(ped); }
    static inline auto GetPedHeightAboveGround(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_HEIGHT_ABOVE_GROUND), float>(ped); }
    static inline auto GetPedInVehicleSeat(Vehicle vehicle, int seatIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_IN_VEHICLE_SEAT), Ped>(vehicle, seatIndex); }
    static inline auto GetPedLastDamageBone(Ped ped, int* bone) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_LAST_DAMAGE_BONE), BOOL>(ped, bone); }
    static inline auto GetPedLastWeaponImpactCoord(Ped ped, Vector3* coord) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_LAST_WEAPON_IMPACT_COORD), BOOL>(ped, coord); }
    static inline auto GetPedMaxHealth(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_MAX_HEALTH), int>(ped); }
    static inline auto GetPedMeleeActionFlag0(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_MELEE_ACTION_FLAG0), BOOL>(ped); }
    static inline auto GetPedMeleeActionFlag1(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_MELEE_ACTION_FLAG1), BOOL>(ped); }
    static inline auto GetPedModel(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_MODEL), Hash>(ped); }
    static inline auto GetPedModelFromIndex(int index, Hash* modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_MODEL_FROM_INDEX), BOOL>(index, modelHash); }
    static inline auto GetPedNmFeedback(Ped ped, int a1, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_NM_FEEDBACK), BOOL>(ped, a1, a2); }
    static inline auto GetPedObjectIsAttachedTo(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_OBJECT_IS_ATTACHED_TO), Ped>(object); }
    static inline auto GetPedPaletteVariation(Ped ped, int componentId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_PALETTE_VARIATION), int>(ped, componentId); }
    static inline auto GetPedPropIndex(Ped ped, int componentId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_PROP_INDEX), int>(ped, componentId); }
    static inline auto GetPedPropPosition(Ped ped, int propIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_PROP_POSITION), Vector3>(ped, propIndex); }
    static inline auto GetPedReachedTargetedGravwellCenter(Ped ped, const char* a1, const char* a2, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_REACHED_TARGETED_GRAVWELL_CENTER), BOOL>(ped, a1, a2, a3); }
    static inline auto GetPedReadyToBeExecuted(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_READY_TO_BE_EXECUTED), BOOL>(ped); }
    static inline auto GetPedReadyToBeStunned(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_READY_TO_BE_STUNNED), BOOL>(ped); }
    static inline auto GetPedSpeed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_SPEED), float>(ped); }
    static inline auto GetPedStealthMovement(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_STEALTH_MOVEMENT), BOOL>(ped); }
    static inline auto GetPedSteersAroundObjects(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_STEERS_AROUND_OBJECTS), BOOL>(ped); }
    static inline auto GetPedSteersAroundPeds(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_STEERS_AROUND_PEDS), BOOL>(ped); }
    static inline auto GetPedSweat(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_SWEAT), float>(ped); }
    static inline auto GetPedTextureVariation(Ped ped, int componentId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_TEXTURE_VARIATION), int>(ped, componentId); }
    static inline auto GetPedToxicityLevel(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_TOXICITY_LEVEL), float>(ped); }
    static inline auto GetPedType(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_TYPE), int>(ped); }
    static inline auto GetPedVelocity(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_VELOCITY), Vector3>(ped); }
    static inline auto GetPedWetHeight(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_WET_HEIGHT), float>(ped); }
    static inline auto GetPedWetness(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PED_WETNESS), float>(ped); }
    static inline auto GetPedsLastAttacker(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PEDS_LAST_ATTACKER), Ped>(ped); }
    static inline auto GetPepPropRotation(Ped ped, int propIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PEP_PROP_ROTATION), Vector3>(ped, propIndex); }
    static inline auto GetPickupAmmo() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PICKUP_AMMO), Any>(); }
    static inline auto GetPickupFromPlacement(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PICKUP_FROM_PLACEMENT), Pickup>(index); }
    static inline auto GetPickupLaserSightAttachment() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PICKUP_LASER_SIGHT_ATTACHMENT), Any>(); }
    static inline auto GetPickupTypeFromWeaponType(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PICKUP_TYPE_FROM_WEAPON_TYPE), Any>(a0); }
    static inline auto GetPlacementCoords(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLACEMENT_COORDS), Vector3>(index); }
    static inline auto GetPlayerBulletTimeState(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_BULLET_TIME_STATE), int>(player); }
    static inline auto GetPlayerCauseOfDeath(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_CAUSE_OF_DEATH), Hash>(player); }
    static inline auto GetPlayerCoverFacingLeft(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_COVER_FACING_LEFT), BOOL>(player); }
    static inline auto GetPlayerCoverSectionUid(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_COVER_SECTION_UID), Hash>(player); }
    static inline auto GetPlayerCoverUid(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_COVER_UID), Hash>(player); }
    static inline auto GetPlayerExperience() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_EXPERIENCE), int>(); }
    static inline auto GetPlayerGroup(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_GROUP), Group>(player); }
    static inline auto GetPlayerId() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_ID), Player>(); }
    static inline auto GetPlayerKiller(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_KILLER), Player>(player); }
    static inline auto GetPlayerKillerName(int bufferSize, char* buffer, Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_KILLER_NAME), void>(bufferSize, buffer, player); }
    static inline auto GetPlayerKillerWeapon(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_KILLER_WEAPON), Hash>(player); }
    static inline auto GetPlayerMaxArmour(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_MAX_ARMOUR), int>(player); }
    static inline auto GetPlayerName(int bufferSize, char* buffer, Player player, BOOL withGangTag) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_NAME), void>(bufferSize, buffer, player, withGangTag); }
    static inline auto GetPlayerOxygen(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_OXYGEN), int>(player); }
    static inline auto GetPlayerPed(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_PED), Ped>(player); }
    static inline auto GetPlayerPoints() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_POINTS), int>(); }
    static inline auto GetPlayerRank() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_RANK), int>(); }
    static inline auto GetPlayerRgbColour(Player player, int* r, int* g, int* b) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_RGB_COLOUR), void>(player, r, g, b); }
    static inline auto GetPlayerScore(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_SCORE), int>(player); }
    static inline auto GetPlayerStreakActivationLevel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_STREAK_ACTIVATION_LEVEL), int>(); }
    static inline auto GetPlayerTeam(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_TEAM), int>(player); }
    static inline auto GetPlayerWantedLevel(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYER_WANTED_LEVEL), int>(player); }
    static inline auto GetPlayersLastVehicle() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PLAYERS_LAST_VEHICLE), Vehicle>(); }
    static inline auto GetPositionInPedRecording(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_POSITION_IN_PED_RECORDING), float>(ped); }
    static inline auto GetPositionInRecording(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_POSITION_IN_RECORDING), float>(vehicle); }
    static inline auto GetPositionOfAnalogueSticks(int padIndex, int* a1, int* a2, int* a3, int* a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_POSITION_OF_ANALOGUE_STICKS), void>(padIndex, a1, a2, a3, a4); }
    static inline auto GetPositionOfLastMouseclick() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_POSITION_OF_LAST_MOUSECLICK), Vector3>(); }
    static inline auto GetPositionOfVehicleRecordingAtTime(int recordingIndex, float time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME), Vector3>(recordingIndex, time); }
    static inline auto GetPresetDuration(const char* presetName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PRESET_DURATION), int>(presetName); }
    static inline auto GetPreviousFontSettings() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PREVIOUS_FONT_SETTINGS), Any>(); }
    static inline auto GetPrimaryPopulationZoneGroup(int* a0, int* a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PRIMARY_POPULATION_ZONE_GROUP), void>(a0, a1); }
    static inline auto GetProfileSetting(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PROFILE_SETTING), int>(hash); }
    static inline auto GetProgressBarPercent() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_PROGRESS_BAR_PERCENT), float>(); }
    static inline auto GetRandomEnemyPed(Ped ped, float a1, float a2, float a3, float a4, BOOL a5, BOOL a6, BOOL a7, BOOL a8, BOOL a9, BOOL a10, Ped* outPed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RANDOM_ENEMY_PED), BOOL>(ped, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, outPed); }
    static inline auto GetRandomFloatInRange(float min, float max) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RANDOM_FLOAT_IN_RANGE), float>(min, max); }
    static inline auto GetRandomIntInRange(int min, int max) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RANDOM_INT_IN_RANGE), int>(min, max); }
    static inline auto GetRandomNetworkRestartNode(float x, float y, float z, float radius, Vector3* coords, int* nodeId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RANDOM_NETWORK_RESTART_NODE), BOOL>(x, y, z, radius, coords, nodeId); }
    static inline auto GetRandomNetworkRestartNodeUsingGroupList(float x, float y, float z, float radius, Vector3* coords, int* nodeId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RANDOM_NETWORK_RESTART_NODE_USING_GROUP_LIST), BOOL>(x, y, z, radius, coords, nodeId); }
    static inline auto GetRandomPedAtCoord(float x, float y, float z, float xRadius, float yRadius, float zRadius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RANDOM_PED_AT_COORD), Ped>(x, y, z, xRadius, yRadius, zRadius); }
    static inline auto GetRandomVehicleBackBumperInSphere(float x, float y, float z, float radius, Hash modelHash, int flags) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE), Vehicle>(x, y, z, radius, modelHash, flags); }
    static inline auto GetRandomVehicleFrontBumperInSphere(float x, float y, float z, float radius, Hash modelHash, int flags) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE), Vehicle>(x, y, z, radius, modelHash, flags); }
    static inline auto GetRandomVehicleInSphere(float x, float y, float z, float radius, Hash modelHash, int flags) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RANDOM_VEHICLE_IN_SPHERE), Vehicle>(x, y, z, radius, modelHash, flags); }
    static inline auto GetRandomVehicleModelInMemory(BOOL a0, Hash* modelHash, int* successIndicator) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RANDOM_VEHICLE_MODEL_IN_MEMORY), void>(a0, modelHash, successIndicator); }
    static inline auto GetRandomVehicleNode(float x, float y, float z, float radius, int a4, BOOL a5, BOOL a6, Vector3* coords, int* nodeId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RANDOM_VEHICLE_NODE), BOOL>(x, y, z, radius, a4, a5, a6, coords, nodeId); }
    static inline auto GetRandomVehicleNodeIncludeSwitchedOffNodes(float x, float y, float z, float radius, int a4, BOOL a5, BOOL a6, Vector3* coords, int* nodeId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RANDOM_VEHICLE_NODE_INCLUDE_SWITCHED_OFF_NODES), BOOL>(x, y, z, radius, a4, a5, a6, coords, nodeId); }
    static inline auto GetRandomVehicleOfTypeInArea(float x, float y, float z, float radius, Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RANDOM_VEHICLE_OF_TYPE_IN_AREA), Vehicle>(x, y, z, radius, modelHash); }
    static inline auto GetRandomWaterNode(float x, float y, float z, float radius, int a4, BOOL a5, BOOL a6, Vector3* coords, int* nodeId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RANDOM_WATER_NODE), BOOL>(x, y, z, radius, a4, a5, a6, coords, nodeId); }
    static inline auto GetRealFrameTime() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_REAL_FRAME_TIME), float>(); }
    static inline auto GetRealGameTimer() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_REAL_GAME_TIMER), int>(); }
    static inline auto GetRealTime() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_REAL_TIME), int>(); }
    static inline auto GetRecentWeaponLevelUp() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RECENT_WEAPON_LEVEL_UP), Any>(); }
    static inline auto GetRegisteredObjectIndexPostCutscene(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_REGISTERED_OBJECT_INDEX_POST_CUTSCENE), Object>(name); }
    static inline auto GetRegisteredPedIndexPostCutscene(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_REGISTERED_PED_INDEX_POST_CUTSCENE), Ped>(name); }
    static inline auto GetRegisteredVehicleIndexPostCutscene(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_REGISTERED_VEHICLE_INDEX_POST_CUTSCENE), Vehicle>(name); }
    static inline auto GetRegisteredWeaponIndexPostCutscene(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_REGISTERED_WEAPON_INDEX_POST_CUTSCENE), Weapon>(name); }
    static inline auto GetRenderingCam() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_RENDERING_CAM), Cam>(); }
    static inline auto GetRequestedLevel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_REQUESTED_LEVEL), int>(); }
    static inline auto GetRoomAtCoords(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_ROOM_AT_COORDS), Any>(x, y, z); }
    static inline auto GetRoomKeyFromObject(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_ROOM_KEY_FROM_OBJECT), Any>(object); }
    static inline auto GetRoomKeyFromPlacement() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_ROOM_KEY_FROM_PLACEMENT), Any>(); }
    static inline auto GetRopeVertexCount(Rope rope) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_ROPE_VERTEX_COUNT), int>(rope); }
    static inline auto GetSafeCoordForPed(float x, float y, float z, BOOL a3, Vector3* coord) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SAFE_COORD_FOR_PED), BOOL>(x, y, z, a3, coord); }
    static inline auto GetSafePlacementCoords() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SAFE_PLACEMENT_COORDS), Any>(); }
    static inline auto GetSavegameLevel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SAVEGAME_LEVEL), int>(); }
    static inline auto GetScenePedModel(Hash unkHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SCENE_PED_MODEL), Hash>(unkHash); }
    static inline auto GetScreenResolution(int* x, int* y) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SCREEN_RESOLUTION), void>(x, y); }
    static inline auto GetScriptIdFromNameHash(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SCRIPT_ID_FROM_NAME_HASH), int>(hash); }
    static inline auto GetScriptMovieFramesRemaining(int a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SCRIPT_MOVIE_FRAMES_REMAINING), int>(a0); }
    static inline auto GetScriptRendertargetRenderId() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SCRIPT_RENDERTARGET_RENDER_ID), int>(); }
    static inline auto GetScriptStreamState(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SCRIPT_STREAM_STATE), Any>(a0, a1); }
    static inline auto GetScriptTaskStatus(Ped ped, int task) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SCRIPT_TASK_STATUS), int>(ped, task); }
    static inline auto GetScriptTunableVariableBool(const char* context, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SCRIPT_TUNABLE_VARIABLE_BOOL), BOOL>(context, name); }
    static inline auto GetScriptTunableVariableCrcBool(Hash tunableHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SCRIPT_TUNABLE_VARIABLE_CRC_BOOL), BOOL>(tunableHash); }
    static inline auto GetSecondaryLifeBarPercent() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SECONDARY_LIFE_BAR_PERCENT), float>(); }
    static inline auto GetSelectedPedGadget(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SELECTED_PED_GADGET), Hash>(ped); }
    static inline auto GetSequenceProgress(ScrHandle taskSequence) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SEQUENCE_PROGRESS), int>(taskSequence); }
    static inline auto GetSortedNetworkRestartNode(float x, float y, float z, float radius, Vector3* coords, int* nodeId, int a6, int a7, float a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SORTED_NETWORK_RESTART_NODE), BOOL>(x, y, z, radius, coords, nodeId, a6, a7, a8); }
    static inline auto GetSortedNetworkRestartNodeUsingGroupList(float x, float y, float z, float radius, Vector3* coords, int* nodeId, int a6, int a7, float a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SORTED_NETWORK_RESTART_NODE_USING_GROUP_LIST), BOOL>(x, y, z, radius, coords, nodeId, a6, a7, a8); }
    static inline auto GetSoundId() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SOUND_ID), int>(); }
    static inline auto GetSpawnCoordsForVehicleNode(int nodeId, float x, float y, float z, Vector3* coords, float* heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SPAWN_COORDS_FOR_VEHICLE_NODE), void>(nodeId, x, y, z, coords, heading); }
    static inline auto GetSpeechForEmergencyServiceCall() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SPEECH_FOR_EMERGENCY_SERVICE_CALL), Any>(); }
    static inline auto GetStableNumOfPriorityRequests() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_STABLE_NUM_OF_PRIORITY_REQUESTS), int>(); }
    static inline auto GetStableNumOfStreamingRequests() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_STABLE_NUM_OF_STREAMING_REQUESTS), int>(); }
    static inline auto GetStateOfClosestDoorOfType(Hash modelHash, float x, float y, float z, BOOL* locked, float* heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_STATE_OF_CLOSEST_DOOR_OF_TYPE), void>(modelHash, x, y, z, locked, heading); }
    static inline auto GetStationName(int bufferSize, char* buffer, Vehicle train, int a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_STATION_NAME), void>(bufferSize, buffer, train, a3); }
    static inline auto GetStreamPedPackId(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_STREAM_PED_PACK_ID), int>(hash); }
    static inline auto GetStreetNameAtCoord(float x, float y, float z, Hash* streetNameHash, Hash* crossingRoadHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_STREET_NAME_AT_COORD), void>(x, y, z, streetNameHash, crossingRoadHash); }
    static inline auto GetStringFromXmlNodeAttribute(int bufferSize, char* buffer, int attributeIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_STRING_FROM_XML_NODE_ATTRIBUTE), void>(bufferSize, buffer, attributeIndex); }
    static inline auto GetStringWidth(const char* textLabel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_STRING_WIDTH), float>(textLabel); }
    static inline auto GetStringWidthWithNumber(const char* textLabel, int number) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_STRING_WIDTH_WITH_NUMBER), float>(textLabel, number); }
    static inline auto GetStringWidthWithString(const char* textLabel, const char* string) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_STRING_WIDTH_WITH_STRING), float>(textLabel, string); }
    static inline auto GetSuppressorDamageLevel(Weapon weapon) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_SUPPRESSOR_DAMAGE_LEVEL), int>(weapon); }
    static inline auto GetTexture(ScrHandle dict, const char* textureName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TEXTURE), ScrHandle>(dict, textureName); }
    static inline auto GetTextureFromStreamedTextureDict(const char* dictName, const char* textureName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TEXTURE_FROM_STREAMED_TEXTURE_DICT), ScrHandle>(dictName, textureName); }
    static inline auto GetThisThreadFriendlyName(int bufferSize, char* buffer) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_THIS_THREAD_FRIENDLY_NAME), void>(bufferSize, buffer); }
    static inline auto GetTimeOfDay(int* hour, int* minute) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TIME_OF_DAY), void>(hour, minute); }
    static inline auto GetTimePositionInPedRecording(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TIME_POSITION_IN_PED_RECORDING), float>(ped); }
    static inline auto GetTimePositionInRecordedRecording(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TIME_POSITION_IN_RECORDED_RECORDING), float>(a0); }
    static inline auto GetTimePositionInRecording(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TIME_POSITION_IN_RECORDING), float>(vehicle); }
    static inline auto GetTimeRemaining() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TIME_REMAINING), float>(); }
    static inline auto GetTimeScale() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TIME_SCALE), float>(); }
    static inline auto GetTimeSinceLastLmsActivation() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TIME_SINCE_LAST_LMS_ACTIVATION), int>(); }
    static inline auto GetTimeSincePedMadeNoise(Ped ped, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TIME_SINCE_PED_MADE_NOISE), int>(ped, a1); }
    static inline auto GetTimeSinceRemotePedMoved(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TIME_SINCE_REMOTE_PED_MOVED), int>(ped); }
    static inline auto GetTimeTilNextStation(Vehicle train) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TIME_TIL_NEXT_STATION), int>(train); }
    static inline auto GetTotalDurationOfVehicleRecording(int recordingIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TOTAL_DURATION_OF_VEHICLE_RECORDING), float>(recordingIndex); }
    static inline auto GetTrainCaboose(Vehicle train) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TRAIN_CABOOSE), Vehicle>(train); }
    static inline auto GetTrainCarriage(Vehicle train, int carriage) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TRAIN_CARRIAGE), Vehicle>(train, carriage); }
    static inline auto GetTrainDirection(Vehicle train) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TRAIN_DIRECTION), BOOL>(train); }
    static inline auto GetTrainPlayerWouldEnter() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TRAIN_PLAYER_WOULD_ENTER), Vehicle>(); }
    static inline auto GetTransitionMovieFramesRemaining() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_TRANSITION_MOVIE_FRAMES_REMAINING), int>(); }
    static inline auto GetUiDescriptionForBgScript(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_UI_DESCRIPTION_FOR_BG_SCRIPT), Any>(a0); }
    static inline auto GetUiNameForBgScript(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_UI_NAME_FOR_BG_SCRIPT), Any>(a0); }
    static inline auto GetUnlockExists(const char* unlockSemantic) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_UNLOCK_EXISTS), BOOL>(unlockSemantic); }
    static inline auto GetUnlockIsNew(const char* unlockSemantic) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_UNLOCK_IS_NEW), BOOL>(unlockSemantic); }
    static inline auto GetUnlockIsVisible(const char* unlockSemantic) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_UNLOCK_IS_VISIBLE), BOOL>(unlockSemantic); }
    static inline auto GetVehicleBoneIndex(Vehicle vehicle, const char* boneName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_BONE_INDEX), int>(vehicle, boneName); }
    static inline auto GetVehicleColours(Vehicle vehicle, int* primaryColor, int* secondaryColor) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_COLOURS), void>(vehicle, primaryColor, secondaryColor); }
    static inline auto GetVehicleCoords(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_COORDS), Vector3>(vehicle); }
    static inline auto GetVehicleDeformationAtPos(Vehicle vehicle, float offsetX, float offsetY, float offsetZ) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_DEFORMATION_AT_POS), Vector3>(vehicle, offsetX, offsetY, offsetZ); }
    static inline auto GetVehicleDirtLevel(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_DIRT_LEVEL), float>(vehicle); }
    static inline auto GetVehicleDoorAngleRatio(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_DOOR_ANGLE_RATIO), Any>(a0, a1); }
    static inline auto GetVehicleDoorLockStatus(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_DOOR_LOCK_STATUS), int>(vehicle); }
    static inline auto GetVehicleEngineHealth(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_ENGINE_HEALTH), float>(vehicle); }
    static inline auto GetVehicleExtraColours(Vehicle vehicle, int* pearlescentColor, int* wheelColor) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_EXTRA_COLOURS), void>(vehicle, pearlescentColor, wheelColor); }
    static inline auto GetVehicleFixedWeaponAccuracy(Vehicle vehicle, int weaponIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_FIXED_WEAPON_ACCURACY), float>(vehicle, weaponIndex); }
    static inline auto GetVehicleFixedWeaponDamage(Vehicle vehicle, int weaponIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_FIXED_WEAPON_DAMAGE), float>(vehicle, weaponIndex); }
    static inline auto GetVehicleFixedWeaponFiringPatternMode(Vehicle vehicle, int weaponIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_FIXED_WEAPON_FIRING_PATTERN_MODE), int>(vehicle, weaponIndex); }
    static inline auto GetVehicleForwardVector(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_FORWARD_VECTOR), Vector3>(vehicle); }
    static inline auto GetVehicleForwardX(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_FORWARD_X), float>(vehicle); }
    static inline auto GetVehicleForwardY(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_FORWARD_Y), float>(vehicle); }
    static inline auto GetVehicleHeading(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_HEADING), float>(vehicle); }
    static inline auto GetVehicleHealth(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_HEALTH), int>(vehicle); }
    static inline auto GetVehicleMaxNumberOfPassengers(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS), int>(vehicle); }
    static inline auto GetVehicleModel(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_MODEL), Hash>(vehicle); }
    static inline auto GetVehicleModelFromIndex(int index, Hash* modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_MODEL_FROM_INDEX), BOOL>(index, modelHash); }
    static inline auto GetVehicleModelValue(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_MODEL_VALUE), int>(modelHash); }
    static inline auto GetVehicleNumberOfPassengers(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_NUMBER_OF_PASSENGERS), int>(vehicle); }
    static inline auto GetVehicleObjectIsAttachedTo(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_OBJECT_IS_ATTACHED_TO), Vehicle>(object); }
    static inline auto GetVehiclePedIsIn(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_PED_IS_IN), Vehicle>(ped); }
    static inline auto GetVehiclePedIsUsing(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_PED_IS_USING), Vehicle>(ped); }
    static inline auto GetVehiclePetrolTankHealth(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_PETROL_TANK_HEALTH), float>(vehicle); }
    static inline auto GetVehiclePitch(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_PITCH), float>(vehicle); }
    static inline auto GetVehicleQuaternion(Vehicle vehicle, float* x, float* y, float* z, float* w) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_QUATERNION), void>(vehicle, x, y, z, w); }
    static inline auto GetVehicleRoll(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_ROLL), float>(vehicle); }
    static inline auto GetVehicleSirenHealth(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_SIREN_HEALTH), int>(vehicle); }
    static inline auto GetVehicleSpeed(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_SPEED), float>(vehicle); }
    static inline auto GetVehicleSpeedVector(Vehicle vehicle, BOOL relative) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_SPEED_VECTOR), Vector3>(vehicle, relative); }
    static inline auto GetVehicleUprightValue(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_VEHICLE_UPRIGHT_VALUE), float>(vehicle); }
    static inline auto GetWaterHeight(float x, float y, float z, float* height) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_WATER_HEIGHT), BOOL>(x, y, z, height); }
    static inline auto GetWaterHeightNoWaves(float x, float y, float z, float* height) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_WATER_HEIGHT_NO_WAVES), BOOL>(x, y, z, height); }
    static inline auto GetWeaponAmmo(Weapon weapon) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_WEAPON_AMMO), int>(weapon); }
    static inline auto GetWeaponAmmoInClip(Weapon weapon) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_WEAPON_AMMO_IN_CLIP), int>(weapon); }
    static inline auto GetWeaponFromHand(Ped ped, int handType, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_WEAPON_FROM_HAND), Weapon>(ped, handType, a2); }
    static inline auto GetWeaponFromHolster(Ped ped, int holsterType) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_WEAPON_FROM_HOLSTER), Weapon>(ped, holsterType); }
    static inline auto GetWeaponFromSlot(Ped ped, int holsterType) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_WEAPON_FROM_SLOT), Weapon>(ped, holsterType); }
    static inline auto GetWeaponGuntype(Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_WEAPON_GUNTYPE), int>(weaponHash); }
    static inline auto GetWeaponHudTexture(Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_WEAPON_HUD_TEXTURE), Hash>(weaponHash); }
    static inline auto GetWeaponLevel(Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_WEAPON_LEVEL), int>(weaponHash); }
    static inline auto GetWeaponName(int bufferSize, char* buffer, Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_WEAPON_NAME), void>(bufferSize, buffer, weaponHash); }
    static inline auto GetWeaponSpawnsPickup(Weapon weapon) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_WEAPON_SPAWNS_PICKUP), BOOL>(weapon); }
    static inline auto GetWeaponType(Weapon weapon) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_WEAPON_TYPE), int>(weapon); }
    static inline auto GetWeapontypeAmmo(Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_WEAPONTYPE_AMMO), int>(weaponHash); }
    static inline auto GetWeapontypeModel(Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_WEAPONTYPE_MODEL), Hash>(weaponHash); }
    static inline auto GetXmlNamedNode(const char* nodeName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_XML_NAMED_NODE), BOOL>(nodeName); }
    static inline auto GetXmlNodeAttributeName(int bufferSize, char* buffer, int attributeIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_XML_NODE_ATTRIBUTE_NAME), void>(bufferSize, buffer, attributeIndex); }
    static inline auto GetXmlNodeName(int bufferSize, char* buffer) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GET_XML_NODE_NAME), void>(bufferSize, buffer); }
    static inline auto GiveAchievementToPlayer(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GIVE_ACHIEVEMENT_TO_PLAYER), BOOL>(index); }
    static inline auto GiveBgScriptAward(int awardId, BOOL* a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GIVE_BG_SCRIPT_AWARD), void>(awardId, a1); }
    static inline auto GiveDelayedWeaponToPed(Ped ped, Hash weaponHash, int ammo, BOOL equipNow) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GIVE_DELAYED_WEAPON_TO_PED), Weapon>(ped, weaponHash, ammo, equipNow); }
    static inline auto GivePedArmourMpReward(Ped ped, Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GIVE_PED_ARMOUR_MP_REWARD), void>(ped, hash); }
    static inline auto GivePedFakeNetworkName() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GIVE_PED_FAKE_NETWORK_NAME), Any>(); }
    static inline auto GivePedHelmet(Ped ped, BOOL cannotRemove) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GIVE_PED_HELMET), void>(ped, cannotRemove); }
    static inline auto GivePedHelmetWithOpts(Ped ped, BOOL cannotRemove) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GIVE_PED_HELMET_WITH_OPTS), void>(ped, cannotRemove); }
    static inline auto GivePedNmMessage(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GIVE_PED_NM_MESSAGE), void>(ped); }
    static inline auto GivePedPickupObject(Ped ped, Object object, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GIVE_PED_PICKUP_OBJECT), void>(ped, object, a2); }
    static inline auto GivePlayerMpSpecialItem(Player player, int item) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GIVE_PLAYER_MP_SPECIAL_ITEM), void>(player, item); }
    static inline auto GivePlayerRagdollControl(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GIVE_PLAYER_RAGDOLL_CONTROL), void>(player, toggle); }
    static inline auto GiveWeaponToPed(Ped ped, Hash weaponHash, int ammo, BOOL equipNow) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GIVE_WEAPON_TO_PED), Weapon>(ped, weaponHash, ammo, equipNow); }
    static inline auto GiveWeaponToPedHand(Ped ped, Hash weaponHash, int ammo, int handType) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GIVE_WEAPON_TO_PED_HAND), Weapon>(ped, weaponHash, ammo, handType); }
    static inline auto GiveWeaponToPedHolster(Ped ped, Hash weaponHash, int ammo, int holsterType) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::GIVE_WEAPON_TO_PED_HOLSTER), Weapon>(ped, weaponHash, ammo, holsterType); }
    static inline auto HandleCheckpointRestart() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HANDLE_CHECKPOINT_RESTART), void>(); }
    static inline auto HasAchievementBeenPassed(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_ACHIEVEMENT_BEEN_PASSED), BOOL>(index); }
    static inline auto HasAchievementHash(int a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_ACHIEVEMENT_HASH), BOOL>(a0); }
    static inline auto HasAdditionalTextLoaded(int slot) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_ADDITIONAL_TEXT_LOADED), BOOL>(slot); }
    static inline auto HasAnimDictLoaded(const char* dictName, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_ANIM_DICT_LOADED), BOOL>(dictName, a1); }
    static inline auto HasBulletImpactedInArea(float x, float y, float z, float radius, Ped* outPed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_BULLET_IMPACTED_IN_AREA), BOOL>(x, y, z, radius, outPed); }
    static inline auto HasClosestObjectOfTypeBeenDamagedByPed(float x, float y, float z, float radius, Hash modelHash, Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_DAMAGED_BY_PED), BOOL>(x, y, z, radius, modelHash, ped); }
    static inline auto HasCollisionForModelLoaded(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_COLLISION_FOR_MODEL_LOADED), BOOL>(modelHash); }
    static inline auto HasCutsceneFinished() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_CUTSCENE_FINISHED), BOOL>(); }
    static inline auto HasCutsceneLoaded() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_CUTSCENE_LOADED), BOOL>(); }
    static inline auto HasCutsceneUnloaded() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_CUTSCENE_UNLOADED), BOOL>(); }
    static inline auto HasDeatharrestExecuted() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_DEATHARREST_EXECUTED), BOOL>(); }
    static inline auto HasExplorationItemBeenFound(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_EXPLORATION_ITEM_BEEN_FOUND), BOOL>(name); }
    static inline auto HasFragmentAnyOfObjectBeenDamaged(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_FRAGMENT_ANY_OF_OBJECT_BEEN_DAMAGED), BOOL>(object); }
    static inline auto HasFragmentRootOfClosestObjectOfTypeBeenDamaged(float x, float y, float z, float radius, Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_FRAGMENT_ROOT_OF_CLOSEST_OBJECT_OF_TYPE_BEEN_DAMAGED), BOOL>(x, y, z, radius, modelHash); }
    static inline auto HasFragmentRootOfObjectBeenDamaged(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_FRAGMENT_ROOT_OF_OBJECT_BEEN_DAMAGED), BOOL>(object); }
    static inline auto HasLoadJustOccurred() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_LOAD_JUST_OCCURRED), BOOL>(); }
    static inline auto HasModelLoaded(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_MODEL_LOADED), BOOL>(modelHash); }
    static inline auto HasObjectBeenDamaged(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_OBJECT_BEEN_DAMAGED), BOOL>(object); }
    static inline auto HasObjectBeenDamagedByPed(Object object, Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_OBJECT_BEEN_DAMAGED_BY_PED), BOOL>(object, ped); }
    static inline auto HasObjectBeenDamagedByVehicle(Object object, Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_OBJECT_BEEN_DAMAGED_BY_VEHICLE), BOOL>(object, vehicle); }
    static inline auto HasObjectBeenUprooted(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_OBJECT_BEEN_UPROOTED), BOOL>(object); }
    static inline auto HasObjectCollidedWithAnything(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_OBJECT_COLLIDED_WITH_ANYTHING), BOOL>(object); }
    static inline auto HasOverridenSitIdleAnimFinished(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_OVERRIDEN_SIT_IDLE_ANIM_FINISHED), BOOL>(ped); }
    static inline auto HasPedAnimFinished(Ped ped, const char* animDict, const char* animName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_PED_ANIM_FINISHED), BOOL>(ped, animDict, animName); }
    static inline auto HasPedBeenDamagedByPed(Ped ped, Ped ped2, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_PED_BEEN_DAMAGED_BY_PED), BOOL>(ped, ped2, a2); }
    static inline auto HasPedBeenDamagedByVehicle(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_PED_BEEN_DAMAGED_BY_VEHICLE), BOOL>(ped, vehicle); }
    static inline auto HasPedBeenDamagedByWeapon(Ped ped, Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_PED_BEEN_DAMAGED_BY_WEAPON), BOOL>(ped, weaponHash); }
    static inline auto HasPedClearLosToPed(Ped ped, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_PED_CLEAR_LOS_TO_PED), BOOL>(ped, ped2); }
    static inline auto HasPedClearLosToPedInFront(Ped ped, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_PED_CLEAR_LOS_TO_PED_IN_FRONT), BOOL>(ped, ped2); }
    static inline auto HasPedClearLosToSphere(Ped ped, float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_PED_CLEAR_LOS_TO_SPHERE), BOOL>(ped, x, y, z, radius); }
    static inline auto HasPedGotSpecificWeapon(Ped ped, Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_PED_GOT_SPECIFIC_WEAPON), BOOL>(ped, weaponHash); }
    static inline auto HasPedGotWeapon(Ped ped, Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_PED_GOT_WEAPON), BOOL>(ped, weaponHash); }
    static inline auto HasPedRecordingBeenLoaded(int recordingIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_PED_RECORDING_BEEN_LOADED), BOOL>(recordingIndex); }
    static inline auto HasPedTriggeredMpm(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_PED_TRIGGERED_MPM), BOOL>(ped); }
    static inline auto HasPlacementBeenCollected(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_PLACEMENT_BEEN_COLLECTED), BOOL>(index); }
    static inline auto HasPlayerDamagedAtLeastOnePed(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED), BOOL>(player); }
    static inline auto HasReloadedWithMotionControl(Any a0, Any* a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_RELOADED_WITH_MOTION_CONTROL), BOOL>(a0, a1); }
    static inline auto HasScriptLoaded(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_SCRIPT_LOADED), BOOL>(name); }
    static inline auto HasSelectedRetryCheckpoint() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_SELECTED_RETRY_CHECKPOINT), BOOL>(); }
    static inline auto HasShotBeenFiredInArea(float x, float y, float z, float radius, BOOL a4, Ped* outPed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_SHOT_BEEN_FIRED_IN_AREA), BOOL>(x, y, z, radius, a4, outPed); }
    static inline auto HasSomethingExplodedInArea(float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_SOMETHING_EXPLODED_IN_AREA), BOOL>(x, y, z, radius); }
    static inline auto HasSoundFinished(int soundId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_SOUND_FINISHED), BOOL>(soundId); }
    static inline auto HasStreamedTextureDictLoaded(const char* dictName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_STREAMED_TEXTURE_DICT_LOADED), BOOL>(dictName); }
    static inline auto HasStreampedLoaded(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_STREAMPED_LOADED), BOOL>(ped); }
    static inline auto HasThisAdditionalTextLoaded(const char* gxt) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_THIS_ADDITIONAL_TEXT_LOADED), BOOL>(gxt); }
    static inline auto HasVehicleBeenDamagedByPed(Vehicle vehicle, Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_VEHICLE_BEEN_DAMAGED_BY_PED), BOOL>(vehicle, ped); }
    static inline auto HasVehicleBeenDamagedByVehicle(Vehicle vehicle, Vehicle vehicle2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_VEHICLE_BEEN_DAMAGED_BY_VEHICLE), BOOL>(vehicle, vehicle2); }
    static inline auto HasVehicleBeenDamagedByWeapon(Vehicle vehicle, Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_VEHICLE_BEEN_DAMAGED_BY_WEAPON), BOOL>(vehicle, weaponHash); }
    static inline auto HasVehicleBeenResprayed(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_VEHICLE_BEEN_RESPRAYED), BOOL>(vehicle); }
    static inline auto HasVehicleGotProjectileAttached(Ped ped, Vehicle vehicle, Hash projectileHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_VEHICLE_GOT_PROJECTILE_ATTACHED), BOOL>(ped, vehicle, projectileHash); }
    static inline auto HasVehicleRecordingBeenLoaded(int recordingIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_VEHICLE_RECORDING_BEEN_LOADED), BOOL>(recordingIndex); }
    static inline auto HasVehicleStoppedBecauseOfLight(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_VEHICLE_STOPPED_BECAUSE_OF_LIGHT), BOOL>(vehicle); }
    static inline auto HasWeaponLoaded(Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HAS_WEAPON_LOADED), BOOL>(weaponHash); }
    static inline auto HeliSpotlightTrackPed(Vehicle heli, Ped ped, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HELI_SPOTLIGHT_TRACK_PED), void>(heli, ped, a2); }
    static inline auto HideHelpTextThisFrame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HIDE_HELP_TEXT_THIS_FRAME), void>(); }
    static inline auto HideLoadingOnFadeThisFrame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HIDE_LOADING_ON_FADE_THIS_FRAME), void>(); }
    static inline auto HidePedWeaponForScriptedCutscene(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE), void>(ped, toggle); }
    static inline auto HoldLastManStandAnimatedRecovery(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HOLD_LAST_MAN_STAND_ANIMATED_RECOVERY), void>(a0); }
    static inline auto HudAreGangwarsAnimsComplete() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_ARE_GANGWARS_ANIMS_COMPLETE), BOOL>(); }
    static inline auto HudScoreboardGetplayerposition(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_GETPLAYERPOSITION), Any>(a0); }
    static inline auto HudScoreboardResetallplayerxp() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_RESETALLPLAYERXP), Any>(); }
    static inline auto HudScoreboardResetplayerxp() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_RESETPLAYERXP), Any>(); }
    static inline auto HudScoreboardSetgwTallyScores(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SETGW_TALLY_SCORES), void>(a0); }
    static inline auto HudScoreboardSetgwnode(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SETGWNODE), void>(a0, a1); }
    static inline auto HudScoreboardSetplayerbasexp(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SETPLAYERBASEXP), void>(a0, a1); }
    static inline auto HudScoreboardSetplayervaluesAssists(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SETPLAYERVALUES_ASSISTS), void>(a0, a1); }
    static inline auto HudScoreboardSetplayervaluesFakeAlive(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SETPLAYERVALUES_FAKE_ALIVE), void>(a0, a1); }
    static inline auto HudScoreboardSetplayervaluesFakeDead(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SETPLAYERVALUES_FAKE_DEAD), void>(a0, a1); }
    static inline auto HudScoreboardSetplayervaluesKilldeath(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SETPLAYERVALUES_KILLDEATH), void>(a0, a1, a2); }
    static inline auto HudScoreboardSetplayervaluesLives(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SETPLAYERVALUES_LIVES), void>(a0, a1); }
    static inline auto HudScoreboardSetplayervaluesPoints(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SETPLAYERVALUES_POINTS), void>(a0, a1); }
    static inline auto HudScoreboardSetplayervaluesRole(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SETPLAYERVALUES_ROLE), void>(a0, a1, a2); }
    static inline auto HudScoreboardSetplayervaluesTeam(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SETPLAYERVALUES_TEAM), void>(a0, a1); }
    static inline auto HudScoreboardSetplayervaluesVendetta(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SETPLAYERVALUES_VENDETTA), void>(a0, a1); }
    static inline auto HudScoreboardSetplayervaluesXp2() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SETPLAYERVALUES_XP2), Any>(); }
    static inline auto HudScoreboardSetprogress() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SETPROGRESS), Any>(); }
    static inline auto HudScoreboardSetteamnames(const char* teamName1, const char* teamName2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SETTEAMNAMES), void>(teamName1, teamName2); }
    static inline auto HudScoreboardShow(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SHOW), void>(toggle); }
    static inline auto HudScoreboardSortBy(const char* a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SCOREBOARD_SORT_BY), void>(a0); }
    static inline auto HudSetCurrentStreak(BOOL a0, const char* a1, int a2, int a3, int a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SET_CURRENT_STREAK), void>(a0, a1, a2, a3, a4); }
    static inline auto HudSetPlayerHealthTexture(const char* textureName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SET_PLAYER_HEALTH_TEXTURE), void>(textureName); }
    static inline auto HudSetScoretimer(const char* name, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::HUD_SET_SCORETIMER), void>(name, a1); }
    static inline auto ISequenceDoesExist(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::I_SEQUENCE_DOES_EXIST), BOOL>(name); }
    static inline auto ISequenceInterrupt(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::I_SEQUENCE_INTERRUPT), void>(name); }
    static inline auto ISequenceIsLoaded(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::I_SEQUENCE_IS_LOADED), BOOL>(name); }
    static inline auto ISequenceLoadData(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::I_SEQUENCE_LOAD_DATA), void>(name); }
    static inline auto ISequencePurgeAll() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::I_SEQUENCE_PURGE_ALL), void>(); }
    static inline auto ISequenceQueryEntityState(const char* name, const char* entityName, int state) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::I_SEQUENCE_QUERY_ENTITY_STATE), BOOL>(name, entityName, state); }
    static inline auto ISequenceQueryState(const char* name, int state) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::I_SEQUENCE_QUERY_STATE), BOOL>(name, state); }
    static inline auto ISequenceRegisterEntity(const char* name, const char* entityName, Entity entity, int entityType) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::I_SEQUENCE_REGISTER_ENTITY), BOOL>(name, entityName, entity, entityType); }
    static inline auto ISequenceSetup(const char* name, const char* a1, const char* a2, const char* a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::I_SEQUENCE_SETUP), void>(name, a1, a2, a3); }
    static inline auto ISequenceStart(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::I_SEQUENCE_START), void>(name); }
    static inline auto ISequenceTerminate(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::I_SEQUENCE_TERMINATE), void>(name); }
    static inline auto ISequenceUnregisterEntity(const char* name, const char* entityName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::I_SEQUENCE_UNREGISTER_ENTITY), void>(name, entityName); }
    static inline auto IncrementCheckpointAttempt() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::INCREMENT_CHECKPOINT_ATTEMPT), void>(); }
    static inline auto IncrementStreakStat(const char* statName, int a1, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::INCREMENT_STREAK_STAT), void>(statName, a1, a2); }
    static inline auto InitRingiconData(Any* ringicon) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::INIT_RINGICON_DATA), void>(ringicon); }
    static inline auto InitTickerData(Any* data) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::INIT_TICKER_DATA), void>(data); }
    static inline auto IntToPlayerindex(int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::INT_TO_PLAYERINDEX), Player>(value); }
    static inline auto InvokeSpectatorCam() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::INVOKE_SPECTATOR_CAM), void>(); }
    static inline auto Is2playerGameGoingOn() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_2PLAYER_GAME_GOING_ON), BOOL>(); }
    static inline auto IsActionConsumed(int action) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_ACTION_CONSUMED), BOOL>(action); }
    static inline auto IsActionTreeLoaded(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_ACTION_TREE_LOADED), BOOL>(name); }
    static inline auto IsAimCamActive() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_AIM_CAM_ACTIVE), BOOL>(); }
    static inline auto IsAmbientSpeechDisabled(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_AMBIENT_SPEECH_DISABLED), BOOL>(ped); }
    static inline auto IsAmbientSpeechPlaying(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_AMBIENT_SPEECH_PLAYING), BOOL>(ped); }
    static inline auto IsAmedEnabled() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_AMED_ENABLED), BOOL>(); }
    static inline auto IsAnimatedCameraPlaying() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_ANIMATED_CAMERA_PLAYING), BOOL>(); }
    static inline auto IsAnyGrenadeInHelperBox(float x1, float y1, float z1, float x2, float y2, float z2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_ANY_GRENADE_IN_HELPER_BOX), BOOL>(x1, y1, z1, x2, y2, z2); }
    static inline auto IsAnyPedShootingInArea(float x1, float y1, float z1, float x2, float y2, float z2, BOOL a6, BOOL a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_ANY_PED_SHOOTING_IN_AREA), BOOL>(x1, y1, z1, x2, y2, z2, a6, a7); }
    static inline auto IsAnySpeechPlaying(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_ANY_SPEECH_PLAYING), BOOL>(ped); }
    static inline auto IsAnyoneInteractingWithVolume(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_ANYONE_INTERACTING_WITH_VOLUME), Any>(a0); }
    static inline auto IsArcadeModeActive() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_ARCADE_MODE_ACTIVE), BOOL>(); }
    static inline auto IsAreaOccupied(float x1, float y1, float z1, float x2, float y2, float z2, BOOL a6, BOOL a7, BOOL a8, BOOL a9, BOOL a10) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_AREA_OCCUPIED), BOOL>(x1, y1, z1, x2, y2, z2, a6, a7, a8, a9, a10); }
    static inline auto IsAussieVersion() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_AUSSIE_VERSION), BOOL>(); }
    static inline auto IsBigVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_BIG_VEHICLE), BOOL>(vehicle); }
    static inline auto IsBitSet(int data, int bit) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_BIT_SET), BOOL>(data, bit); }
    static inline auto IsBlipShortRange(Blip blip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_BLIP_SHORT_RANGE), BOOL>(blip); }
    static inline auto IsBulletCameraActive() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_BULLET_CAMERA_ACTIVE), BOOL>(); }
    static inline auto IsBulletCameraRunning(BOOL a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_BULLET_CAMERA_RUNNING), BOOL>(a0); }
    static inline auto IsBulletCameraSceneActive(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_BULLET_CAMERA_SCENE_ACTIVE), BOOL>(cam); }
    static inline auto IsBulletCameraToGameplayAllowed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_BULLET_CAMERA_TO_GAMEPLAY_ALLOWED), BOOL>(); }
    static inline auto IsBulletCameraWipeEnabled() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_BULLET_CAMERA_WIPE_ENABLED), BOOL>(); }
    static inline auto IsBulletCameraWipeStopped() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_BULLET_CAMERA_WIPE_STOPPED), BOOL>(); }
    static inline auto IsBulletInArea() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_BULLET_IN_AREA), Any>(); }
    static inline auto IsBulletInBox() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_BULLET_IN_BOX), Any>(); }
    static inline auto IsBulletTimeActive(BOOL a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_BULLET_TIME_ACTIVE), BOOL>(a0); }
    static inline auto IsButtonJustPressed(int padIndex, int buttonId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_BUTTON_JUST_PRESSED), BOOL>(padIndex, buttonId); }
    static inline auto IsButtonPressed(int padIndex, int buttonId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_BUTTON_PRESSED), BOOL>(padIndex, buttonId); }
    static inline auto IsCamActive(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_CAM_ACTIVE), BOOL>(cam); }
    static inline auto IsCamInterpolating(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_CAM_INTERPOLATING), BOOL>(cam); }
    static inline auto IsCamRendering(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_CAM_RENDERING), BOOL>(cam); }
    static inline auto IsCamShaking(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_CAM_SHAKING), BOOL>(cam); }
    static inline auto IsCameraAimingAtEnemy() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_CAMERA_AIMING_AT_ENEMY), BOOL>(); }
    static inline auto IsClosestObjectOfTypeSmashedOrDamaged() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_CLOSEST_OBJECT_OF_TYPE_SMASHED_OR_DAMAGED), Any>(); }
    static inline auto IsCollectableEnabled() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_COLLECTABLE_ENABLED), BOOL>(); }
    static inline auto IsControlJustPressed(int padIndex, int controlId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_CONTROL_JUST_PRESSED), BOOL>(padIndex, controlId); }
    static inline auto IsControlPressed(int padIndex, int controlId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_CONTROL_PRESSED), BOOL>(padIndex, controlId); }
    static inline auto IsCopVehicleInArea3d(float x1, float y1, float z1, float x2, float y2, float z2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_COP_VEHICLE_IN_AREA_3D), BOOL>(x1, y1, z1, x2, y2, z2); }
    static inline auto IsCustomPlayerVariation() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_CUSTOM_PLAYER_VARIATION), BOOL>(); }
    static inline auto IsDamageByProjectile(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_DAMAGE_BY_PROJECTILE), BOOL>(vehicle); }
    static inline auto IsDeathPanelWipeAllowed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_DEATH_PANEL_WIPE_ALLOWED), BOOL>(); }
    static inline auto IsExitflagSet(int threadId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_EXITFLAG_SET), BOOL>(threadId); }
    static inline auto IsExplosionInArea(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_EXPLOSION_IN_AREA), BOOL>(explosionType, x1, y1, z1, x2, y2, z2); }
    static inline auto IsExplosionInSphere(int explosionType, float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_EXPLOSION_IN_SPHERE), BOOL>(explosionType, x, y, z, radius); }
    static inline auto IsFollowPedCamActive() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_FOLLOW_PED_CAM_ACTIVE), BOOL>(); }
    static inline auto IsFollowVehicleCamActive() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_FOLLOW_VEHICLE_CAM_ACTIVE), BOOL>(); }
    static inline auto IsFrontendFading() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_FRONTEND_FADING), BOOL>(); }
    static inline auto IsGameInControlOfMusic() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_GAME_IN_CONTROL_OF_MUSIC), BOOL>(); }
    static inline auto IsGameKeyboardKeyJustPressed(int key) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_GAME_KEYBOARD_KEY_JUST_PRESSED), BOOL>(key); }
    static inline auto IsGameKeyboardKeyPressed(int key) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_GAME_KEYBOARD_KEY_PRESSED), BOOL>(key); }
    static inline auto IsGameplayCamShaking(const char* shakeName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_GAMEPLAY_CAM_SHAKING), BOOL>(shakeName); }
    static inline auto IsGameplayHintActive() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_GAMEPLAY_HINT_ACTIVE), BOOL>(); }
    static inline auto IsGermanVersion() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_GERMAN_VERSION), BOOL>(); }
    static inline auto IsGlassBrokenInRadius() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_GLASS_BROKEN_IN_RADIUS), Any>(); }
    static inline auto IsGlassBrokenOnObject() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_GLASS_BROKEN_ON_OBJECT), Any>(); }
    static inline auto IsGoldenGunFinished(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_GOLDEN_GUN_FINISHED), BOOL>(name); }
    static inline auto IsGrindComplete(int grindId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_GRIND_COMPLETE), BOOL>(grindId); }
    static inline auto IsHeliPartBroken(Vehicle heli, BOOL a1, BOOL a2, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_HELI_PART_BROKEN), BOOL>(heli, a1, a2, a3); }
    static inline auto IsHelpMessageBeingDisplayed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_HELP_MESSAGE_BEING_DISPLAYED), Any>(); }
    static inline auto IsHudPreferenceSwitchedOn() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_HUD_PREFERENCE_SWITCHED_ON), BOOL>(); }
    static inline auto IsHudReticuleComplex() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_HUD_RETICULE_COMPLEX), BOOL>(); }
    static inline auto IsInCpchallengeMode() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_IN_CPCHALLENGE_MODE), BOOL>(); }
    static inline auto IsInNymHardcoreMode() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_IN_NYM_HARDCORE_MODE), BOOL>(); }
    static inline auto IsInNyminuteMode() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_IN_NYMINUTE_MODE), BOOL>(); }
    static inline auto IsInScoreAttackMode() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_IN_SCORE_ATTACK_MODE), BOOL>(); }
    static inline auto IsInSouthpawMode() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_IN_SOUTHPAW_MODE), BOOL>(); }
    static inline auto IsInSpectatorMode() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_IN_SPECTATOR_MODE), BOOL>(); }
    static inline auto IsInStoryMode() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_IN_STORY_MODE), BOOL>(); }
    static inline auto IsInteractiontextAvailable() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_INTERACTIONTEXT_AVAILABLE), BOOL>(); }
    static inline auto IsInteractiontextOnscreen() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_INTERACTIONTEXT_ONSCREEN), BOOL>(); }
    static inline auto IsInteriorScene() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_INTERIOR_SCENE), BOOL>(); }
    static inline auto IsIntroMovieCancelled() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_INTRO_MOVIE_CANCELLED), BOOL>(); }
    static inline auto IsJapaneseGame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_JAPANESE_GAME), BOOL>(); }
    static inline auto IsKeyboardKeyJustPressed(int key) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_KEYBOARD_KEY_JUST_PRESSED), BOOL>(key); }
    static inline auto IsKeyboardKeyPressed(int key) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_KEYBOARD_KEY_PRESSED), BOOL>(key); }
    static inline auto IsLastManStandAnimatedRecoveryBeingHeld() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_LAST_MAN_STAND_ANIMATED_RECOVERY_BEING_HELD), BOOL>(); }
    static inline auto IsLastManStandingActive() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_LAST_MAN_STANDING_ACTIVE), BOOL>(); }
    static inline auto IsLeftVehicleHeadlightBroken(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_LEFT_VEHICLE_HEADLIGHT_BROKEN), BOOL>(vehicle); }
    static inline auto IsLmsTutorialComplete() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_LMS_TUTORIAL_COMPLETE), BOOL>(); }
    static inline auto IsLoadoutSlotAvailable(int slot) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_LOADOUT_SLOT_AVAILABLE), BOOL>(slot); }
    static inline auto IsLoadoutValid(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_LOADOUT_VALID), BOOL>(index); }
    static inline auto IsLocalPlayerInSocialClub() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_LOCAL_PLAYER_IN_SOCIAL_CLUB), BOOL>(); }
    static inline auto IsLocalPlayerReadyToInteractWith(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_LOCAL_PLAYER_READY_TO_INTERACT_WITH), Any>(a0); }
    static inline auto IsLocalPlayerSprinting() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_LOCAL_PLAYER_SPRINTING), BOOL>(); }
    static inline auto IsLocalPlayerStillScanningWorld() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_LOCAL_PLAYER_STILL_SCANNING_WORLD), BOOL>(); }
    static inline auto IsLookInverted() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_LOOK_INVERTED), BOOL>(); }
    static inline auto IsMagdemo() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_MAGDEMO), BOOL>(); }
    static inline auto IsMarketingKeyboardKeyJustPressed(int key) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_MARKETING_KEYBOARD_KEY_JUST_PRESSED), BOOL>(key); }
    static inline auto IsMessageBeingDisplayed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_MESSAGE_BEING_DISPLAYED), BOOL>(); }
    static inline auto IsMinigameInProgress() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_MINIGAME_IN_PROGRESS), BOOL>(); }
    static inline auto IsModelAPed(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_MODEL_A_PED), BOOL>(modelHash); }
    static inline auto IsModelAVehicle(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_MODEL_A_VEHICLE), BOOL>(modelHash); }
    static inline auto IsModelInCdimage(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_MODEL_IN_CDIMAGE), BOOL>(modelHash); }
    static inline auto IsMonologuePlaying() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_MONOLOGUE_PLAYING), BOOL>(); }
    static inline auto IsMpTutorialMessagesShown() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_MP_TUTORIAL_MESSAGES_SHOWN), BOOL>(); }
    static inline auto IsNetworkSession() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_NETWORK_SESSION), BOOL>(); }
    static inline auto IsNewGameRequested() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_NEW_GAME_REQUESTED), BOOL>(); }
    static inline auto IsNonFragObjectSmashed(float x, float y, float z, float radius, Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_NON_FRAG_OBJECT_SMASHED), BOOL>(x, y, z, radius, modelHash); }
    static inline auto IsObjectAtCoord(Object object, float a1, float a2, float a3, float a4, float a5, float a6, BOOL a7, BOOL a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_OBJECT_AT_COORD), BOOL>(object, a1, a2, a3, a4, a5, a6, a7, a8); }
    static inline auto IsObjectAttached(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_OBJECT_ATTACHED), BOOL>(object); }
    static inline auto IsObjectFixedWaitingForCollision(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_OBJECT_FIXED_WAITING_FOR_COLLISION), BOOL>(object); }
    static inline auto IsObjectInAngledArea(Object object, float x1, float y1, float z1, float x2, float y2, float z2, float a7, BOOL a8, BOOL a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_OBJECT_IN_ANGLED_AREA), BOOL>(object, x1, y1, z1, x2, y2, z2, a7, a8, a9); }
    static inline auto IsObjectInArea(Object object, float x1, float y1, float z1, float x2, float y2, float z2, BOOL a7, BOOL a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_OBJECT_IN_AREA), BOOL>(object, x1, y1, z1, x2, y2, z2, a7, a8); }
    static inline auto IsObjectInCrosshairCylinder(Object object, float a1, float a2, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_OBJECT_IN_CROSSHAIR_CYLINDER), BOOL>(object, a1, a2, a3); }
    static inline auto IsObjectInGameplayHelperBox(Object object, const char* boxName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_OBJECT_IN_GAMEPLAY_HELPER_BOX), BOOL>(object, boxName); }
    static inline auto IsObjectInWater(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_OBJECT_IN_WATER), BOOL>(object); }
    static inline auto IsObjectOnFire(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_OBJECT_ON_FIRE), BOOL>(object); }
    static inline auto IsObjectOnScreen(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_OBJECT_ON_SCREEN), BOOL>(object); }
    static inline auto IsObjectPlayingAnim(Object object, const char* animName, const char* animDict) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_OBJECT_PLAYING_ANIM), BOOL>(object, animName, animDict); }
    static inline auto IsObjectReassignmentInProgress() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_OBJECT_REASSIGNMENT_IN_PROGRESS), BOOL>(); }
    static inline auto IsObjectStatic(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_OBJECT_STATIC), BOOL>(object); }
    static inline auto IsObjectUpright(Object object, float a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_OBJECT_UPRIGHT), BOOL>(object, a1); }
    static inline auto IsObjectWithinBrainActivationRange(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE), BOOL>(object); }
    static inline auto IsPauseMenuActive() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PAUSE_MENU_ACTIVE), BOOL>(); }
    static inline auto IsPcBuild() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PC_BUILD), BOOL>(); }
    static inline auto IsPedAMissionPed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_A_MISSION_PED), BOOL>(ped); }
    static inline auto IsPedArmed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_ARMED), BOOL>(ped); }
    static inline auto IsPedAtCoord(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, BOOL a7, int a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_AT_COORD), BOOL>(ped, x1, y1, z1, x2, y2, z2, a7, a8); }
    static inline auto IsPedAtObject(Ped ped, Object object, float a2, float a3, float a4, BOOL a5, int a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_AT_OBJECT), BOOL>(ped, object, a2, a3, a4, a5, a6); }
    static inline auto IsPedAtPed(Ped ped, Ped ped2, float a2, float a3, float a4, BOOL a5, int a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_AT_PED), BOOL>(ped, ped2, a2, a3, a4, a5, a6); }
    static inline auto IsPedAtVehicle(Ped ped, Vehicle vehicle, float a2, float a3, float a4, BOOL a5, int a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_AT_VEHICLE), BOOL>(ped, vehicle, a2, a3, a4, a5, a6); }
    static inline auto IsPedAttachedToAnyVehicle(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_ATTACHED_TO_ANY_VEHICLE), BOOL>(ped); }
    static inline auto IsPedAttachedToObject(Ped ped, Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_ATTACHED_TO_OBJECT), BOOL>(ped, object); }
    static inline auto IsPedBeingGrappled(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_BEING_GRAPPLED), BOOL>(ped); }
    static inline auto IsPedBeingJacked(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_BEING_JACKED), BOOL>(ped); }
    static inline auto IsPedBlindfiringInCover(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_BLINDFIRING_IN_COVER), BOOL>(ped); }
    static inline auto IsPedClonedEverywhere(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_CLONED_EVERYWHERE), BOOL>(ped); }
    static inline auto IsPedDead(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_DEAD), BOOL>(ped); }
    static inline auto IsPedDoingDriveby(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_DOING_DRIVEBY), BOOL>(ped); }
    static inline auto IsPedDualWielding(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_DUAL_WIELDING), BOOL>(ped); }
    static inline auto IsPedDucking(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_DUCKING), BOOL>(ped); }
    static inline auto IsPedFacingPed(Ped ped, Ped ped2, float angle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_FACING_PED), BOOL>(ped, ped2, angle); }
    static inline auto IsPedFatallyInjured(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_FATALLY_INJURED), BOOL>(ped); }
    static inline auto IsPedFleeing(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_FLEEING), BOOL>(ped); }
    static inline auto IsPedGesturing(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_GESTURING), BOOL>(ped); }
    static inline auto IsPedGettingIntoAVehicle(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_GETTING_INTO_A_VEHICLE), BOOL>(ped); }
    static inline auto IsPedGettingUp(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_GETTING_UP), BOOL>(ped); }
    static inline auto IsPedGroupLeader(Ped ped, Group group) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_GROUP_LEADER), BOOL>(ped, group); }
    static inline auto IsPedGroupMember(Ped ped, Group group) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_GROUP_MEMBER), BOOL>(ped, group); }
    static inline auto IsPedHeadtrackingPed(Ped ped1, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_HEADTRACKING_PED), BOOL>(ped1, ped2); }
    static inline auto IsPedHidingInCover(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_HIDING_IN_COVER), BOOL>(ped); }
    static inline auto IsPedInAir(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_AIR), BOOL>(ped); }
    static inline auto IsPedInAngledArea(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float angle, BOOL a8, int a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_ANGLED_AREA), BOOL>(ped, x1, y1, z1, x2, y2, z2, angle, a8, a9); }
    static inline auto IsPedInAnyBoat(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_ANY_BOAT), BOOL>(ped); }
    static inline auto IsPedInAnyHeli(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_ANY_HELI), BOOL>(ped); }
    static inline auto IsPedInAnyPlane(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_ANY_PLANE), BOOL>(ped); }
    static inline auto IsPedInAnyPoliceVehicle(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_ANY_POLICE_VEHICLE), BOOL>(ped); }
    static inline auto IsPedInAnyTaxi(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_ANY_TAXI), BOOL>(ped); }
    static inline auto IsPedInAnyTrain(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_ANY_TRAIN), BOOL>(ped); }
    static inline auto IsPedInAnyVehicle(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_ANY_VEHICLE), BOOL>(ped); }
    static inline auto IsPedInArea(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, BOOL a7, int a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_AREA), BOOL>(ped, x1, y1, z1, x2, y2, z2, a7, a8); }
    static inline auto IsPedInCombat(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_COMBAT), BOOL>(ped); }
    static inline auto IsPedInCover(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_COVER), BOOL>(ped); }
    static inline auto IsPedInCrosshairCone(Ped ped, float a1, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_CROSSHAIR_CONE), BOOL>(ped, a1, a2); }
    static inline auto IsPedInCrosshairCylinder(Ped ped, float a1, float a2, BOOL a3, float a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_CROSSHAIR_CYLINDER), BOOL>(ped, a1, a2, a3, a4); }
    static inline auto IsPedInCrosshairCylinderOffset(Ped ped, float a1, float a2, float a3, float a4, float a5, float a6, BOOL a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_CROSSHAIR_CYLINDER_OFFSET), BOOL>(ped, a1, a2, a3, a4, a5, a6, a7); }
    static inline auto IsPedInFlyingVehicle(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_FLYING_VEHICLE), BOOL>(ped); }
    static inline auto IsPedInGameplayHelperBox(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_GAMEPLAY_HELPER_BOX), BOOL>(ped, name); }
    static inline auto IsPedInGameplayHelperVolume(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_GAMEPLAY_HELPER_VOLUME), BOOL>(ped, name); }
    static inline auto IsPedInGroup(Ped ped, Group group) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_GROUP), BOOL>(ped, group); }
    static inline auto IsPedInMeleeCombat(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_MELEE_COMBAT), BOOL>(ped); }
    static inline auto IsPedInModel(Ped ped, Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_MODEL), BOOL>(ped, modelHash); }
    static inline auto IsPedInSeamlessTriggerArea() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_SEAMLESS_TRIGGER_AREA), BOOL>(); }
    static inline auto IsPedInSphereAreaOfAnyEnemyPeds(Ped ped, float x, float y, float z, float radius, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_SPHERE_AREA_OF_ANY_ENEMY_PEDS), BOOL>(ped, x, y, z, radius, a5); }
    static inline auto IsPedInVehicle(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_VEHICLE), BOOL>(ped, vehicle); }
    static inline auto IsPedInWater(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_WATER), BOOL>(ped); }
    static inline auto IsPedInZone(Ped ped, const char* zoneName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_IN_ZONE), BOOL>(ped, zoneName); }
    static inline auto IsPedInjured(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_INJURED), BOOL>(ped); }
    static inline auto IsPedInsideTrain(Ped ped, Vehicle train) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_INSIDE_TRAIN), BOOL>(ped, train); }
    static inline auto IsPedInvestigating(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_INVESTIGATING), BOOL>(ped); }
    static inline auto IsPedJacking(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_JACKING), BOOL>(ped); }
    static inline auto IsPedLosClearToTargetPed(Ped ped, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_LOS_CLEAR_TO_TARGET_PED), BOOL>(ped, ped2); }
    static inline auto IsPedMale(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_MALE), BOOL>(ped); }
    static inline auto IsPedModel(Ped ped, Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_MODEL), BOOL>(ped, modelHash); }
    static inline auto IsPedOnAnyBike(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_ON_ANY_BIKE), BOOL>(ped); }
    static inline auto IsPedOnFire(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_ON_FIRE), BOOL>(ped); }
    static inline auto IsPedOnFoot(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_ON_FOOT), BOOL>(ped); }
    static inline auto IsPedOnScreen(Ped ped, BOOL unk) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_ON_SCREEN), BOOL>(ped, unk); }
    static inline auto IsPedPeekingInCover(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_PEEKING_IN_COVER), BOOL>(ped); }
    static inline auto IsPedPickingUpPickup(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_PICKING_UP_PICKUP), BOOL>(ped); }
    static inline auto IsPedPlayingAnim(Ped ped, const char* animDict, const char* animName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_PLAYING_ANIM), BOOL>(ped, animDict, animName); }
    static inline auto IsPedProcessingFrozen(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_PROCESSING_FROZEN), BOOL>(ped); }
    static inline auto IsPedRagdoll(Ped ped, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_RAGDOLL), BOOL>(ped, a1); }
    static inline auto IsPedReloading(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_RELOADING), BOOL>(ped); }
    static inline auto IsPedRespondingToEvent(Ped ped, int event) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_RESPONDING_TO_EVENT), BOOL>(ped, event); }
    static inline auto IsPedRetreating(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_RETREATING), BOOL>(ped); }
    static inline auto IsPedRunningTask(Ped ped, int task) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_RUNNING_TASK), BOOL>(ped, task); }
    static inline auto IsPedShooting(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_SHOOTING), BOOL>(ped); }
    static inline auto IsPedShootingInArea(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, BOOL a7, BOOL a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_SHOOTING_IN_AREA), BOOL>(ped, x1, y1, z1, x2, y2, z2, a7, a8); }
    static inline auto IsPedSittingIdle(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_SITTING_IDLE), BOOL>(ped); }
    static inline auto IsPedSittingInAnyVehicle(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_SITTING_IN_ANY_VEHICLE), BOOL>(ped); }
    static inline auto IsPedSittingInVehicle(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_SITTING_IN_VEHICLE), BOOL>(ped, vehicle); }
    static inline auto IsPedStopped(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_STOPPED), BOOL>(ped); }
    static inline auto IsPedStuckUnderVehicle(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_STUCK_UNDER_VEHICLE), BOOL>(ped); }
    static inline auto IsPedSwimming(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_SWIMMING), BOOL>(ped); }
    static inline auto IsPedTouchingObject(Ped ped, Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_TOUCHING_OBJECT), BOOL>(ped, object); }
    static inline auto IsPedTouchingPed(Ped ped, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_TOUCHING_PED), BOOL>(ped, ped2); }
    static inline auto IsPedTouchingVehicle(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_TOUCHING_VEHICLE), BOOL>(ped, vehicle); }
    static inline auto IsPedTryingToEnterALockedVehicle(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE), BOOL>(ped); }
    static inline auto IsPedUsingAnyScenario(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_USING_ANY_SCENARIO), BOOL>(ped); }
    static inline auto IsPedUsingMp3CoverTask(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_USING_MP3_COVER_TASK), BOOL>(ped); }
    static inline auto IsPedUsingScenario(Ped ped, const char* scenarioName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_USING_SCENARIO), BOOL>(ped, scenarioName); }
    static inline auto IsPedVaulting(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_VAULTING), BOOL>(ped); }
    static inline auto IsPedVisible(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_VISIBLE), BOOL>(ped); }
    static inline auto IsPedWaitingForWorldCollision(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PED_WAITING_FOR_WORLD_COLLISION), BOOL>(ped); }
    static inline auto IsPickupAttachmentEnabled() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PICKUP_ATTACHMENT_ENABLED), Any>(); }
    static inline auto IsPickupAttachmentToggled() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PICKUP_ATTACHMENT_TOGGLED), Any>(); }
    static inline auto IsPickupConsumed(int pickup) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PICKUP_CONSUMED), BOOL>(pickup); }
    static inline auto IsPlaybackGoingOnForPed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYBACK_GOING_ON_FOR_PED), BOOL>(ped); }
    static inline auto IsPlaybackGoingOnForVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYBACK_GOING_ON_FOR_VEHICLE), BOOL>(vehicle); }
    static inline auto IsPlaybackUsingAiGoingOnForVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE), BOOL>(vehicle); }
    static inline auto IsPlayerBeingArrested() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_BEING_ARRESTED), BOOL>(); }
    static inline auto IsPlayerClimbing(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_CLIMBING), BOOL>(player); }
    static inline auto IsPlayerControlOn(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_CONTROL_ON), BOOL>(player); }
    static inline auto IsPlayerDead(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_DEAD), BOOL>(player); }
    static inline auto IsPlayerDoingMeleeGrapple(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_DOING_MELEE_GRAPPLE), BOOL>(player); }
    static inline auto IsPlayerFreeAimingAtPed(Player player, Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_FREE_AIMING_AT_PED), BOOL>(player, ped); }
    static inline auto IsPlayerFreeForAmbientTask(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_FREE_FOR_AMBIENT_TASK), BOOL>(player); }
    static inline auto IsPlayerGunRaised(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_GUN_RAISED), BOOL>(player); }
    static inline auto IsPlayerInteractingWithVolume(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_INTERACTING_WITH_VOLUME), Any>(a0, a1); }
    static inline auto IsPlayerLockedInCover(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_LOCKED_IN_COVER), BOOL>(player); }
    static inline auto IsPlayerLoggingInNp() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_LOGGING_IN_NP), BOOL>(); }
    static inline auto IsPlayerOnline() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_ONLINE), BOOL>(); }
    static inline auto IsPlayerOnlineGamespy() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_ONLINE_GAMESPY), BOOL>(); }
    static inline auto IsPlayerOnlineNp() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_ONLINE_NP), BOOL>(); }
    static inline auto IsPlayerPedFreeAimingAtPed(Ped playerPed, Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_PED_FREE_AIMING_AT_PED), BOOL>(playerPed, ped); }
    static inline auto IsPlayerPissedOff(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_PISSED_OFF), BOOL>(player); }
    static inline auto IsPlayerPlaying(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_PLAYING), BOOL>(player); }
    static inline auto IsPlayerPressingHorn(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_PRESSING_HORN), BOOL>(player); }
    static inline auto IsPlayerReadyForCutscene(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_READY_FOR_CUTSCENE), BOOL>(player); }
    static inline auto IsPlayerScoreGreater(Player player, int score) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_SCORE_GREATER), BOOL>(player, score); }
    static inline auto IsPlayerScriptControlOn(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_SCRIPT_CONTROL_ON), BOOL>(player); }
    static inline auto IsPlayerShootdodging() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_SHOOTDODGING), BOOL>(); }
    static inline auto IsPlayerTargettingAnything(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_TARGETTING_ANYTHING), BOOL>(player); }
    static inline auto IsPlayerTargettingObject(Player player, Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_TARGETTING_OBJECT), BOOL>(player, object); }
    static inline auto IsPlayerTargettingPed(Player player, Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_TARGETTING_PED), BOOL>(player, ped); }
    static inline auto IsPlayerWantedLevelGreater() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PLAYER_WANTED_LEVEL_GREATER), Any>(); }
    static inline auto IsPointObscuredByAMissionEntity(float x1, float y1, float z1, float x2, float y2, float z2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_POINT_OBSCURED_BY_A_MISSION_ENTITY), BOOL>(x1, y1, z1, x2, y2, z2); }
    static inline auto IsProjectileInArea() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PROJECTILE_IN_AREA), Any>(); }
    static inline auto IsProjectileTypeInArea() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_PROJECTILE_TYPE_IN_AREA), Any>(); }
    static inline auto IsQuitConfirming() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_QUIT_CONFIRMING), BOOL>(); }
    static inline auto IsRecordingGoingOnForPed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_RECORDING_GOING_ON_FOR_PED), BOOL>(ped); }
    static inline auto IsRecordingGoingOnForVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_RECORDING_GOING_ON_FOR_VEHICLE), BOOL>(vehicle); }
    static inline auto IsRestartcheckpointDisabledByScript() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_RESTARTCHECKPOINT_DISABLED_BY_SCRIPT), BOOL>(); }
    static inline auto IsRestartingFeForNewGame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_RESTARTING_FE_FOR_NEW_GAME), BOOL>(); }
    static inline auto IsRightVehicleHeadlightBroken(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_RIGHT_VEHICLE_HEADLIGHT_BROKEN), BOOL>(vehicle); }
    static inline auto IsRoboTesting() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_ROBO_TESTING), BOOL>(); }
    static inline auto IsRocketInFlight() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_ROCKET_IN_FLIGHT), BOOL>(); }
    static inline auto IsSafeToKillPlayer() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SAFE_TO_KILL_PLAYER), BOOL>(); }
    static inline auto IsScreenFadedIn() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SCREEN_FADED_IN), BOOL>(); }
    static inline auto IsScreenFadedOut() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SCREEN_FADED_OUT), BOOL>(); }
    static inline auto IsScreenFadingIn() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SCREEN_FADING_IN), BOOL>(); }
    static inline auto IsScreenFadingOut() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SCREEN_FADING_OUT), BOOL>(); }
    static inline auto IsScriptAudioBankLoaded(const char* name, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SCRIPT_AUDIO_BANK_LOADED), BOOL>(name, a1); }
    static inline auto IsScriptDatabaseBound(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SCRIPT_DATABASE_BOUND), BOOL>(name); }
    static inline auto IsScriptMoviePlaying(int a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SCRIPT_MOVIE_PLAYING), BOOL>(a0); }
    static inline auto IsScriptedConversationOngoing(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SCRIPTED_CONVERSATION_ONGOING), Any>(a0); }
    static inline auto IsScriptedSpeechPlaying(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SCRIPTED_SPEECH_PLAYING), BOOL>(ped); }
    static inline auto IsScriptedfxEnabled() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SCRIPTEDFX_ENABLED), BOOL>(); }
    static inline auto IsSittingObjectNear(float x, float y, float z, Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SITTING_OBJECT_NEAR), BOOL>(x, y, z, modelHash); }
    static inline auto IsSniperBulletInArea() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SNIPER_BULLET_IN_AREA), Any>(); }
    static inline auto IsSniperInverted() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SNIPER_INVERTED), BOOL>(); }
    static inline auto IsSniperScopeVisible() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SNIPER_SCOPE_VISIBLE), BOOL>(); }
    static inline auto IsSpLevelReplay() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SP_LEVEL_REPLAY), BOOL>(); }
    static inline auto IsSphereVisible(float x, float y, float z, float radius, BOOL a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SPHERE_VISIBLE), BOOL>(x, y, z, radius, a4); }
    static inline auto IsSphereVisibleToAnotherMachine(float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE), BOOL>(x, y, z, radius); }
    static inline auto IsStatFloat(const char* statName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_STAT_FLOAT), BOOL>(statName); }
    static inline auto IsStatHashFloat(Hash statHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_STAT_HASH_FLOAT), BOOL>(statHash); }
    static inline auto IsStreamingAdditionalText(int slot) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_STREAMING_ADDITIONAL_TEXT), BOOL>(slot); }
    static inline auto IsStreamingPriorityRequests() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_STREAMING_PRIORITY_REQUESTS), BOOL>(); }
    static inline auto IsStringNull(const char* str) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_STRING_NULL), BOOL>(str); }
    static inline auto IsSystemUiBeingDisplayed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_SYSTEM_UI_BEING_DISPLAYED), BOOL>(); }
    static inline auto IsTargetInValidCoverFromPed(Ped ped, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_TARGET_IN_VALID_COVER_FROM_PED), BOOL>(ped, ped2); }
    static inline auto IsTaxiLightOn(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_TAXI_LIGHT_ON), BOOL>(vehicle); }
    static inline auto IsTextFontLoaded(int font) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_TEXT_FONT_LOADED), BOOL>(font); }
    static inline auto IsThisAMinigameScript() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_THIS_A_MINIGAME_SCRIPT), BOOL>(); }
    static inline auto IsThisHelpMessageBeingDisplayed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_THIS_HELP_MESSAGE_BEING_DISPLAYED), Any>(); }
    static inline auto IsThisHelpMessageWithNumberBeingDisplayed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_THIS_HELP_MESSAGE_WITH_NUMBER_BEING_DISPLAYED), Any>(); }
    static inline auto IsThisHelpMessageWithStringBeingDisplayed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_THIS_HELP_MESSAGE_WITH_STRING_BEING_DISPLAYED), Any>(); }
    static inline auto IsThisModelABike(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_THIS_MODEL_A_BIKE), BOOL>(modelHash); }
    static inline auto IsThisModelABoat(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_THIS_MODEL_A_BOAT), BOOL>(modelHash); }
    static inline auto IsThisModelACar(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_THIS_MODEL_A_CAR), BOOL>(modelHash); }
    static inline auto IsThisModelAHeli(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_THIS_MODEL_A_HELI), BOOL>(modelHash); }
    static inline auto IsThisModelAPlane(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_THIS_MODEL_A_PLANE), BOOL>(modelHash); }
    static inline auto IsThisModelATrain(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_THIS_MODEL_A_TRAIN), BOOL>(modelHash); }
    static inline auto IsThisPrintBeingDisplayed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_THIS_PRINT_BEING_DISPLAYED), Any>(); }
    static inline auto IsThisThreadConnected(int threadId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_THIS_THREAD_CONNECTED), BOOL>(threadId); }
    static inline auto IsThisThreadIsolated(int threadId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_THIS_THREAD_ISOLATED), BOOL>(threadId); }
    static inline auto IsThreadActive(int threadId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_THREAD_ACTIVE), BOOL>(threadId); }
    static inline auto IsThrownWeapon(Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_THROWN_WEAPON), BOOL>(weaponHash); }
    static inline auto IsTickerActivityHigh() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_TICKER_ACTIVITY_HIGH), BOOL>(); }
    static inline auto IsTickerActivityLow() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_TICKER_ACTIVITY_LOW), BOOL>(); }
    static inline auto IsTimeOfDayFrozen() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_TIME_OF_DAY_FROZEN), BOOL>(); }
    static inline auto IsTransitionMoviePlaying() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_TRANSITION_MOVIE_PLAYING), BOOL>(); }
    static inline auto IsTutorialComplete() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_TUTORIAL_COMPLETE), BOOL>(); }
    static inline auto IsUsingAnimatedLastManStanding() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_USING_ANIMATED_LAST_MAN_STANDING), BOOL>(); }
    static inline auto IsUsingController() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_USING_CONTROLLER), BOOL>(); }
    static inline auto IsVehicleAMissionVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_A_MISSION_VEHICLE), BOOL>(vehicle); }
    static inline auto IsVehicleAtCoord(Vehicle vehicle, float xPos, float yPos, float zPos, float xSize, float ySize, float zSize, BOOL a7, BOOL a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_AT_COORD), BOOL>(vehicle, xPos, yPos, zPos, xSize, ySize, zSize, a7, a8); }
    static inline auto IsVehicleAttached(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_ATTACHED), BOOL>(vehicle); }
    static inline auto IsVehicleDead(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_DEAD), BOOL>(vehicle); }
    static inline auto IsVehicleDoorDamaged(Vehicle vehicle, int door) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_DOOR_DAMAGED), BOOL>(vehicle, door); }
    static inline auto IsVehicleDoorFullyOpen(Vehicle vehicle, int door) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_DOOR_FULLY_OPEN), BOOL>(vehicle, door); }
    static inline auto IsVehicleDriveable(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_DRIVEABLE), BOOL>(vehicle); }
    static inline auto IsVehicleExtraTurnedOn(Vehicle vehicle, int extra) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_EXTRA_TURNED_ON), BOOL>(vehicle, extra); }
    static inline auto IsVehicleInAirProper(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_IN_AIR_PROPER), BOOL>(vehicle); }
    static inline auto IsVehicleInArea(Vehicle vehicle, float x1, float y1, float z1, float x2, float y2, float z2, BOOL a7, BOOL a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_IN_AREA), BOOL>(vehicle, x1, y1, z1, x2, y2, z2, a7, a8); }
    static inline auto IsVehicleInWater(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_IN_WATER), BOOL>(vehicle); }
    static inline auto IsVehicleModel(Vehicle vehicle, Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_MODEL), BOOL>(vehicle, modelHash); }
    static inline auto IsVehicleOnAllWheels(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_ON_ALL_WHEELS), BOOL>(vehicle); }
    static inline auto IsVehicleOnFire(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_ON_FIRE), BOOL>(vehicle); }
    static inline auto IsVehicleOnScreen(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_ON_SCREEN), BOOL>(vehicle); }
    static inline auto IsVehicleSeatFree(Vehicle vehicle, int seatIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_SEAT_FREE), BOOL>(vehicle, seatIndex); }
    static inline auto IsVehicleSirenOn(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_SIREN_ON), BOOL>(vehicle); }
    static inline auto IsVehicleStopped(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_STOPPED), BOOL>(vehicle); }
    static inline auto IsVehicleStoppedAtTrafficLights(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS), BOOL>(vehicle); }
    static inline auto IsVehicleStuckOnRoof(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_STUCK_ON_ROOF), BOOL>(vehicle); }
    static inline auto IsVehicleStuckTimerUp(Vehicle vehicle, int index, int time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_STUCK_TIMER_UP), BOOL>(vehicle, index, time); }
    static inline auto IsVehicleTouchingVehicle(Vehicle vehicle1, Vehicle vehicle2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_TOUCHING_VEHICLE), BOOL>(vehicle1, vehicle2); }
    static inline auto IsVehicleTyreBurst(Vehicle vehicle, int tireIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_TYRE_BURST), BOOL>(vehicle, tireIndex); }
    static inline auto IsVehicleUpright(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_UPRIGHT), BOOL>(vehicle); }
    static inline auto IsVehicleUpsidedown(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_UPSIDEDOWN), BOOL>(vehicle); }
    static inline auto IsVehicleWaitingForWorldCollision(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_WAITING_FOR_WORLD_COLLISION), BOOL>(vehicle); }
    static inline auto IsVehicleWindowIntact(Vehicle vehicle, int window) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_VEHICLE_WINDOW_INTACT), BOOL>(vehicle, window); }
    static inline auto IsWeaponAttachmentEnabled(Weapon weapon, int attachmentIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_WEAPON_ATTACHMENT_ENABLED), BOOL>(weapon, attachmentIndex); }
    static inline auto IsWeaponAttachmentToggled(Weapon weapon, int attachmentIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_WEAPON_ATTACHMENT_TOGGLED), BOOL>(weapon, attachmentIndex); }
    static inline auto IsWeaponPickupVisible() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_WEAPON_PICKUP_VISIBLE), BOOL>(); }
    static inline auto IsWorldPointWithinBrainActivationRange() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE), BOOL>(); }
    static inline auto IsXbox360Version() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::IS_XBOX360_VERSION), BOOL>(); }
    static inline auto IseqDoesExist(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ISEQ_DOES_EXIST), BOOL>(hash); }
    static inline auto IseqGetName(int bufferSize, char* buffer, Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ISEQ_GET_NAME), void>(bufferSize, buffer, hash); }
    static inline auto IseqGetState(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ISEQ_GET_STATE), int>(hash); }
    static inline auto IseqInterrupt(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ISEQ_INTERRUPT), void>(hash); }
    static inline auto IseqIsLoaded(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ISEQ_IS_LOADED), BOOL>(hash); }
    static inline auto IseqQueryEntityAnimationPhase(Hash hash, const char* animDict, const char* animName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ISEQ_QUERY_ENTITY_ANIMATION_PHASE), float>(hash, animDict, animName); }
    static inline auto IseqQueryEntityState(Hash hash, const char* entityName, int state) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ISEQ_QUERY_ENTITY_STATE), BOOL>(hash, entityName, state); }
    static inline auto IseqQueryState(Hash hash, int state) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ISEQ_QUERY_STATE), BOOL>(hash, state); }
    static inline auto IseqRegisterEntity(Hash hash, const char* entityName, Entity entity, int entityType) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ISEQ_REGISTER_ENTITY), BOOL>(hash, entityName, entity, entityType); }
    static inline auto IseqRequest(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ISEQ_REQUEST), void>(hash); }
    static inline auto IseqStart(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ISEQ_START), void>(hash); }
    static inline auto IseqTerminate(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ISEQ_TERMINATE), void>(hash); }
    static inline auto IseqUnregisterEntity(Hash hash, const char* entityName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ISEQ_UNREGISTER_ENTITY), void>(hash, entityName); }
    static inline auto Istoastanimating() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ISTOASTANIMATING), BOOL>(); }
    static inline auto KnockOffPropAtAnchorPoint(Ped ped, int propIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::KNOCK_OFF_PROP_AT_ANCHOR_POINT), void>(ped, propIndex); }
    static inline auto KnockPedOffBike(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::KNOCK_PED_OFF_BIKE), void>(ped); }
    static inline auto LastManStandingRecover() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LAST_MAN_STANDING_RECOVER), void>(); }
    static inline auto LastManStandingRevive() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LAST_MAN_STANDING_REVIVE), Any>(); }
    static inline auto LeaderboardsGetColumnId() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_GET_COLUMN_ID), Any>(); }
    static inline auto LeaderboardsGetNumberOfColumns(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_GET_NUMBER_OF_COLUMNS), Any>(a0); }
    static inline auto LeaderboardsReadRosForLocalGamer(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_READ__ROS__FOR_LOCAL_GAMER), BOOL>(a0); }
    static inline auto LeaderboardsReadByCommunity(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_READ_BY_COMMUNITY), Any>(a0); }
    static inline auto LeaderboardsReadByGamer() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_READ_BY_GAMER), Any>(); }
    static inline auto LeaderboardsReadByRadiusEx() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_READ_BY_RADIUS_EX), Any>(); }
    static inline auto LeaderboardsReadByRankEx(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_READ_BY_RANK_EX), Any>(a0, a1, a2, a3, a4); }
    static inline auto LeaderboardsReadFinishedAndSucceeded(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_READ_FINISHED_AND_SUCCEEDED), Any>(a0); }
    static inline auto LeaderboardsReadForLocalGamerEx(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_READ_FOR_LOCAL_GAMER_EX), Any>(a0, a1); }
    static inline auto LeaderboardsReadGetNumRowsEx() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_READ_GET_NUM_ROWS_EX), Any>(); }
    static inline auto LeaderboardsReadGetRowDataEx(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_READ_GET_ROW_DATA_EX), Any>(a0, a1, a2, a3); }
    static inline auto LeaderboardsReadGetRowDataForLocalGamerEx(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_READ_GET_ROW_DATA_FOR_LOCAL_GAMER_EX), Any>(a0, a1, a2); }
    static inline auto LeaderboardsReadPending(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_READ_PENDING), Any>(a0); }
    static inline auto LeaderboardsReadReleaseData(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_READ_RELEASE_DATA), void>(a0); }
    static inline auto LeaderboardsWriteRosPlayerData(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_WRITE__ROS__PLAYER_DATA), Any>(a0, a1); }
    static inline auto LeaderboardsWriteFlush() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_WRITE_FLUSH), Any>(); }
    static inline auto LeaderboardsWriteGroupData(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_WRITE_GROUP_DATA), Any>(a0, a1); }
    static inline auto LeaderboardsWritePlayerData(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LEADERBOARDS_WRITE_PLAYER_DATA), Any>(a0, a1); }
    static inline auto LoadAdditionalText(const char* gxt, int slot) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOAD_ADDITIONAL_TEXT), void>(gxt, slot); }
    static inline auto LoadAllObjectsNow() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOAD_ALL_OBJECTS_NOW), void>(); }
    static inline auto LoadAllPathNodes(BOOL a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOAD_ALL_PATH_NODES), BOOL>(a0); }
    static inline auto LoadBulletCamBank() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOAD_BULLET_CAM_BANK), Any>(); }
    static inline auto LoadPathNodesInArea(float x1, float y1, float x2, float y2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOAD_PATH_NODES_IN_AREA), void>(x1, y1, x2, y2); }
    static inline auto LoadPedDecisionMaker() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOAD_PED_DECISION_MAKER), Any>(); }
    static inline auto LoadScene(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOAD_SCENE), void>(x, y, z); }
    static inline auto LoadSceneForRoomByKey(Interior interior, Hash roomHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOAD_SCENE_FOR_ROOM_BY_KEY), void>(interior, roomHash); }
    static inline auto LoadScriptAudioBank(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOAD_SCRIPT_AUDIO_BANK), BOOL>(name); }
    static inline auto LoadScriptStream(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOAD_SCRIPT_STREAM), Any>(a0, a1); }
    static inline auto LoadTextFont() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOAD_TEXT_FONT), Any>(); }
    static inline auto LoadTextureDict(const char* dictName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOAD_TEXTURE_DICT), ScrHandle>(dictName); }
    static inline auto LoadXmlFile(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOAD_XML_FILE), BOOL>(name); }
    static inline auto LoadoutChangedDuringGame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOADOUT_CHANGED_DURING_GAME), BOOL>(); }
    static inline auto LobbyGetGameModeName(int bufferSize, char* buffer, int gameMode) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_GAME_MODE_NAME), void>(bufferSize, buffer, gameMode); }
    static inline auto LobbyGetMinPlayers() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_MIN_PLAYERS), int>(); }
    static inline auto LobbyGetNumActiveOptions() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_NUM_ACTIVE_OPTIONS), int>(); }
    static inline auto LobbyGetNumGameModes() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_NUM_GAME_MODES), int>(); }
    static inline auto LobbyGetNumOptions(int gameMode) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_NUM_OPTIONS), int>(gameMode); }
    static inline auto LobbyGetNumSubOptions(int gameMode, int option) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_NUM_SUB_OPTIONS), int>(gameMode, option); }
    static inline auto LobbyGetOptionExists(int gameMode, int option) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_OPTION_EXISTS), BOOL>(gameMode, option); }
    static inline auto LobbyGetOptionIsActive(int gameMode, int option) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_OPTION_IS_ACTIVE), BOOL>(gameMode, option); }
    static inline auto LobbyGetOptionIsDeactive(int gameMode, int option) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_OPTION_IS_DEACTIVE), BOOL>(gameMode, option); }
    static inline auto LobbyGetOptionIsDisable(int gameMode, int option) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_OPTION_IS_DISABLE), BOOL>(gameMode, option); }
    static inline auto LobbyGetOptionIsKickList(int gameMode, int option) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_OPTION_IS_KICK_LIST), BOOL>(gameMode, option); }
    static inline auto LobbyGetOptionIsList(int gameMode, int option) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_OPTION_IS_LIST), BOOL>(gameMode, option); }
    static inline auto LobbyGetOptionIsModel(int gameMode, int option) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_OPTION_IS_MODEL), BOOL>(gameMode, option); }
    static inline auto LobbyGetOptionIsNumbers(int gameMode, int option) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_OPTION_IS_NUMBERS), BOOL>(gameMode, option); }
    static inline auto LobbyGetOptionName(int bufferSize, char* buffer, int gameMode, int option) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_OPTION_NAME), void>(bufferSize, buffer, gameMode, option); }
    static inline auto LobbyGetOptionValue(int gameMode, int option) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_OPTION_VALUE), int>(gameMode, option); }
    static inline auto LobbyGetSelectedGameMode() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_SELECTED_GAME_MODE), int>(); }
    static inline auto LobbyGetSubOptionName(int bufferSize, char* buffer, int gameMode, int option) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_GET_SUB_OPTION_NAME), void>(bufferSize, buffer, gameMode, option); }
    static inline auto LobbyHasMatchStarted() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOBBY_HAS_MATCH_STARTED), BOOL>(); }
    static inline auto LocalPlayerCanDoMpInteractions() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::LOCAL_PLAYER_CAN_DO_MP_INTERACTIONS), BOOL>(); }
    static inline auto ManogametesterDisable() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::MANOGAMETESTER_DISABLE), void>(); }
    static inline auto ManogametesterDumpNow() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::MANOGAMETESTER_DUMP_NOW), BOOL>(); }
    static inline auto ManogametesterEnable() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::MANOGAMETESTER_ENABLE), void>(); }
    static inline auto MarkCoveredgemp3ForceFaceLeftOnEntry(const char* a0, const char* a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::MARK_COVEREDGEMP3_FORCE_FACE_LEFT_ON_ENTRY), void>(a0, a1, a2); }
    static inline auto MarkCoveredgemp3ForceFaceRightOnEntry(const char* a0, const char* a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::MARK_COVEREDGEMP3_FORCE_FACE_RIGHT_ON_ENTRY), void>(a0, a1, a2); }
    static inline auto MarkCoverpointmp3Searchable(const char* a0, const char* a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::MARK_COVERPOINTMP3_SEARCHABLE), void>(a0, a1, a2); }
    static inline auto MarkInteriorCollisionRequired(Interior interior) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::MARK_INTERIOR_COLLISION_REQUIRED), void>(interior); }
    static inline auto MarkUnlockAsSeen(const char* unlockSemantic) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::MARK_UNLOCK_AS_SEEN), void>(unlockSemantic); }
    static inline auto ModifyUnlock(const char* unlockSemantic, BOOL a1, BOOL a2, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::MODIFY_UNLOCK), BOOL>(unlockSemantic, a1, a2, a3); }
    static inline auto MuteExplosions() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::MUTE_EXPLOSIONS), void>(); }
    static inline auto NetArePlayersInSameGang(Player player1, Player player2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_ARE_PLAYERS_IN_SAME_GANG), BOOL>(player1, player2); }
    static inline auto NetArePlayersInSameParty(Player player1, Player player2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_ARE_PLAYERS_IN_SAME_PARTY), BOOL>(player1, player2); }
    static inline auto NetDebug(const char* message) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_DEBUG), void>(message); }
    static inline auto NetDebugFloat(const char* message, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_DEBUG_FLOAT), void>(message, value); }
    static inline auto NetDebugInt(const char* message, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_DEBUG_INT), void>(message, value); }
    static inline auto NetDebugString(const char* message, const char* str) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_DEBUG_STRING), void>(message, str); }
    static inline auto NetDebugVector(const char* message, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_DEBUG_VECTOR), void>(message, x, y, z); }
    static inline auto NetError(const char* message) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_ERROR), void>(message); }
    static inline auto NetErrorFloat(const char* message, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_ERROR_FLOAT), void>(message, value); }
    static inline auto NetErrorInt(const char* message, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_ERROR_INT), void>(message, value); }
    static inline auto NetErrorString(const char* message, const char* str) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_ERROR_STRING), void>(message, str); }
    static inline auto NetErrorVector(const char* message, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_ERROR_VECTOR), void>(message, x, y, z); }
    static inline auto NetGetBoolRosGamerData(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_GET_BOOL_ROS_GAMER_DATA), BOOL>(hash); }
    static inline auto NetGetFloatRosGamerData(Hash hash, float* value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_GET_FLOAT_ROS_GAMER_DATA), BOOL>(hash, value); }
    static inline auto NetGetGamerNameWithGangTag(Player player, int bufferSize, char* buffer) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_GET_GAMER_NAME_WITH_GANG_TAG), BOOL>(player, bufferSize, buffer); }
    static inline auto NetGetGamerRosXpBonus(float* value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_GET_GAMER_ROS_XP_BONUS), BOOL>(value); }
    static inline auto NetGetIntRosGamerData(Hash hash, int* value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_GET_INT_ROS_GAMER_DATA), BOOL>(hash, value); }
    static inline auto NetGetIsRockstarDev() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_GET_IS_ROCKSTAR_DEV), BOOL>(); }
    static inline auto NetGetIsRosCheater() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_GET_IS_ROS_CHEATER), BOOL>(); }
    static inline auto NetGetPlayerGangId(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_GET_PLAYER_GANG_ID), int>(player); }
    static inline auto NetGetPlayerGangName(Player player, int bufferSize, char* buffer) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_GET_PLAYER_GANG_NAME), BOOL>(player, bufferSize, buffer); }
    static inline auto NetGetPlayerGangRank(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_GET_PLAYER_GANG_RANK), int>(player); }
    static inline auto NetGetPlayerGangTag(Player player, int bufferSize, char* buffer) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_GET_PLAYER_GANG_TAG), BOOL>(player, bufferSize, buffer); }
    static inline auto NetGetPlayerGangTagUi(Player player, int bufferSize, char* buffer) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_GET_PLAYER_GANG_TAG_UI), BOOL>(player, bufferSize, buffer); }
    static inline auto NetIsGangInfoValid(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_IS_GANG_INFO_VALID), BOOL>(player); }
    static inline auto NetIsPlayerInGang(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_IS_PLAYER_IN_GANG), BOOL>(player); }
    static inline auto NetPartyGetLeaderPlayer() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_PARTY_GET_LEADER_PLAYER), Player>(); }
    static inline auto NetPlaystatsClanFeud(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_PLAYSTATS_CLAN_FEUD), void>(a0, a1, a2, a3); }
    static inline auto NetPlaystatsGametypeEnded(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_PLAYSTATS_GAMETYPE_ENDED), void>(a0, a1, a2, a3, a4); }
    static inline auto NetPlaystatsGametypeObjective(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_PLAYSTATS_GAMETYPE_OBJECTIVE), void>(a0, a1, a2, a3); }
    static inline auto NetPlaystatsGametypeStarted(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_PLAYSTATS_GAMETYPE_STARTED), void>(a0, a1, a2, a3, a4, a5); }
    static inline auto NetPlaystatsJoinTeam(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_PLAYSTATS_JOIN_TEAM), void>(a0); }
    static inline auto NetPlaystatsPlayerSelected(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_PLAYSTATS_PLAYER_SELECTED), void>(a0); }
    static inline auto NetPlaystatsPostMatchBlob(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_PLAYSTATS_POST_MATCH_BLOB), void>(a0, a1, a2, a3, a4, a5, a6); }
    static inline auto NetShowGamerTags(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_SHOW_GAMER_TAGS), void>(toggle); }
    static inline auto NetWarning(const char* message) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_WARNING), void>(message); }
    static inline auto NetWarningFloat(const char* message, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_WARNING_FLOAT), void>(message, value); }
    static inline auto NetWarningInt(const char* message, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_WARNING_INT), void>(message, value); }
    static inline auto NetWarningString(const char* message, const char* str) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_WARNING_STRING), void>(message, str); }
    static inline auto NetWarningVector(const char* message, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NET_WARNING_VECTOR), void>(message, x, y, z); }
    static inline auto NetworkAcceptInvite(int inviteIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_ACCEPT_INVITE), BOOL>(inviteIndex); }
    static inline auto NetworkAddInworldText(int value, const char* text, int type) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_ADD_INWORLD_TEXT), void>(value, text, type); }
    static inline auto NetworkAddInworldTextObject(int value, const char* text, int type, Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_ADD_INWORLD_TEXT_OBJECT), void>(value, text, type, object); }
    static inline auto NetworkAddInworldTextPed(int value, const char* text, int type, Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_ADD_INWORLD_TEXT_PED), void>(value, text, type, ped); }
    static inline auto NetworkAddInworldTextPlayer(int value, const char* text, int type, Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_ADD_INWORLD_TEXT_PLAYER), void>(value, text, type, player); }
    static inline auto NetworkAddInworldTextPos(int value, const char* text, int type, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_ADD_INWORLD_TEXT_POS), void>(value, text, type, x, y, z); }
    static inline auto NetworkAddPlayerCash(int amount, const char* type) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_ADD_PLAYER_CASH), void>(amount, type); }
    static inline auto NetworkAddPlayerCashPlayer(int amount, const char* type, Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_ADD_PLAYER_CASH_PLAYER), void>(amount, type, player); }
    static inline auto NetworkAddPlayerCashPos(int amount, const char* type, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_ADD_PLAYER_CASH_POS), void>(amount, type, x, y, z); }
    static inline auto NetworkAddPlayerExperience(int amount, const char* type) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_ADD_PLAYER_EXPERIENCE), void>(amount, type); }
    static inline auto NetworkAddPlayerExperiencePlayer(int amount, const char* type, Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_ADD_PLAYER_EXPERIENCE_PLAYER), void>(amount, type, player); }
    static inline auto NetworkAddPlayerExperiencePos(int amount, const char* type, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_ADD_PLAYER_EXPERIENCE_POS), void>(amount, type, x, y, z); }
    static inline auto NetworkAmIBlockedByPlayer(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_AM_I_BLOCKED_BY_PLAYER), BOOL>(player); }
    static inline auto NetworkAmIMutedByPlayer(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_AM_I_MUTED_BY_PLAYER), BOOL>(player); }
    static inline auto NetworkChangeGameMode(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_CHANGE_GAME_MODE), BOOL>(a0, a1, a2, a3); }
    static inline auto NetworkChangeGameModePending() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_CHANGE_GAME_MODE_PENDING), Any>(); }
    static inline auto NetworkChangeGameModeSucceeded() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_CHANGE_GAME_MODE_SUCCEEDED), Any>(); }
    static inline auto NetworkCheckInviteArrival() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_CHECK_INVITE_ARRIVAL), Any>(); }
    static inline auto NetworkClearInviteArrival() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_CLEAR_INVITE_ARRIVAL), Any>(); }
    static inline auto NetworkClearPlayerStreak(Player player, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_CLEAR_PLAYER_STREAK), void>(player, a1); }
    static inline auto NetworkClearSummons() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_CLEAR_SUMMONS), void>(); }
    static inline auto NetworkCreatePedCorpse(Ped ped, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_CREATE_PED_CORPSE), void>(ped, a1); }
    static inline auto NetworkCreatePickupFromWeapons(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_CREATE_PICKUP_FROM_WEAPONS), void>(a0); }
    static inline auto NetworkDidInviteFriend(const char* friendName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_DID_INVITE_FRIEND), BOOL>(friendName); }
    static inline auto NetworkDoesPlayerHaveAnyStreakActive(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_DOES_PLAYER_HAVE_ANY_STREAK_ACTIVE), BOOL>(player); }
    static inline auto NetworkDumpLevelData() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_DUMP_LEVEL_DATA), void>(); }
    static inline auto NetworkDumpStoredQueries() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_DUMP_STORED_QUERIES), void>(); }
    static inline auto NetworkEnableAssistXp(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_ENABLE_ASSIST_XP), void>(toggle); }
    static inline auto NetworkFindGamePending() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_FIND_GAME_PENDING), BOOL>(); }
    static inline auto NetworkGetAvatarSelectedDeathmatchSlotHash() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_AVATAR_SELECTED_DEATHMATCH_SLOT_HASH), Hash>(); }
    static inline auto NetworkGetAvatarSlotSelectedSex(Hash avatarHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_AVATAR_SLOT_SELECTED_SEX), int>(avatarHash); }
    static inline auto NetworkGetCountofRichPresence() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_COUNTOF_RICH_PRESENCE), Any>(); }
    static inline auto NetworkGetFriendCount() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_FRIEND_COUNT), int>(); }
    static inline auto NetworkGetFriendName(int bufferSize, char* buffer, int friendIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_FRIEND_NAME), void>(bufferSize, buffer, friendIndex); }
    static inline auto NetworkGetGameMode() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_GAME_MODE), int>(); }
    static inline auto NetworkGetKillerOfPlayer(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_KILLER_OF_PLAYER), Player>(player); }
    static inline auto NetworkGetMaxPrivateSlots() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_MAX_PRIVATE_SLOTS), int>(); }
    static inline auto NetworkGetMaxSlots() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_MAX_SLOTS), int>(); }
    static inline auto NetworkGetMetPlayerName(int bufferSize, char* buffer, int metPlayerIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_MET_PLAYER_NAME), void>(bufferSize, buffer, metPlayerIndex); }
    static inline auto NetworkGetNumPlayersMet() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_NUM_PLAYERS_MET), int>(); }
    static inline auto NetworkGetNumUnacceptedInvites() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_NUM_UNACCEPTED_INVITES), Any>(); }
    static inline auto NetworkGetNumberOfGames() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_NUMBER_OF_GAMES), int>(); }
    static inline auto NetworkGetParamNettest() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_PARAM_NETTEST), int>(); }
    static inline auto NetworkGetParamNettestHost() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_PARAM_NETTEST_HOST), int>(); }
    static inline auto NetworkGetPlayerActiveStreak(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_PLAYER_ACTIVE_STREAK), int>(player); }
    static inline auto NetworkGetPlayerActiveStreakLevel(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_PLAYER_ACTIVE_STREAK_LEVEL), int>(player); }
    static inline auto NetworkGetPlayerAvatarSex(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_PLAYER_AVATAR_SEX), int>(player); }
    static inline auto NetworkGetPlayerAvatarSlotHash(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_PLAYER_AVATAR_SLOT_HASH), Hash>(player); }
    static inline auto NetworkGetPlayerCash() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_PLAYER_CASH), int>(); }
    static inline auto NetworkGetPlayerStreakActive(Player player, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_PLAYER_STREAK_ACTIVE), BOOL>(player, a1); }
    static inline auto NetworkGetPlayerStreakBlocked(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_PLAYER_STREAK_BLOCKED), Any>(a0, a1); }
    static inline auto NetworkGetPlayerStreakEffect(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_PLAYER_STREAK_EFFECT), Any>(a0, a1); }
    static inline auto NetworkGetPlayerStreakInSlot(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_PLAYER_STREAK_IN_SLOT), Any>(a0, a1); }
    static inline auto NetworkGetRichPresenceFieldIndex() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_RICH_PRESENCE_FIELD_INDEX), Any>(); }
    static inline auto NetworkGetRichPresenceId() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_RICH_PRESENCE_ID), Any>(); }
    static inline auto NetworkGetRichPresenceIdFromIndex() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_RICH_PRESENCE_ID_FROM_INDEX), Any>(); }
    static inline auto NetworkGetRichPresenceIsValid() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_RICH_PRESENCE_IS_VALID), Any>(); }
    static inline auto NetworkGetRichPresenceLabel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_RICH_PRESENCE_LABEL), Any>(); }
    static inline auto NetworkGetStreakName(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_STREAK_NAME), void>(a0, a1, a2); }
    static inline auto NetworkGetStreakTexture(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_STREAK_TEXTURE), Any>(a0); }
    static inline auto NetworkGetTeamRgbColour(int team, int* r, int* g, int* b) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_TEAM_RGB_COLOUR), void>(team, r, g, b); }
    static inline auto NetworkGetTimePlayerHasBeenDeadFor(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_TIME_PLAYER_HAS_BEEN_DEAD_FOR), int>(player); }
    static inline auto NetworkGetUnacceptedInviteGameMode() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_UNACCEPTED_INVITE_GAME_MODE), Any>(); }
    static inline auto NetworkGetUnacceptedInviterName() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_GET_UNACCEPTED_INVITER_NAME), Any>(); }
    static inline auto NetworkHasPlayerCollectedPickup(Player player, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_HAS_PLAYER_COLLECTED_PICKUP), BOOL>(player, a1); }
    static inline auto NetworkHasPlayerHasDiedRecently(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_HAS_PLAYER_HAS_DIED_RECENTLY), BOOL>(player); }
    static inline auto NetworkHaveAcceptedInvite() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_HAVE_ACCEPTED_INVITE), BOOL>(); }
    static inline auto NetworkHaveOnlinePrivileges() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_HAVE_ONLINE_PRIVILEGES), BOOL>(); }
    static inline auto NetworkHaveSummons() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_HAVE_SUMMONS), BOOL>(); }
    static inline auto NetworkHostGame(Any a0, BOOL a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_HOST_GAME), BOOL>(a0, a1, a2, a3, a4, a5); }
    static inline auto NetworkInviteFriend(const char* friendName, const char* inviteMsg) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_INVITE_FRIEND), BOOL>(friendName, inviteMsg); }
    static inline auto NetworkIsAvatarPaynekillerCharacter(Hash avatarHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_AVATAR_PAYNEKILLER_CHARACTER), BOOL>(avatarHash); }
    static inline auto NetworkIsEnabled() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_ENABLED), BOOL>(); }
    static inline auto NetworkIsFriendInSameTitle(const char* friendName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_FRIEND_IN_SAME_TITLE), BOOL>(friendName); }
    static inline auto NetworkIsFriendOnline(const char* friendName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_FRIEND_ONLINE), BOOL>(friendName); }
    static inline auto NetworkIsGameInProgress() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_GAME_IN_PROGRESS), BOOL>(); }
    static inline auto NetworkIsGameRanked() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_GAME_RANKED), BOOL>(); }
    static inline auto NetworkIsHost() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_HOST), BOOL>(); }
    static inline auto NetworkIsHostOfScript(Hash scriptHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_HOST_OF_SCRIPT), BOOL>(scriptHash); }
    static inline auto NetworkIsHostOfThisScript() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_HOST_OF_THIS_SCRIPT), BOOL>(); }
    static inline auto NetworkIsInviteeOnline() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_INVITEE_ONLINE), BOOL>(); }
    static inline auto NetworkIsOperationPending() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_OPERATION_PENDING), BOOL>(); }
    static inline auto NetworkIsPlayerActive(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_PLAYER_ACTIVE), BOOL>(player); }
    static inline auto NetworkIsPlayerBlockedByMe(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_PLAYER_BLOCKED_BY_ME), BOOL>(player); }
    static inline auto NetworkIsPlayerMutedByMe(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_PLAYER_MUTED_BY_ME), BOOL>(player); }
    static inline auto NetworkIsPlayerPhysical(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_PLAYER_PHYSICAL), BOOL>(player); }
    static inline auto NetworkIsPlayerTalking(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_PLAYER_TALKING), BOOL>(player); }
    static inline auto NetworkIsPlayerValid(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_PLAYER_VALID), BOOL>(player); }
    static inline auto NetworkIsPlayerVisible(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_PLAYER_VISIBLE), BOOL>(a0, a1, a2); }
    static inline auto NetworkIsPlayerVisibleToTeam(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_PLAYER_VISIBLE_TO_TEAM), BOOL>(a0, a1, a2); }
    static inline auto NetworkIsSessionInvitable() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_IS_SESSION_INVITABLE), BOOL>(); }
    static inline auto NetworkJoinSummons() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_JOIN_SUMMONS), BOOL>(); }
    static inline auto NetworkJoiningInProgressGame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_JOINING_IN_PROGRESS_GAME), BOOL>(); }
    static inline auto NetworkKickPlayer() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_KICK_PLAYER), Any>(); }
    static inline auto NetworkLevelDataGetBool() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_BOOL), Any>(); }
    static inline auto NetworkLevelDataGetBoolFromNode(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_BOOL_FROM_NODE), Any>(a0, a1, a2); }
    static inline auto NetworkLevelDataGetFloat() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_FLOAT), Any>(); }
    static inline auto NetworkLevelDataGetFloatFromNode(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_FLOAT_FROM_NODE), Any>(a0, a1, a2); }
    static inline auto NetworkLevelDataGetHash() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_HASH), Any>(); }
    static inline auto NetworkLevelDataGetHashFromNode(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_HASH_FROM_NODE), Any>(a0, a1, a2); }
    static inline auto NetworkLevelDataGetInt() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_INT), Any>(); }
    static inline auto NetworkLevelDataGetIntFromNode(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_INT_FROM_NODE), Any>(a0, a1, a2); }
    static inline auto NetworkLevelDataGetNode() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_NODE), Any>(); }
    static inline auto NetworkLevelDataGetNodeFromNode(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_NODE_FROM_NODE), Any>(a0, a1); }
    static inline auto NetworkLevelDataGetNumNodes(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_NUM_NODES), int>(name); }
    static inline auto NetworkLevelDataGetNumNodesFromNode(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_NUM_NODES_FROM_NODE), Any>(a0, a1); }
    static inline auto NetworkLevelDataGetSiblingCountAfterNode(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_SIBLING_COUNT_AFTER_NODE), Any>(a0); }
    static inline auto NetworkLevelDataGetString() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_STRING), Any>(); }
    static inline auto NetworkLevelDataGetStringFromNode(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_STRING_FROM_NODE), Any>(a0, a1, a2, a3); }
    static inline auto NetworkLevelDataGetVector() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_VECTOR), Any>(); }
    static inline auto NetworkLevelDataGetVectorFromNode(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_GET_VECTOR_FROM_NODE), Any>(a0, a1, a2); }
    static inline auto NetworkLevelDataRunStoredQueryBool() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_RUN_STORED_QUERY_BOOL), Any>(); }
    static inline auto NetworkLevelDataRunStoredQueryCount(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_RUN_STORED_QUERY_COUNT), Any>(a0, a1, a2, a3); }
    static inline auto NetworkLevelDataRunStoredQueryFloat() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_RUN_STORED_QUERY_FLOAT), Any>(); }
    static inline auto NetworkLevelDataRunStoredQueryHash(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_RUN_STORED_QUERY_HASH), Any>(a0, a1, a2, a3, a4); }
    static inline auto NetworkLevelDataRunStoredQueryInt(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_RUN_STORED_QUERY_INT), Any>(a0, a1, a2, a3, a4); }
    static inline auto NetworkLevelDataRunStoredQueryNode(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_RUN_STORED_QUERY_NODE), Any>(a0, a1, a2, a3); }
    static inline auto NetworkLevelDataRunStoredQueryString(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_RUN_STORED_QUERY_STRING), Any>(a0, a1, a2, a3, a4, a5); }
    static inline auto NetworkLevelDataRunStoredQueryVector() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_LEVEL_DATA_RUN_STORED_QUERY_VECTOR), Any>(); }
    static inline auto NetworkParamAllowWinButton() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_PARAM_ALLOW_WIN_BUTTON), BOOL>(); }
    static inline auto NetworkParamJustRespawn() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_PARAM_JUST_RESPAWN), BOOL>(); }
    static inline auto NetworkPlayerForceColor(Player player, int a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_PLAYER_FORCE_COLOR), void>(player, a1, a2); }
    static inline auto NetworkPlayerHasHeadset(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_PLAYER_HAS_HEADSET), BOOL>(player); }
    static inline auto NetworkPlayerHasPed(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_PLAYER_HAS_PED), BOOL>(player); }
    static inline auto NetworkPreloadAvatar(Hash avatarHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_PRELOAD_AVATAR), void>(avatarHash); }
    static inline auto NetworkReadyForJip() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_READY_FOR_JIP), void>(); }
    static inline auto NetworkReleasePreloadedAvatar(Hash avatarHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_RELEASE_PRELOADED_AVATAR), void>(avatarHash); }
    static inline auto NetworkRemoveOldBlipsFromCleanupList() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_REMOVE_OLD_BLIPS_FROM_CLEANUP_LIST), void>(); }
    static inline auto NetworkRequireLevelData(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_REQUIRE_LEVEL_DATA), void>(name); }
    static inline auto NetworkRequireStoredQueries(const char* fileName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_REQUIRE_STORED_QUERIES), BOOL>(fileName); }
    static inline auto NetworkResetPlayerStreaks(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_RESET_PLAYER_STREAKS), void>(player); }
    static inline auto NetworkResurrectPlayer(Player player, float x, float y, float z, float heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_RESURRECT_PLAYER), void>(player, x, y, z, heading); }
    static inline auto NetworkSetAllLowPriorityVehicleGeneratorsWithHeliActive(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_WITH_HELI_ACTIVE), void>(toggle); }
    static inline auto NetworkSetBotPlayer(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_BOT_PLAYER), void>(toggle); }
    static inline auto NetworkSetFriendlyFireOption() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_FRIENDLY_FIRE_OPTION), Any>(); }
    static inline auto NetworkSetHealthReticuleOption(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_HEALTH_RETICULE_OPTION), void>(toggle); }
    static inline auto NetworkSetNetworkPlayerAsVip(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_NETWORK_PLAYER_AS_VIP), void>(player, toggle); }
    static inline auto NetworkSetPlayerMuted(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_PLAYER_MUTED), BOOL>(player, toggle); }
    static inline auto NetworkSetPlayerStreakBlocked(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_PLAYER_STREAK_BLOCKED), void>(a0, a1, a2); }
    static inline auto NetworkSetPlayerStreakEffect(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_PLAYER_STREAK_EFFECT), void>(a0, a1, a2); }
    static inline auto NetworkSetPlayerStreakInSlot(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_PLAYER_STREAK_IN_SLOT), void>(a0, a1, a2); }
    static inline auto NetworkSetPlayerTracerColour(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_PLAYER_TRACER_COLOUR), void>(a0, a1); }
    static inline auto NetworkSetProfilestatinterval() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_PROFILESTATINTERVAL), Any>(); }
    static inline auto NetworkSetRadiohudInLobbyOff() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_RADIOHUD_IN_LOBBY_OFF), Any>(); }
    static inline auto NetworkSetRichPresence() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_RICH_PRESENCE), Any>(); }
    static inline auto NetworkSetScriptIsSafeForNetworkGame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME), void>(); }
    static inline auto NetworkSetTalkerFocus(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_TALKER_FOCUS), void>(player); }
    static inline auto NetworkSetTalkerProximity(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_TALKER_PROXIMITY), void>(value); }
    static inline auto NetworkSetTeamColour(int team, int colorIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_TEAM_COLOUR), void>(team, colorIndex); }
    static inline auto NetworkSetTeamKillExperience(int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_TEAM_KILL_EXPERIENCE), void>(value); }
    static inline auto NetworkSetTeamOnlyChat(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_TEAM_ONLY_CHAT), void>(toggle); }
    static inline auto NetworkSetThisScriptIsNetworkScript() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT), void>(); }
    static inline auto NetworkSetWeather(int weatherTypeId, int a1, BOOL persist) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SET_WEATHER), void>(weatherTypeId, a1, persist); }
    static inline auto NetworkShowFriendProfileUi(const char* friendName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SHOW_FRIEND_PROFILE_UI), void>(friendName); }
    static inline auto NetworkShowMetPlayerFeedbackUi(int metPlayerIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SHOW_MET_PLAYER_FEEDBACK_UI), void>(metPlayerIndex); }
    static inline auto NetworkShowMetPlayerProfileUi(int metPlayerIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SHOW_MET_PLAYER_PROFILE_UI), void>(metPlayerIndex); }
    static inline auto NetworkShowPlayerProfileUi(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_SHOW_PLAYER_PROFILE_UI), void>(player); }
    static inline auto NetworkStartLoadScene(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_START_LOAD_SCENE), void>(x, y, z); }
    static inline auto NetworkStoreSinglePlayerGame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_STORE_SINGLE_PLAYER_GAME), BOOL>(); }
    static inline auto NetworkUpdateLoadScene() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::NETWORK_UPDATE_LOAD_SCENE), BOOL>(); }
    static inline auto ObjectAnimEvent() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::OBJECT_ANIM_EVENT), Any>(); }
    static inline auto ObjectAnimEventOld() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::OBJECT_ANIM_EVENT_OLD), Any>(); }
    static inline auto OpenDebugFile() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::OPEN_DEBUG_FILE), Any>(); }
    static inline auto OpenNamedDebugFile() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::OPEN_NAMED_DEBUG_FILE), Any>(); }
    static inline auto OpenPatrolRoute(const char* patrolRouteName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::OPEN_PATROL_ROUTE), void>(patrolRouteName); }
    static inline auto OpenSequenceTask(ScrHandle* taskSequence) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::OPEN_SEQUENCE_TASK), void>(taskSequence); }
    static inline auto OverrideAlreadyPresentMpitemBlipsWithLastParams() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::OVERRIDE_ALREADY_PRESENT_MPITEM_BLIPS_WITH_LAST_PARAMS), void>(); }
    static inline auto OverrideFreezeFlags(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::OVERRIDE_FREEZE_FLAGS), void>(toggle); }
    static inline auto OverrideMoverPhysicsOnRagdollSleep(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::OVERRIDE_MOVER_PHYSICS_ON_RAGDOLL_SLEEP), void>(ped, toggle); }
    static inline auto OverridePedFiringPattern(Ped ped, Hash firingPatternHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::OVERRIDE_PED_FIRING_PATTERN), void>(ped, firingPatternHash); }
    static inline auto OverridePedFiringPatternCustom(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::OVERRIDE_PED_FIRING_PATTERN_CUSTOM), void>(ped, toggle); }
    static inline auto OverrideWarpModifier(BOOL toggle, float modifier) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::OVERRIDE_WARP_MODIFIER), void>(toggle, modifier); }
    static inline auto OverrideWaterSettings(float a0, float a1, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::OVERRIDE_WATER_SETTINGS), void>(a0, a1, a2); }
    static inline auto OverrideWeaponVelocity(Hash weaponHash, float velocity) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::OVERRIDE_WEAPON_VELOCITY), void>(weaponHash, velocity); }
    static inline auto PauseMpLastManStanding(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PAUSE_MP_LAST_MAN_STANDING), void>(toggle); }
    static inline auto PausePlaybackRecordedPed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PAUSE_PLAYBACK_RECORDED_PED), void>(ped); }
    static inline auto PausePlaybackRecordedVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PAUSE_PLAYBACK_RECORDED_VEHICLE), void>(vehicle); }
    static inline auto PauseScriptedConversation() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PAUSE_SCRIPTED_CONVERSATION), Any>(); }
    static inline auto PedActionTreePlayNode(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PED_ACTION_TREE_PLAY_NODE), BOOL>(ped, name); }
    static inline auto PedActionTreeResetHelper(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PED_ACTION_TREE_RESET_HELPER), void>(ped); }
    static inline auto PedAnimEvent(Ped ped, Hash a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PED_ANIM_EVENT), BOOL>(ped, a1); }
    static inline auto PedAnimEventOld(Ped ped, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PED_ANIM_EVENT_OLD), BOOL>(ped, a1); }
    static inline auto PedFinishActionIntention(Ped ped, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PED_FINISH_ACTION_INTENTION), void>(ped, a1); }
    static inline auto PedForceTargetable(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PED_FORCE_TARGETABLE), void>(ped, toggle); }
    static inline auto PedGetActionIntentionStatus(Ped ped, int actionId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PED_GET_ACTION_INTENTION_STATUS), int>(ped, actionId); }
    static inline auto PedHackDisableInairEvent(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PED_HACK_DISABLE_INAIR_EVENT), BOOL>(ped, toggle); }
    static inline auto PedHasValidThrowTrajectoryToPos(Ped ped, Vector3* pos) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PED_HAS_VALID_THROW_TRAJECTORY_TO_POS), BOOL>(ped, pos); }
    static inline auto PedResetIk(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PED_RESET_IK), void>(ped); }
    static inline auto PedSetActionDirection(Ped ped, float xDir, float yDir, float zDir) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PED_SET_ACTION_DIRECTION), void>(ped, xDir, yDir, zDir); }
    static inline auto PedSetActionIntention(Ped ped, int actionId, int duration, float a3, float a4, float a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PED_SET_ACTION_INTENTION), void>(ped, actionId, duration, a3, a4, a5); }
    static inline auto PedSetStringInputSignal(Ped ped, const char* inputSignal) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PED_SET_STRING_INPUT_SIGNAL), void>(ped, inputSignal); }
    static inline auto PedgrouptaskAdvanceAssignped(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_ADVANCE_ASSIGNPED), void>(a0, a1, a2); }
    static inline auto PedgrouptaskAdvanceCreate(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_ADVANCE_CREATE), Any>(a0); }
    static inline auto PedgrouptaskAdvanceSetadvancedistance(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_ADVANCE_SETADVANCEDISTANCE), void>(a0, a1, a2); }
    static inline auto PedgrouptaskAdvanceSetadvancerelativeto(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_ADVANCE_SETADVANCERELATIVETO), void>(a0, a1, a2); }
    static inline auto PedgrouptaskAdvanceSetcoversearchoffsetforward() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_ADVANCE_SETCOVERSEARCHOFFSETFORWARD), Any>(); }
    static inline auto PedgrouptaskAdvanceSetnumpedstoadvance(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_ADVANCE_SETNUMPEDSTOADVANCE), void>(a0, a1, a2); }
    static inline auto PedgrouptaskAdvanceSetpedcanadvance(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_ADVANCE_SETPEDCANADVANCE), void>(a0, a1, a2, a3); }
    static inline auto PedgrouptaskAdvanceSettargetPed(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_ADVANCE_SETTARGET_PED), void>(a0, a1, a2); }
    static inline auto PedgrouptaskAdvanceSettargetPos() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_ADVANCE_SETTARGET_POS), Any>(); }
    static inline auto PedgrouptaskAdvanceSettimerangeforallpedstostartfiring(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_ADVANCE_SETTIMERANGEFORALLPEDSTOSTARTFIRING), void>(a0, a1, a2); }
    static inline auto PedgrouptaskAdvanceSettimetohide(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_ADVANCE_SETTIMETOHIDE), void>(a0, a1, a2); }
    static inline auto PedgrouptaskAdvanceSettimetoidle(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_ADVANCE_SETTIMETOIDLE), void>(a0, a1, a2); }
    static inline auto PedgrouptaskAdvanceTriggerMove(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_ADVANCE_TRIGGER_MOVE), void>(a0, a1); }
    static inline auto PedgrouptaskCoverfireAssignped() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_COVERFIRE_ASSIGNPED), Any>(); }
    static inline auto PedgrouptaskCoverfireCreate() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_COVERFIRE_CREATE), Any>(); }
    static inline auto PedgrouptaskCoverfireSettargetPed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_COVERFIRE_SETTARGET_PED), Any>(); }
    static inline auto PedgrouptaskCoverfireSettargetPos() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_COVERFIRE_SETTARGET_POS), Any>(); }
    static inline auto PedgrouptaskCoverfireStopFiring() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_COVERFIRE_STOP_FIRING), Any>(); }
    static inline auto PedgrouptaskCoverfireTriggerFire() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_COVERFIRE_TRIGGER_FIRE), Any>(); }
    static inline auto PedgrouptaskCoverfireTriggerHide() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_COVERFIRE_TRIGGER_HIDE), Any>(); }
    static inline auto PedgrouptaskDestroy(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_DESTROY), void>(a0, a1); }
    static inline auto PedgrouptaskFlankAssignpedtocoverfire() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_FLANK_ASSIGNPEDTOCOVERFIRE), Any>(); }
    static inline auto PedgrouptaskFlankAssignpedtoflank() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_FLANK_ASSIGNPEDTOFLANK), Any>(); }
    static inline auto PedgrouptaskFlankCreate() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_FLANK_CREATE), Any>(); }
    static inline auto PedgrouptaskFlankFlankvolume() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_FLANK_FLANKVOLUME), Any>(); }
    static inline auto PedgrouptaskFlankTriggervolume() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_FLANK_TRIGGERVOLUME), Any>(); }
    static inline auto PedgrouptaskFlankTuneTargetoutsidetriggervolumetocancel() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_FLANK_TUNE_TARGETOUTSIDETRIGGERVOLUMETOCANCEL), Any>(); }
    static inline auto PedgrouptaskFlankTuneTimereadytriggermove() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_FLANK_TUNE_TIMEREADYTRIGGERMOVE), Any>(); }
    static inline auto PedgrouptaskFlankTuneTimetargetinsidetriggervolumetostart() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_FLANK_TUNE_TIMETARGETINSIDETRIGGERVOLUMETOSTART), Any>(); }
    static inline auto PedgrouptaskTacticalcornerAssignped(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_TACTICALCORNER_ASSIGNPED), void>(a0, a1, a2); }
    static inline auto PedgrouptaskTacticalcornerCreate(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_TACTICALCORNER_CREATE), Any>(a0, a1, a2); }
    static inline auto PedgrouptaskTacticalcornerSettargetPed(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_TACTICALCORNER_SETTARGET_PED), void>(a0, a1, a2); }
    static inline auto PedgrouptaskTacticalcornerSettargetPos() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PEDGROUPTASK_TACTICALCORNER_SETTARGET_POS), Any>(); }
    static inline auto PickupsPassTime() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PICKUPS_PASS_TIME), Any>(); }
    static inline auto PinRopeVertex(Rope rope, int vertex, Vector3* coords) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PIN_ROPE_VERTEX), void>(rope, vertex, coords); }
    static inline auto PlaceLoadoutItemsToInventory() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLACE_LOADOUT_ITEMS_TO_INVENTORY), void>(); }
    static inline auto PlaceLoadoutToInventory() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLACE_LOADOUT_TO_INVENTORY), void>(); }
    static inline auto PlayAudioEvent() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_AUDIO_EVENT), Any>(); }
    static inline auto PlayAudioEventFromObject(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_AUDIO_EVENT_FROM_OBJECT), void>(a0, a1); }
    static inline auto PlayAudioEventFromPed(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_AUDIO_EVENT_FROM_PED), void>(a0, a1); }
    static inline auto PlayAudioEventFromVehicle() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_AUDIO_EVENT_FROM_VEHICLE), Any>(); }
    static inline auto PlayCompanionDeathGunshot(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_COMPANION_DEATH_GUNSHOT), void>(ped); }
    static inline auto PlayDlcSoundFrontend(int soundId, const char* soundName, const char* categoryName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_DLC_SOUND_FRONTEND), void>(soundId, soundName, categoryName); }
    static inline auto PlayEndCreditsMusic(BOOL play) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_END_CREDITS_MUSIC), void>(play); }
    static inline auto PlayFireSoundFromCoord(int soundId, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_FIRE_SOUND_FROM_COORD), void>(soundId, x, y, z); }
    static inline auto PlayImagefx(const char* fxName, int a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_IMAGEFX), void>(fxName, a1, a2); }
    static inline auto PlayKillstripLocal(Ped ped1, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_KILLSTRIP_LOCAL), void>(ped1, ped2); }
    static inline auto PlayMovie(int a0, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_MOVIE), void>(a0, a1); }
    static inline auto PlayMusic(const char* musicName, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_MUSIC), void>(musicName, a1); }
    static inline auto PlayObjectAnim(Object object, const char* animDict, const char* animName, float speedMultiplier, BOOL a4, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_OBJECT_ANIM), BOOL>(object, animDict, animName, speedMultiplier, a4, a5); }
    static inline auto PlayPedAmbientSpeech(Ped ped, const char* speech, BOOL a2, BOOL a3, int a4, BOOL a5, int a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_PED_AMBIENT_SPEECH), void>(ped, speech, a2, a3, a4, a5, a6); }
    static inline auto PlayPedAmbientSpeechWithVoice(Ped ped, const char* speech, const char* voice, BOOL a3, BOOL a4, int a5, BOOL a6, int a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_PED_AMBIENT_SPEECH_WITH_VOICE), void>(ped, speech, voice, a3, a4, a5, a6, a7); }
    static inline auto PlayPedAudioEventAnim(Ped ped, const char* a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_PED_AUDIO_EVENT_ANIM), void>(ped, a1); }
    static inline auto PlayPreloadedAnnouncerSpeech() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_PRELOADED_ANNOUNCER_SPEECH), void>(); }
    static inline auto PlayPreloadedSpeech(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_PRELOADED_SPEECH), void>(ped); }
    static inline auto PlayReliefSigh(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_RELIEF_SIGH), void>(ped); }
    static inline auto PlayScriptStreamFromCoord(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_SCRIPT_STREAM_FROM_COORD), void>(a0, a1, a2, a3); }
    static inline auto PlayScriptStreamFromObject(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_SCRIPT_STREAM_FROM_OBJECT), void>(a0, a1); }
    static inline auto PlayScriptStreamFromPed(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_SCRIPT_STREAM_FROM_PED), void>(a0, a1); }
    static inline auto PlayScriptStreamFromVehicle(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_SCRIPT_STREAM_FROM_VEHICLE), void>(a0, a1); }
    static inline auto PlayScriptStreamFrontend(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_SCRIPT_STREAM_FRONTEND), void>(a0); }
    static inline auto PlayScriptStreamFrontendInt(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_SCRIPT_STREAM_FRONTEND_INT), void>(a0, a1); }
    static inline auto PlaySimplePedAnim(Object ped, const char* animDict, const char* animName, float speedMultiplier, BOOL a4, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_SIMPLE_PED_ANIM), BOOL>(ped, animDict, animName, speedMultiplier, a4, a5); }
    static inline auto PlaySound(int soundId, const char* soundName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_SOUND), void>(soundId, soundName); }
    static inline auto PlaySoundFromCoord(int soundId, const char* soundName, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_SOUND_FROM_COORD), void>(soundId, soundName, x, y, z); }
    static inline auto PlaySoundFromObject(int soundId, const char* soundName, Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_SOUND_FROM_OBJECT), void>(soundId, soundName, object); }
    static inline auto PlaySoundFromPed(int soundId, const char* soundName, Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_SOUND_FROM_PED), void>(soundId, soundName, ped); }
    static inline auto PlaySoundFromVehicle(int soundId, const char* soundName, Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_SOUND_FROM_VEHICLE), void>(soundId, soundName, vehicle); }
    static inline auto PlaySoundFrontend(int soundId, const char* soundName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_SOUND_FRONTEND), void>(soundId, soundName); }
    static inline auto PlayVehicleAnim(Vehicle vehicle, const char* animName, const char* animDict, float speedMultiplier, BOOL a4, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAY_VEHICLE_ANIM), BOOL>(vehicle, animName, animDict, speedMultiplier, a4, a5); }
    static inline auto PlayerEnableComponent(int component, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAYER_ENABLE_COMPONENT), void>(component, toggle); }
    static inline auto PlayerGetTimewarpModifier() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAYER_GET_TIMEWARP_MODIFIER), float>(); }
    static inline auto PlayerHasMpSpecialItem(Player player, int item) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAYER_HAS_MP_SPECIAL_ITEM), BOOL>(player, item); }
    static inline auto PlayerSetAimMode(int mode) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAYER_SET_AIM_MODE), void>(mode); }
    static inline auto PlayerSetWarpFireScale(float scale) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAYER_SET_WARP_FIRE_SCALE), void>(scale); }
    static inline auto PlayerUseCoverline() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAYER_USE_COVERLINE), Any>(); }
    static inline auto PlayerUseCoverpoint(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PLAYER_USE_COVERPOINT), Any>(a0, a1, a2, a3); }
    static inline auto PointCamAtCoord(Cam cam, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::POINT_CAM_AT_COORD), void>(cam, x, y, z); }
    static inline auto PointCamAtObject(Cam cam, Object object, float offsetX, float offsetY, float offsetZ, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::POINT_CAM_AT_OBJECT), void>(cam, object, offsetX, offsetY, offsetZ, a5); }
    static inline auto PointCamAtPed(Cam cam, Ped ped, float offsetX, float offsetY, float offsetZ, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::POINT_CAM_AT_PED), void>(cam, ped, offsetX, offsetY, offsetZ, a5); }
    static inline auto PointCamAtVehicle(Cam cam, Vehicle vehicle, float offsetX, float offsetY, float offsetZ, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::POINT_CAM_AT_VEHICLE), void>(cam, vehicle, offsetX, offsetY, offsetZ, a5); }
    static inline auto PopulateNow() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::POPULATE_NOW), void>(); }
    static inline auto Pow(float base, float exponent) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::POW), float>(base, exponent); }
    static inline auto PreStreamSeamlessCutscene(const char* cutsceneName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRE_STREAM_SEAMLESS_CUTSCENE), void>(cutsceneName); }
    static inline auto PreStreamSeamlessCutsceneAtCoord(const char* cutsceneName, float x, float y, float z, float a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRE_STREAM_SEAMLESS_CUTSCENE_AT_COORD), void>(cutsceneName, x, y, z, a4); }
    static inline auto PreloadAnnouncerSpeech(const char* name, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRELOAD_ANNOUNCER_SPEECH), void>(name, a1); }
    static inline auto PreloadMovie(int a0, const char* movieName, BOOL a2, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRELOAD_MOVIE), void>(a0, movieName, a2, a3); }
    static inline auto PreloadPlayerVariation(Ped ped, int componentId, int drawableId, int textureId, int paletteId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRELOAD_PLAYER_VARIATION), void>(ped, componentId, drawableId, textureId, paletteId); }
    static inline auto PreloadStreamComponent(int a0, int a1, int a2, int a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRELOAD_STREAM_COMPONENT), void>(a0, a1, a2, a3); }
    static inline auto Print(const char* textLabel, int duration, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT), void>(textLabel, duration, a2); }
    static inline auto PrintHelp(const char* textLabel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_HELP), void>(textLabel); }
    static inline auto PrintHelpForever() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_HELP_FOREVER), Any>(); }
    static inline auto PrintHelpForeverWithNumber() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_HELP_FOREVER_WITH_NUMBER), Any>(); }
    static inline auto PrintHelpForeverWithString() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_HELP_FOREVER_WITH_STRING), Any>(); }
    static inline auto PrintHelpForeverWithStringNoSound() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_HELP_FOREVER_WITH_STRING_NO_SOUND), Any>(); }
    static inline auto PrintHelpWithNumber() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_HELP_WITH_NUMBER), Any>(); }
    static inline auto PrintHelpWithString(const char* a0, const char* a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_HELP_WITH_STRING), void>(a0, a1); }
    static inline auto PrintHelpWithStringNoSound() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_HELP_WITH_STRING_NO_SOUND), Any>(); }
    static inline auto PrintMemoryStats() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_MEMORY_STATS), void>(); }
    static inline auto PrintMissionDescription() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_MISSION_DESCRIPTION), Any>(); }
    static inline auto PrintNow(const char* textLabel, int duration, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_NOW), void>(textLabel, duration, a2); }
    static inline auto PrintStringInString() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_STRING_IN_STRING), Any>(); }
    static inline auto PrintStringInStringNow() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_STRING_IN_STRING_NOW), Any>(); }
    static inline auto PrintStringWithLiteralString(const char* textLabel, const char* literalString, int duration, int a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_STRING_WITH_LITERAL_STRING), void>(textLabel, literalString, duration, a3); }
    static inline auto PrintStringWithLiteralStringNow(const char* textLabel, const char* literalString, int duration, int a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_STRING_WITH_LITERAL_STRING_NOW), void>(textLabel, literalString, duration, a3); }
    static inline auto PrintWith2Numbers() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_WITH_2_NUMBERS), Any>(); }
    static inline auto PrintWith2NumbersNow() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_WITH_2_NUMBERS_NOW), Any>(); }
    static inline auto PrintWithNumber() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_WITH_NUMBER), Any>(); }
    static inline auto PrintWithNumberNow() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINT_WITH_NUMBER_NOW), Any>(); }
    static inline auto Printfloat(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINTFLOAT), void>(value); }
    static inline auto Printfloat2(Any a0, Any a1, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINTFLOAT2), void>(a0, a1, value); }
    static inline auto Printint(int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINTINT), void>(value); }
    static inline auto Printint2(int value, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINTINT2), void>(value, a1); }
    static inline auto Printnl() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINTNL), void>(); }
    static inline auto Printstring(const char* str) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINTSTRING), void>(str); }
    static inline auto Printvector(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRINTVECTOR), void>(x, y, z); }
    static inline auto PrivateSkipToNextScriptedConversationLine() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PRIVATE_SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE), Any>(); }
    static inline auto ProcessMissionDeletionList() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PROCESS_MISSION_DELETION_LIST), void>(); }
    static inline auto ProfilerDumpValues() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PROFILER_DUMP_VALUES), Any>(); }
    static inline auto ProjectedDistance(float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PROJECTED_DISTANCE), float>(a0, a1, a2, a3, a4, a5, a6, a7, a8); }
    static inline auto PulseCrosshair(BOOL a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::PULSE_CROSSHAIR), void>(a0); }
    static inline auto QueryMonitoredStatEntry(int a0, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::QUERY_MONITORED_STAT_ENTRY), Any>(a0, a1); }
    static inline auto QueryMonitoredStats(int a0, Any* a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::QUERY_MONITORED_STATS), BOOL>(a0, a1); }
    static inline auto ReactToCollision(Ped ped, float a1, float a2, float a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REACT_TO_COLLISION), void>(ped, a1, a2, a3); }
    static inline auto ReenablePlayerInput(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REENABLE_PLAYER_INPUT), void>(index); }
    static inline auto RegisterBoatWake(Vehicle boat, float a1, float a2, float a3, float a4, float a5, float a6, float a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_BOAT_WAKE), void>(boat, a1, a2, a3, a4, a5, a6, a7); }
    static inline auto RegisterBrainWithMissionObject(Object object, const char* a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_BRAIN_WITH_MISSION_OBJECT), void>(object, a1); }
    static inline auto RegisterDetachPlayerForCutscene() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_DETACH_PLAYER_FOR_CUTSCENE), void>(); }
    static inline auto RegisterHatedTargetsAroundPed(Ped ped, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_HATED_TARGETS_AROUND_PED), void>(ped, radius); }
    static inline auto RegisterHatedTargetsInArea(Ped ped, float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_HATED_TARGETS_IN_AREA), void>(ped, x, y, z, radius); }
    static inline auto RegisterHideEntityAtPosition(Hash modelHash, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_HIDE_ENTITY_AT_POSITION), void>(modelHash, x, y, z); }
    static inline auto RegisterInjury() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_INJURY), Any>(); }
    static inline auto RegisterKillInMultiplayerGame(Player player, Player player2, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_KILL_IN_MULTIPLAYER_GAME), void>(player, player2, a2); }
    static inline auto RegisterObjectPostSeamlessCutscene(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_OBJECT_POST_SEAMLESS_CUTSCENE), void>(name); }
    static inline auto RegisterObjectPreSeamlessCutscene(Object object, const char* name, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_OBJECT_PRE_SEAMLESS_CUTSCENE), void>(object, name, a2); }
    static inline auto RegisterPedPostSeamlessCutscene(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_PED_POST_SEAMLESS_CUTSCENE), void>(name); }
    static inline auto RegisterPedPreSeamlessCutscene(Ped ped, const char* name, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_PED_PRE_SEAMLESS_CUTSCENE), void>(ped, name, a2); }
    static inline auto RegisterPedShotTuningSpecial01(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_PED_SHOT_TUNING_SPECIAL01), void>(ped); }
    static inline auto RegisterPersistentGlobalVariables(Any* ptr, int count) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_PERSISTENT_GLOBAL_VARIABLES), void>(ptr, count); }
    static inline auto RegisterPlayerRespawnCoords(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_PLAYER_RESPAWN_COORDS), void>(x, y, z); }
    static inline auto RegisterScenePedSeamlessCutscene(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_SCENE_PED_SEAMLESS_CUTSCENE), void>(a0, a1); }
    static inline auto RegisterScriptTunableVariableCrcFloat(Hash tunableHash, float* value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_SCRIPT_TUNABLE_VARIABLE_CRC_FLOAT), BOOL>(tunableHash, value); }
    static inline auto RegisterScriptTunableVariableCrcInt(Hash tunableHash, int* value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_SCRIPT_TUNABLE_VARIABLE_CRC_INT), BOOL>(tunableHash, value); }
    static inline auto RegisterScriptTunableVariableFloat(const char* context, const char* name, float* value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_SCRIPT_TUNABLE_VARIABLE_FLOAT), BOOL>(context, name, value); }
    static inline auto RegisterScriptTunableVariableInt(const char* context, const char* name, int* value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_SCRIPT_TUNABLE_VARIABLE_INT), BOOL>(context, name, value); }
    static inline auto RegisterTarget(Ped ped, Ped targetPed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_TARGET), void>(ped, targetPed); }
    static inline auto RegisterVehiclePostSeamlessCutscene(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_VEHICLE_POST_SEAMLESS_CUTSCENE), void>(name); }
    static inline auto RegisterVehiclePreSeamlessCutscene(Vehicle vehicle, const char* name, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_VEHICLE_PRE_SEAMLESS_CUTSCENE), void>(vehicle, name, a2); }
    static inline auto RegisterWeaponPostSeamlessCutscene(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_WEAPON_POST_SEAMLESS_CUTSCENE), void>(name); }
    static inline auto RegisterWeaponPreSeamlessCutscene(Weapon weapon, const char* name, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_WEAPON_PRE_SEAMLESS_CUTSCENE), void>(weapon, name, a2); }
    static inline auto RegisterWorldPointScriptBrain(const char* a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REGISTER_WORLD_POINT_SCRIPT_BRAIN), void>(a0); }
    static inline auto ReleaseMovie(int a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RELEASE_MOVIE), void>(a0); }
    static inline auto ReleaseNamedScriptAudioBank(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RELEASE_NAMED_SCRIPT_AUDIO_BANK), void>(name); }
    static inline auto ReleasePathNodes() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RELEASE_PATH_NODES), void>(); }
    static inline auto ReleasePedEntitySyncPoint(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RELEASE_PED_ENTITY_SYNC_POINT), void>(ped); }
    static inline auto ReleasePreloadedStreamComponent(int a0, int a1, int a2, int a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RELEASE_PRELOADED_STREAM_COMPONENT), void>(a0, a1, a2, a3); }
    static inline auto ReleaseScriptAudioBank() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RELEASE_SCRIPT_AUDIO_BANK), void>(); }
    static inline auto ReleaseSoundId(int soundId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RELEASE_SOUND_ID), void>(soundId); }
    static inline auto ReleaseStreamingMemory() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RELEASE_STREAMING_MEMORY), Any>(); }
    static inline auto ReleaseTexture(ScrHandle texture) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RELEASE_TEXTURE), void>(texture); }
    static inline auto ReleaseTimeOfDay() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RELEASE_TIME_OF_DAY), void>(); }
    static inline auto ReloadPedWeapons(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RELOAD_PED_WEAPONS), void>(ped); }
    static inline auto RemoveAllCoverBlockingAreas() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_ALL_COVER_BLOCKING_AREAS), Any>(); }
    static inline auto RemoveAllEnvironmentBlood() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_ALL_ENVIRONMENT_BLOOD), void>(); }
    static inline auto RemoveAllEnvironmentBloodAtCoord(float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_ALL_ENVIRONMENT_BLOOD_AT_COORD), void>(x, y, z, radius); }
    static inline auto RemoveAllGlints() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_ALL_GLINTS), void>(); }
    static inline auto RemoveAllInteractionVolumes() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_ALL_INTERACTION_VOLUMES), void>(); }
    static inline auto RemoveAllLocalPlayerWeaponsKeepingMpitems() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_ALL_LOCAL_PLAYER_WEAPONS_KEEPING_MPITEMS), void>(); }
    static inline auto RemoveAllPedWeapons(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_ALL_PED_WEAPONS), void>(ped); }
    static inline auto RemoveAllPickups() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_ALL_PICKUPS), void>(); }
    static inline auto RemoveAllPickupsAndPlacementsOfType(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_ALL_PICKUPS_AND_PLACEMENTS_OF_TYPE), void>(a0); }
    static inline auto RemoveAllPlacements() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_ALL_PLACEMENTS), void>(); }
    static inline auto RemoveAllScriptedBlips() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_ALL_SCRIPTED_BLIPS), void>(); }
    static inline auto RemoveAllScriptedWeaponModifier(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_ALL_SCRIPTED_WEAPON_MODIFIER), void>(ped); }
    static inline auto RemoveAnimDict(const char* dictName, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_ANIM_DICT), void>(dictName, a1); }
    static inline auto RemoveAttachedWeaponsFromVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_ATTACHED_WEAPONS_FROM_VEHICLE), void>(vehicle); }
    static inline auto RemoveBlip(Blip blip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_BLIP), void>(blip); }
    static inline auto RemoveDecisionMaker(ScrHandle decisionMaker) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_DECISION_MAKER), void>(decisionMaker); }
    static inline auto RemoveFakeNetworkNameFromPed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_FAKE_NETWORK_NAME_FROM_PED), void>(ped); }
    static inline auto RemoveGlint(int glint) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_GLINT), void>(glint); }
    static inline auto RemoveGroup(Group group) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_GROUP), void>(group); }
    static inline auto RemoveInteractionVolumeIfExists(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_INTERACTION_VOLUME_IF_EXISTS), void>(a0); }
    static inline auto RemoveIpl(const char* iplName, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_IPL), void>(iplName, a1); }
    static inline auto RemoveLocalPlayerArmourAndSpecialItems() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_LOCAL_PLAYER_ARMOUR_AND_SPECIAL_ITEMS), void>(); }
    static inline auto RemoveLocalPlayerMpSpecialItem(int item) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_LOCAL_PLAYER_MP_SPECIAL_ITEM), void>(item); }
    static inline auto RemoveParticleFx(ScrHandle ptfxHandle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PARTICLE_FX), void>(ptfxHandle); }
    static inline auto RemoveParticleFxFromObject(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PARTICLE_FX_FROM_OBJECT), void>(object); }
    static inline auto RemoveParticleFxFromPed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PARTICLE_FX_FROM_PED), void>(ped); }
    static inline auto RemoveParticleFxFromVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PARTICLE_FX_FROM_VEHICLE), void>(vehicle); }
    static inline auto RemovePedAmmo(Ped ped, Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PED_AMMO), void>(ped, weaponHash); }
    static inline auto RemovePedDefensiveArea(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PED_DEFENSIVE_AREA), void>(ped); }
    static inline auto RemovePedElegantly(Ped* ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PED_ELEGANTLY), void>(ped); }
    static inline auto RemovePedFromGroup(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PED_FROM_GROUP), void>(ped); }
    static inline auto RemovePedHelmet(Ped ped, BOOL instantly) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PED_HELMET), void>(ped, instantly); }
    static inline auto RemovePedIgnoreCoverEntry() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PED_IGNORE_COVER_ENTRY), Any>(); }
    static inline auto RemovePedRecording(int recordingIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PED_RECORDING), void>(recordingIndex); }
    static inline auto RemovePedUseCoverEntry() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PED_USE_COVER_ENTRY), Any>(); }
    static inline auto RemovePedWeapon(Ped ped, Weapon weapon) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PED_WEAPON), void>(ped, weapon); }
    static inline auto RemovePickup(Pickup pickup) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PICKUP), void>(pickup); }
    static inline auto RemovePickupsOfTypeInGameplayHelperBox(Hash pickupHash, const char* boxName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PICKUPS_OF_TYPE_IN_GAMEPLAY_HELPER_BOX), void>(pickupHash, boxName); }
    static inline auto RemovePlacement(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PLACEMENT), void>(index); }
    static inline auto RemovePlayerHelmet() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PLAYER_HELMET), Any>(); }
    static inline auto RemoveProjtexFromObject(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PROJTEX_FROM_OBJECT), void>(object); }
    static inline auto RemoveProjtexInRange(float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_PROJTEX_IN_RANGE), void>(x, y, z, radius); }
    static inline auto RemoveScenarioBlockingAreas() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_SCENARIO_BLOCKING_AREAS), void>(); }
    static inline auto RemoveScriptFire(FireId scriptFire) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_SCRIPT_FIRE), void>(scriptFire); }
    static inline auto RemoveScriptedWeaponModifier(Ped ped, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_SCRIPTED_WEAPON_MODIFIER), void>(ped, a1); }
    static inline auto RemoveSpatialdataCoverPoint(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_SPATIALDATA_COVER_POINT), void>(a0); }
    static inline auto RemoveTextureDict(ScrHandle dict) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_TEXTURE_DICT), void>(dict); }
    static inline auto RemoveVehicleFromParkedVehiclesBudget(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_VEHICLE_FROM_PARKED_VEHICLES_BUDGET), void>(vehicle, toggle); }
    static inline auto RemoveVehicleRecording(int recordingIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_VEHICLE_RECORDING), void>(recordingIndex); }
    static inline auto RemoveVehicleStuckCheck(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_VEHICLE_STUCK_CHECK), void>(vehicle); }
    static inline auto RemoveVehicleUpsidedownCheck(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_VEHICLE_UPSIDEDOWN_CHECK), void>(vehicle); }
    static inline auto RemoveVehicleWindow(Vehicle vehicle, int window) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_VEHICLE_WINDOW), void>(vehicle, window); }
    static inline auto RemoveVehiclesFromGeneratorsInArea(float x1, float y1, float z1, float x2, float y2, float z2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA), void>(x1, y1, z1, x2, y2, z2); }
    static inline auto RemoveWeaponFromPed(Ped ped, Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_WEAPON_FROM_PED), void>(ped, weaponHash); }
    static inline auto RemoveWindThermal() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REMOVE_WIND_THERMAL), Any>(); }
    static inline auto RenderScriptCams(BOOL render, BOOL ease, int easeTime, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RENDER_SCRIPT_CAMS), void>(render, ease, easeTime, a3); }
    static inline auto ReplenishLoadoutInInventory() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REPLENISH_LOADOUT_IN_INVENTORY), void>(); }
    static inline auto RequestAdditionalText(const char* gxt, int slot) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_ADDITIONAL_TEXT), void>(gxt, slot); }
    static inline auto RequestAnimDict(const char* dictName, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_ANIM_DICT), Request_s>(dictName, a1); }
    static inline auto RequestCollisionAtCoord(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_COLLISION_AT_COORD), void>(x, y, z); }
    static inline auto RequestCollisionForModel(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_COLLISION_FOR_MODEL), void>(modelHash); }
    static inline auto RequestInteriorModels(Hash modelHash, const char* a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_INTERIOR_MODELS), void>(modelHash, a1); }
    static inline auto RequestIpl(const char* iplName, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_IPL), void>(iplName, a1); }
    static inline auto RequestLoad() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_LOAD), BOOL>(); }
    static inline auto RequestModel(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_MODEL), Request_s>(modelHash); }
    static inline auto RequestPedRecording(int recordingIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_PED_RECORDING), void>(recordingIndex); }
    static inline auto RequestRoomMinimalCollisionMeshByKey(Hash roomHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_ROOM_MINIMAL_COLLISION_MESH_BY_KEY), void>(roomHash); }
    static inline auto RequestSave() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_SAVE), BOOL>(); }
    static inline auto RequestScript(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_SCRIPT), Request_s>(name); }
    static inline auto RequestScriptAudioBank(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_SCRIPT_AUDIO_BANK), BOOL>(name); }
    static inline auto RequestScriptStream(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_SCRIPT_STREAM), Any>(a0, a1); }
    static inline auto RequestStreamedTextureDict(const char* dictName, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_STREAMED_TEXTURE_DICT), void>(dictName, a1); }
    static inline auto RequestVehicleRecording(int recordingIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_VEHICLE_RECORDING), void>(recordingIndex); }
    static inline auto RequestWeapon(Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REQUEST_WEAPON), void>(weaponHash); }
    static inline auto ReserveBullets(int amount) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESERVE_BULLETS), void>(amount); }
    static inline auto ReserveStreamingMemory() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESERVE_STREAMING_MEMORY), Any>(); }
    static inline auto ResetAdrenalineEnable() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_ADRENALINE_ENABLE), void>(); }
    static inline auto ResetAdrenalineOverride(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_ADRENALINE_OVERRIDE), void>(index); }
    static inline auto ResetAdrenalineOverrides() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_ADRENALINE_OVERRIDES), void>(); }
    static inline auto ResetAllPtfx() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_ALL_PTFX), void>(); }
    static inline auto ResetBloodEffects() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_BLOOD_EFFECTS), void>(); }
    static inline auto ResetBulletCameraTimewarpScale() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_BULLET_CAMERA_TIMEWARP_SCALE), Any>(); }
    static inline auto ResetCheckpointAttempts() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_CHECKPOINT_ATTEMPTS), void>(); }
    static inline auto ResetDestroyedCover() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_DESTROYED_COVER), void>(); }
    static inline auto ResetForcedAimIntentionDirection() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_FORCED_AIM_INTENTION_DIRECTION), void>(); }
    static inline auto ResetForcedForwardDirection() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_FORCED_FORWARD_DIRECTION), void>(); }
    static inline auto ResetGameIdleTimer() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_GAME_IDLE_TIMER), void>(); }
    static inline auto ResetGameplayCam() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_GAMEPLAY_CAM), void>(); }
    static inline auto ResetLastManStanding() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_LAST_MAN_STANDING), void>(); }
    static inline auto ResetLevelAnimDictionaries() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_LEVEL_ANIM_DICTIONARIES), BOOL>(); }
    static inline auto ResetLoadoutChangedDuringGame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_LOADOUT_CHANGED_DURING_GAME), void>(); }
    static inline auto ResetPaynekillerHealthBoost(float unused) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_PAYNEKILLER_HEALTH_BOOST), void>(unused); }
    static inline auto ResetPaynekillerRechargeRate() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_PAYNEKILLER_RECHARGE_RATE), Any>(); }
    static inline auto ResetPedBloodSmear(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_PED_BLOOD_SMEAR), void>(ped); }
    static inline auto ResetPedClones(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_PED_CLONES), void>(ped); }
    static inline auto ResetPedFleezone(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_PED_FLEEZONE), void>(ped); }
    static inline auto ResetPedGore(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_PED_GORE), void>(ped); }
    static inline auto ResetPedModelLodDistances(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_PED_MODEL_LOD_DISTANCES), void>(modelHash); }
    static inline auto ResetPedSuggestedCombatArea(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_PED_SUGGESTED_COMBAT_AREA), void>(ped); }
    static inline auto ResetPedTethering(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_PED_TETHERING), void>(ped); }
    static inline auto ResetPedVisibleDamage(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_PED_VISIBLE_DAMAGE), void>(ped); }
    static inline auto ResetPlayerInputGait(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_PLAYER_INPUT_GAIT), void>(player); }
    static inline auto ResetStreamingPointOfInterest() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_STREAMING_POINT_OF_INTEREST), void>(); }
    static inline auto ResetVehicleStuckTimer(Vehicle vehicle, int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_VEHICLE_STUCK_TIMER), void>(vehicle, index); }
    static inline auto ResetVehicleWheels(Vehicle vehicle, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_VEHICLE_WHEELS), void>(vehicle, a1); }
    static inline auto ResetWaterSimulation() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESET_WATER_SIMULATION), void>(); }
    static inline auto RestorePickups() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESTORE_PICKUPS), void>(); }
    static inline auto RestoreScriptArrayFromScratchpad() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESTORE_SCRIPT_ARRAY_FROM_SCRATCHPAD), Any>(); }
    static inline auto ResumeBulletCameraWipe() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESUME_BULLET_CAMERA_WIPE), void>(); }
    static inline auto ResumeBulletCameraWipeOnFadein() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RESUME_BULLET_CAMERA_WIPE_ON_FADEIN), void>(); }
    static inline auto ReturnToMpLobby(const char* reasonTextLabel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RETURN_TO_MP_LOBBY), void>(reasonTextLabel); }
    static inline auto ReturnToTitlescreen(const char* reasonTextLabel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::RETURN_TO_TITLESCREEN), void>(reasonTextLabel); }
    static inline auto ReviveInjuredPed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::REVIVE_INJURED_PED), void>(ped); }
    static inline auto RopeSetCollisionFlags(Rope rope, int flags1, int flags2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ROPE_SET_COLLISION_FLAGS), void>(rope, flags1, flags2); }
    static inline auto RotateObject(Object object, float a1, float a2, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ROTATE_OBJECT), BOOL>(object, a1, a2, a3); }
    static inline auto Round(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::ROUND), int>(value); }
    static inline auto SaveFloatToDebugFile() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SAVE_FLOAT_TO_DEBUG_FILE), Any>(); }
    static inline auto SaveFloatToNamedDebugFile() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SAVE_FLOAT_TO_NAMED_DEBUG_FILE), Any>(); }
    static inline auto SaveIntToDebugFile() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SAVE_INT_TO_DEBUG_FILE), Any>(); }
    static inline auto SaveIntToNamedDebugFile() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SAVE_INT_TO_NAMED_DEBUG_FILE), Any>(); }
    static inline auto SaveLoadoutToProfile() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SAVE_LOADOUT_TO_PROFILE), void>(); }
    static inline auto SaveNewlineToDebugFile() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SAVE_NEWLINE_TO_DEBUG_FILE), Any>(); }
    static inline auto SaveNewlineToNamedDebugFile() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SAVE_NEWLINE_TO_NAMED_DEBUG_FILE), Any>(); }
    static inline auto SavePickups() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SAVE_PICKUPS), void>(); }
    static inline auto SaveScriptArrayInScratchpad() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SAVE_SCRIPT_ARRAY_IN_SCRATCHPAD), Any>(); }
    static inline auto SaveStoryDiscSwap(const char* levelName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SAVE_STORY_DISC_SWAP), void>(levelName); }
    static inline auto SaveStringToDebugFile() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SAVE_STRING_TO_DEBUG_FILE), Any>(); }
    static inline auto SaveStringToNamedDebugFile() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SAVE_STRING_TO_NAMED_DEBUG_FILE), Any>(); }
    static inline auto Scream(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCREAM), void>(ped); }
    static inline auto ScriptVarAddFloat(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_ADD_FLOAT), void>(name); }
    static inline auto ScriptVarAddInt(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_ADD_INT), void>(name); }
    static inline auto ScriptVarExists(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_EXISTS), BOOL>(name); }
    static inline auto ScriptVarGetFloat(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_GET_FLOAT), float>(name); }
    static inline auto ScriptVarGetInt(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_GET_INT), int>(name); }
    static inline auto ScriptVarHashAddFloat(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_HASH_ADD_FLOAT), void>(hash); }
    static inline auto ScriptVarHashAddInt(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_HASH_ADD_INT), void>(hash); }
    static inline auto ScriptVarHashExists(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_HASH_EXISTS), BOOL>(hash); }
    static inline auto ScriptVarHashGetFloat(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_HASH_GET_FLOAT), float>(hash); }
    static inline auto ScriptVarHashGetInt(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_HASH_GET_INT), int>(hash); }
    static inline auto ScriptVarHashSetFloat(Hash hash, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_HASH_SET_FLOAT), void>(hash, value); }
    static inline auto ScriptVarHashSetInt(Hash hash, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_HASH_SET_INT), void>(hash, value); }
    static inline auto ScriptVarHashWaitForChangeFloat() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_HASH_WAIT_FOR_CHANGE_FLOAT), Any>(); }
    static inline auto ScriptVarHashWaitForChangeInt() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_HASH_WAIT_FOR_CHANGE_INT), Any>(); }
    static inline auto ScriptVarSetFloat(Hash hash, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_SET_FLOAT), void>(hash, value); }
    static inline auto ScriptVarSetInt(Hash hash, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_SET_INT), void>(hash, value); }
    static inline auto ScriptVarWaitForChangeFloat() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_WAIT_FOR_CHANGE_FLOAT), Any>(); }
    static inline auto ScriptVarWaitForChangeInt() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SCRIPT_VAR_WAIT_FOR_CHANGE_INT), Any>(); }
    static inline auto SearchCriteriaConsiderPedsWithFlagTrue(int flag) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEARCH_CRITERIA_CONSIDER_PEDS_WITH_FLAG_TRUE), void>(flag); }
    static inline auto SearchCriteriaRejectPedsWithFlagTrue(int flag) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEARCH_CRITERIA_REJECT_PEDS_WITH_FLAG_TRUE), void>(flag); }
    static inline auto SelectWeaponToHand(Ped ped, Weapon weapon, int handType, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SELECT_WEAPON_TO_HAND), void>(ped, weapon, handType, a3); }
    static inline auto SetActionConsumed(int action, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ACTION_CONSUMED), void>(action, toggle); }
    static inline auto SetActiontreeInfo(const char* name, const char* fileName, const char* shortName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ACTIONTREE_INFO), void>(name, fileName, shortName); }
    static inline auto SetActivateFragObjectPhysicsAsSoonAsItIsUnfrozen(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ACTIVATE_FRAG_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN), void>(object, toggle); }
    static inline auto SetActivateObjectPhysicsAsSoonAsItIsUnfrozen(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN), void>(object, toggle); }
    static inline auto SetActtestEnabled(const char* name, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ACTTEST_ENABLED), void>(name, toggle); }
    static inline auto SetAdrenalineAmt(float amount) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ADRENALINE_AMT), void>(amount); }
    static inline auto SetAdrenalineNotAllow(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ADRENALINE_NOT_ALLOW), void>(toggle); }
    static inline auto SetAdrenalineOverride(int index, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ADRENALINE_OVERRIDE), void>(index, value); }
    static inline auto SetAdrenalinePause(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ADRENALINE_PAUSE), void>(toggle); }
    static inline auto SetAdrenalineStreaktime(int time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ADRENALINE_STREAKTIME), void>(time); }
    static inline auto SetAiProjectileThrowEnabled(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_AI_PROJECTILE_THROW_ENABLED), void>(toggle); }
    static inline auto SetAiProjectileThrowUseActionTree(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_AI_PROJECTILE_THROW_USE_ACTION_TREE), void>(toggle); }
    static inline auto SetAiShouldAlwaysMissPed(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_AI_SHOULD_ALWAYS_MISS_PED), void>(ped, toggle); }
    static inline auto SetAimCamZoomLevel(int zoomLevel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_AIM_CAM_ZOOM_LEVEL), void>(zoomLevel); }
    static inline auto SetAirDragMultiplierForPlayersVehicle(Player player, float multiplier) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE), void>(player, multiplier); }
    static inline auto SetAllBoatsWakesMaxSpeedEvo(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ALL_BOATS_WAKES_MAX_SPEED_EVO), void>(toggle); }
    static inline auto SetAllLowPriorityVehicleGeneratorsActive(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE), void>(toggle); }
    static inline auto SetAllMotionControlPreferences() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ALL_MOTION_CONTROL_PREFERENCES), Any>(); }
    static inline auto SetAllRandomPedsFlee(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ALL_RANDOM_PEDS_FLEE), void>(player, toggle); }
    static inline auto SetAllVehicleGeneratorsActive() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ALL_VEHICLE_GENERATORS_ACTIVE), void>(); }
    static inline auto SetAllVehicleGeneratorsActiveInArea(float x1, float y1, float z1, float x2, float y2, float z2, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA), void>(x1, y1, z1, x2, y2, z2, toggle); }
    static inline auto SetAllVehiclesCanBeDamaged(BOOL value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ALL_VEHICLES_CAN_BE_DAMAGED), void>(value); }
    static inline auto SetAllVehiclesHighLod(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ALL_VEHICLES_HIGH_LOD), void>(toggle); }
    static inline auto SetAllowDummyConversions(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ALLOW_DUMMY_CONVERSIONS), void>(toggle); }
    static inline auto SetAllowMolotovDamage(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ALLOW_MOLOTOV_DAMAGE), void>(toggle); }
    static inline auto SetAllowPlayerDieFromShootDodge(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ALLOW_PLAYER_DIE_FROM_SHOOT_DODGE), void>(toggle); }
    static inline auto SetAllowPlayerReactToExplosion(Ped ped, BOOL toggle, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ALLOW_PLAYER_REACT_TO_EXPLOSION), void>(ped, toggle, a2); }
    static inline auto SetAllowedToFailCoverForBlockingLineOfFire(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ALLOWED_TO_FAIL_COVER_FOR_BLOCKING_LINE_OF_FIRE), void>(toggle); }
    static inline auto SetAmbientVoiceName(Ped ped, const char* voiceName, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_AMBIENT_VOICE_NAME), void>(ped, voiceName, a2); }
    static inline auto SetAmmoInClip(Ped ped, Hash weaponHash, int ammo) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_AMMO_IN_CLIP), BOOL>(ped, weaponHash, ammo); }
    static inline auto SetAmmobagAmmoAmount(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_AMMOBAG_AMMO_AMOUNT), void>(a0, a1, a2); }
    static inline auto SetAmmobagEnabled(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_AMMOBAG_ENABLED), void>(a0, a1); }
    static inline auto SetAmmobagRegenRange(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_AMMOBAG_REGEN_RANGE), void>(a0, a1); }
    static inline auto SetAmmobagRegenTime(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_AMMOBAG_REGEN_TIME), void>(a0, a1); }
    static inline auto SetAnimatedTextAnimations(Any a0, Any a1, float a2, float a3, Any a4, Any a5, Any a6, float a7, float a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ANIMATED_TEXT_ANIMATIONS), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8); }
    static inline auto SetAnimatedTextColor(int r, int g, int b, int a) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ANIMATED_TEXT_COLOR), void>(r, g, b, a); }
    static inline auto SetAnimatedTextJustify(int justifyType) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ANIMATED_TEXT_JUSTIFY), void>(justifyType); }
    static inline auto SetAnimatedTextScale(float a0, float a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ANIMATED_TEXT_SCALE), void>(a0, a1); }
    static inline auto SetAnimatedTextTwitch(float a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ANIMATED_TEXT_TWITCH), void>(a0, a1, a2); }
    static inline auto SetApplyWaterPhysicsToRagdoll(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_APPLY_WATER_PHYSICS_TO_RAGDOLL), void>(ped, toggle); }
    static inline auto SetArcademodeEvent(int a0, Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ARCADEMODE_EVENT), void>(a0, ped); }
    static inline auto SetArrowAboveBlippedPickups(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ARROW_ABOVE_BLIPPED_PICKUPS), void>(toggle); }
    static inline auto SetAttachedPedRotation(Ped ped, float xRot, float yRot, float zRot) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ATTACHED_PED_ROTATION), void>(ped, xRot, yRot, zRot); }
    static inline auto SetAutodestroyMpitemsWhenPickedByAnEnemy(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_AUTODESTROY_MPITEMS_WHEN_PICKED_BY_AN_ENEMY), void>(a0); }
    static inline auto SetBcamStrHelperTrackPlayer(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BCAM_STR_HELPER_TRACK_PLAYER), void>(toggle); }
    static inline auto SetBigBoatsPropellorPtfxMaxSpeedEvo(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BIG_BOATS_PROPELLOR_PTFX_MAX_SPEED_EVO), void>(toggle); }
    static inline auto SetBigBoatsPtfxMaxSpeedEvo(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BIG_BOATS_PTFX_MAX_SPEED_EVO), void>(toggle); }
    static inline auto SetBit(int* data, int bit) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BIT), void>(data, bit); }
    static inline auto SetBitsInRange(int* data, int rangeStart, int rangeEnd, int a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BITS_IN_RANGE), void>(data, rangeStart, rangeEnd, a3); }
    static inline auto SetBlipAlpha(Blip blip, int alpha) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_ALPHA), void>(blip, alpha); }
    static inline auto SetBlipAsFriendly(Blip blip, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_AS_FRIENDLY), void>(blip, toggle); }
    static inline auto SetBlipAsShortRange(Blip blip, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_AS_SHORT_RANGE), void>(blip, toggle); }
    static inline auto SetBlipColour(Blip blip, int color) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_COLOUR), void>(blip, color); }
    static inline auto SetBlipCoords(Blip blip, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_COORDS), void>(blip, x, y, z); }
    static inline auto SetBlipDim(Blip blip, int dim) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_DIM), void>(blip, dim); }
    static inline auto SetBlipDisplay(Blip blip, int display) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_DISPLAY), void>(blip, display); }
    static inline auto SetBlipFlashes(Blip blip, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_FLASHES), void>(blip, toggle); }
    static inline auto SetBlipFlashesAlternate(Blip blip, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_FLASHES_ALTERNATE), void>(blip, toggle); }
    static inline auto SetBlipMarkerLongDistance(Blip blip, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_MARKER_LONG_DISTANCE), void>(blip, toggle); }
    static inline auto SetBlipNameFromAscii(Blip blip, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_NAME_FROM_ASCII), void>(blip, name); }
    static inline auto SetBlipNameFromTextFile(Blip blip, const char* gxt) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_NAME_FROM_TEXT_FILE), void>(blip, gxt); }
    static inline auto SetBlipPriority(Blip blip, int priority) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_PRIORITY), void>(blip, priority); }
    static inline auto SetBlipRotation(Blip blip, float rotation) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_ROTATION), void>(blip, rotation); }
    static inline auto SetBlipRoute() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_ROUTE), Any>(); }
    static inline auto SetBlipScale(Blip blip, float scale) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_SCALE), void>(blip, scale); }
    static inline auto SetBlipSprite(Blip blip, int sprite) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLIP_SPRITE), void>(blip, sprite); }
    static inline auto SetBlockingOfNonTemporaryEvents(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS), void>(ped, toggle); }
    static inline auto SetBlockingOfPedTargetting(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BLOCKING_OF_PED_TARGETTING), void>(ped, toggle); }
    static inline auto SetBoatAnchor(Vehicle boat, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BOAT_ANCHOR), void>(boat, toggle); }
    static inline auto SetBoatOutOfControlAndBlowUpWhenDriverDead(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BOAT_OUT_OF_CONTROL_AND_BLOW_UP_WHEN_DRIVER_DEAD), void>(toggle); }
    static inline auto SetBoatPetroltankBurnRate(Vehicle boat, float rate) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BOAT_PETROLTANK_BURN_RATE), void>(boat, rate); }
    static inline auto SetBoatTiltInAir(Vehicle boat, BOOL a1, float a2, float a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BOAT_TILT_IN_AIR), void>(boat, a1, a2, a3); }
    static inline auto SetBoatWillSink(Vehicle boat, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BOAT_WILL_SINK), void>(boat, toggle); }
    static inline auto SetBossPecentDamage(float percentage) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BOSS_PECENT_DAMAGE), void>(percentage); }
    static inline auto SetBulletCamOnNextProjectile(Ped ped, const char* a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BULLET_CAM_ON_NEXT_PROJECTILE), void>(ped, a1); }
    static inline auto SetBulletCamPref(Ped ped, const char* a1, const char* a2, const char* a3, const char* a4, BOOL a5, const char* a6, const char* a7, const char* a8, const char* a9, const char* a10, const char* a11, const char* a12) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BULLET_CAM_PREF), void>(ped, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); }
    static inline auto SetBulletCameraObjectTracker() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BULLET_CAMERA_OBJECT_TRACKER), Any>(); }
    static inline auto SetBulletCameraTrackedPed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BULLET_CAMERA_TRACKED_PED), Any>(); }
    static inline auto SetBulletCameraTracker(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BULLET_CAMERA_TRACKER), void>(a0); }
    static inline auto SetBulletCameraVehicle(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BULLET_CAMERA_VEHICLE), void>(a0, a1); }
    static inline auto SetBulletCameraVictim(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BULLET_CAMERA_VICTIM), void>(a0, a1); }
    static inline auto SetBulletVelocityModifier(Ped ped, float velocity) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BULLET_VELOCITY_MODIFIER), void>(ped, velocity); }
    static inline auto SetBulletcamStreamhelpersEnabled(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_BULLETCAM_STREAMHELPERS_ENABLED), void>(toggle); }
    static inline auto SetCamActive(Cam cam, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_ACTIVE), void>(cam, toggle); }
    static inline auto SetCamActiveWithInterp(Cam camTo, Cam camFrom, int duration, int easeLocation, int easeRotation) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_ACTIVE_WITH_INTERP), void>(camTo, camFrom, duration, easeLocation, easeRotation); }
    static inline auto SetCamCoord(Cam cam, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_COORD), void>(cam, x, y, z); }
    static inline auto SetCamDofStrength(Cam cam, float strength) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_DOF_STRENGTH), void>(cam, strength); }
    static inline auto SetCamFarClip(Cam cam, float farClip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_FAR_CLIP), void>(cam, farClip); }
    static inline auto SetCamFarDof(Cam cam, float a1, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_FAR_DOF), void>(cam, a1, a2); }
    static inline auto SetCamForceLeftSide(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_FORCE_LEFT_SIDE), void>(toggle); }
    static inline auto SetCamFov(Cam cam, float fov) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_FOV), void>(cam, fov); }
    static inline auto SetCamInheritRollObject(Cam cam, Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_INHERIT_ROLL_OBJECT), void>(cam, object); }
    static inline auto SetCamInheritRollVehicle(Cam cam, Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_INHERIT_ROLL_VEHICLE), void>(cam, vehicle); }
    static inline auto SetCamMotionBlurStrength(Cam cam, float strength) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_MOTION_BLUR_STRENGTH), void>(cam, strength); }
    static inline auto SetCamNearClip(Cam cam, float nearClip) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_NEAR_CLIP), void>(cam, nearClip); }
    static inline auto SetCamNearDof(Cam cam, float a1, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_NEAR_DOF), void>(cam, a1, a2); }
    static inline auto SetCamParams(Cam cam, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fieldOfView, int a8, int a9, int a10) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_PARAMS), void>(cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, a8, a9, a10); }
    static inline auto SetCamRot(Cam cam, float rotX, float rotY, float rotZ) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_ROT), void>(cam, rotX, rotY, rotZ); }
    static inline auto SetCamShakeAmplitude(Cam cam, float amplitude) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_SHAKE_AMPLITUDE), void>(cam, amplitude); }
    static inline auto SetCamSideLeft(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_SIDE_LEFT), void>(toggle); }
    static inline auto SetCamViewMode(int mode) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAM_VIEW_MODE), void>(mode); }
    static inline auto SetCameraOverride(const char* camName, const char* camName2, BOOL a2, BOOL a3, BOOL a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAMERA_OVERRIDE), void>(camName, camName2, a2, a3, a4); }
    static inline auto SetCameraUseCoverForAiming(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAMERA_USE_COVER_FOR_AIMING), void>(toggle); }
    static inline auto SetCanAiKickThroughCorpses(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAN_AI_KICK_THROUGH_CORPSES), void>(ped, toggle); }
    static inline auto SetCanResprayVehicle(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAN_RESPRAY_VEHICLE), void>(vehicle, toggle); }
    static inline auto SetCanRollDodge(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAN_ROLL_DODGE), void>(ped, toggle); }
    static inline auto SetCanRollingPickup(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAN_ROLLING_PICKUP), void>(ped, toggle); }
    static inline auto SetCarBootOpen(Vehicle car) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAR_BOOT_OPEN), void>(car); }
    static inline auto SetCarOutOfControlAndBlowUpWhenDriverDead(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CAR_OUT_OF_CONTROL_AND_BLOW_UP_WHEN_DRIVER_DEAD), void>(toggle); }
    static inline auto SetCashClanDiscount(float a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CASH_CLAN_DISCOUNT), void>(a0); }
    static inline auto SetChallengeFailedState(int challengeId, BOOL state) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CHALLENGE_FAILED_STATE), BOOL>(challengeId, state); }
    static inline auto SetChallengeProgress(int challengeId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CHALLENGE_PROGRESS), BOOL>(challengeId); }
    static inline auto SetCheatActive(int cheatId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CHEAT_ACTIVE), void>(cheatId); }
    static inline auto SetChiquitasAlwaysVisible(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CHIQUITAS_ALWAYS_VISIBLE), void>(toggle); }
    static inline auto SetChiquitasAlwaysVisibleOnPlayer(int a0, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CHIQUITAS_ALWAYS_VISIBLE_ON_PLAYER), void>(a0, toggle); }
    static inline auto SetCinematicButtonActive(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CINEMATIC_BUTTON_ACTIVE), void>(toggle); }
    static inline auto SetCollisionAudioDisabled() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_COLLISION_AUDIO_DISABLED), Any>(); }
    static inline auto SetCollisionBetweenPeds(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_COLLISION_BETWEEN_PEDS), void>(ped, toggle); }
    static inline auto SetContentsOfTextWidget(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CONTENTS_OF_TEXT_WIDGET), void>(a0, a1); }
    static inline auto SetControlConfigOptionDisabled(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CONTROL_CONFIG_OPTION_DISABLED), void>(toggle); }
    static inline auto SetConversationCheckHash(int index, Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CONVERSATION_CHECK_HASH), void>(index, hash); }
    static inline auto SetConvertibleRoof(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CONVERTIBLE_ROOF), void>(vehicle, toggle); }
    static inline auto SetCoordPrimaryLookat(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_COORD_PRIMARY_LOOKAT), void>(ped, x, y, z); }
    static inline auto SetCreateRandomCops(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CREATE_RANDOM_COPS), void>(toggle); }
    static inline auto SetCreditsActive(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CREDITS_ACTIVE), void>(toggle); }
    static inline auto SetCrosshairBlink() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CROSSHAIR_BLINK), void>(); }
    static inline auto SetCrosshairPulse() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CROSSHAIR_PULSE), void>(); }
    static inline auto SetCuffHands(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CUFF_HANDS), void>(ped, toggle); }
    static inline auto SetCurrentLoadoutSlot(int slot) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CURRENT_LOADOUT_SLOT), void>(slot); }
    static inline auto SetCurrentPedMoveState(Ped ped, int moveState) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CURRENT_PED_MOVE_STATE), void>(ped, moveState); }
    static inline auto SetCurrentPedWeapon(Ped ped, Hash weaponHash, BOOL equipNow) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CURRENT_PED_WEAPON), void>(ped, weaponHash, equipNow); }
    static inline auto SetCurrentWidgetGroup(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CURRENT_WIDGET_GROUP), void>(a0); }
    static inline auto SetCutsceneExtraRoomPos() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_CUTSCENE_EXTRA_ROOM_POS), Any>(); }
    static inline auto SetDamageByProjectile(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DAMAGE_BY_PROJECTILE), void>(vehicle, toggle); }
    static inline auto SetDamageFromPlayerMultiplier(float damage) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DAMAGE_FROM_PLAYER_MULTIPLIER), void>(damage); }
    static inline auto SetDamageToPlayerMultiplier(float damage) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DAMAGE_TO_PLAYER_MULTIPLIER), void>(damage); }
    static inline auto SetDeadForceWaterDepth(float depth) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DEAD_FORCE_WATER_DEPTH), void>(depth); }
    static inline auto SetDeadForceWaterDepthToDefault() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DEAD_FORCE_WATER_DEPTH_TO_DEFAULT), void>(); }
    static inline auto SetDeadPedCoords(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DEAD_PED_COORDS), void>(ped, x, y, z); }
    static inline auto SetDeadPedsDropWeapons() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DEAD_PEDS_DROP_WEAPONS), Any>(); }
    static inline auto SetDeathEffectEnabled(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DEATH_EFFECT_ENABLED), void>(toggle); }
    static inline auto SetDeathStateActive(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DEATH_STATE_ACTIVE), void>(toggle); }
    static inline auto SetDebugActive(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DEBUG_ACTIVE), void>(toggle); }
    static inline auto SetDebugLinesAndSpheresDrawingActive(BOOL active) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE), void>(active); }
    static inline auto SetDebugTextVisible() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DEBUG_TEXT_VISIBLE), Any>(); }
    static inline auto SetDefaultGlobalInstancePriority() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DEFAULT_GLOBAL_INSTANCE_PRIORITY), void>(); }
    static inline auto SetDisableCutsceneCrosshairs(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DISABLE_CUTSCENE_CROSSHAIRS), void>(toggle); }
    static inline auto SetDisableFade(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DISABLE_FADE), void>(toggle); }
    static inline auto SetDispatchCopsForPlayer() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DISPATCH_COPS_FOR_PLAYER), Any>(); }
    static inline auto SetDisplayFlags(int flags, BOOL set) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DISPLAY_FLAGS), void>(flags, set); }
    static inline auto SetDitchPoliceModels(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DITCH_POLICE_MODELS), void>(toggle); }
    static inline auto SetDriveTaskCruiseSpeed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_DRIVE_TASK_CRUISE_SPEED), Any>(); }
    static inline auto SetEnableBulletImpactWater(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ENABLE_BULLET_IMPACT_WATER), void>(toggle); }
    static inline auto SetEnablePedProcessIntelligence(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ENABLE_PED_PROCESS_INTELLIGENCE), void>(toggle); }
    static inline auto SetEndCreditsFadeActive(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_END_CREDITS_FADE_ACTIVE), void>(toggle); }
    static inline auto SetEndOfPartOne() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_END_OF_PART_ONE), void>(); }
    static inline auto SetEveryoneIgnorePlayer(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_EVERYONE_IGNORE_PLAYER), void>(player, toggle); }
    static inline auto SetExitflagForScript(int threadId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_EXITFLAG_FOR_SCRIPT), void>(threadId); }
    static inline auto SetExitflagResponse() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_EXITFLAG_RESPONSE), void>(); }
    static inline auto SetExperienceMultiplier(int multiplier) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_EXPERIENCE_MULTIPLIER), void>(multiplier); }
    static inline auto SetFadeMuteOverride(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_FADE_MUTE_OVERRIDE), void>(a0); }
    static inline auto SetFailPromptButtonAndText(Ped ped, int button, const char* textLabel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_FAIL_PROMPT_BUTTON_AND_TEXT), void>(ped, button, textLabel); }
    static inline auto SetFakeDeatharrest() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_FAKE_DEATHARREST), void>(); }
    static inline auto SetFakeWantedLevel(int wantedLevel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_FAKE_WANTED_LEVEL), void>(wantedLevel); }
    static inline auto SetFollowPedCamZoomLevel(int zoomLevel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_FOLLOW_PED_CAM_ZOOM_LEVEL), void>(zoomLevel); }
    static inline auto SetFollowVehicleCamZoomLevel(int zoomLevel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL), void>(zoomLevel); }
    static inline auto SetFootStepAudioMovement(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_FOOT_STEP_AUDIO_MOVEMENT), void>(ped, toggle); }
    static inline auto SetForcePlayerGore(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_FORCE_PLAYER_GORE), void>(toggle); }
    static inline auto SetForcedAimIntentionDirection(float dirX, float dirY, float dirZ) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_FORCED_AIM_INTENTION_DIRECTION), void>(dirX, dirY, dirZ); }
    static inline auto SetForcedForwardDirection(float dirX, float dirY, float dirZ) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_FORCED_FORWARD_DIRECTION), void>(dirX, dirY, dirZ); }
    static inline auto SetFreebiesInVehicle(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_FREEBIES_IN_VEHICLE), void>(vehicle, toggle); }
    static inline auto SetFreezeHeadingBlend(int a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_FREEZE_HEADING_BLEND), void>(a0); }
    static inline auto SetFreezePedAim(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_FREEZE_PED_AIM), void>(ped, toggle); }
    static inline auto SetFrontendActive(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_FRONTEND_ACTIVE), void>(toggle); }
    static inline auto SetGamePaused(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GAME_PAUSED), void>(toggle); }
    static inline auto SetGamePausesForStreaming(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GAME_PAUSES_FOR_STREAMING), void>(toggle); }
    static inline auto SetGameplayCamRelativeHeading(float a0, float a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GAMEPLAY_CAM_RELATIVE_HEADING), void>(a0, a1, a2); }
    static inline auto SetGameplayCamRelativePitch(float a0, float a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GAMEPLAY_CAM_RELATIVE_PITCH), void>(a0, a1, a2); }
    static inline auto SetGameplayCamShakeAmplitude(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE), void>(a0, a1); }
    static inline auto SetGameplayCoordHint() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GAMEPLAY_COORD_HINT), Any>(); }
    static inline auto SetGameplayHelperCylinderHeight() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GAMEPLAY_HELPER_CYLINDER_HEIGHT), Any>(); }
    static inline auto SetGameplayHelperCylinderRadius() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GAMEPLAY_HELPER_CYLINDER_RADIUS), Any>(); }
    static inline auto SetGameplayHelperVolumeCoord(const char* volumeName, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GAMEPLAY_HELPER_VOLUME_COORD), void>(volumeName, x, y, z); }
    static inline auto SetGameplayHintFov() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GAMEPLAY_HINT_FOV), Any>(); }
    static inline auto SetGameplayHintRelativePitch() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GAMEPLAY_HINT_RELATIVE_PITCH), Any>(); }
    static inline auto SetGameplayObjectHint() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GAMEPLAY_OBJECT_HINT), Any>(); }
    static inline auto SetGameplayPedHint() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GAMEPLAY_PED_HINT), Any>(); }
    static inline auto SetGameplayVehicleHint() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GAMEPLAY_VEHICLE_HINT), Any>(); }
    static inline auto SetGameworldAudioMute(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GAMEWORLD_AUDIO_MUTE), void>(toggle); }
    static inline auto SetGangRelationshipsCanBeChangedByNextCommand(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GANG_RELATIONSHIPS_CAN_BE_CHANGED_BY_NEXT_COMMAND), void>(toggle); }
    static inline auto SetGangVehicle(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GANG_VEHICLE), void>(vehicle, toggle); }
    static inline auto SetGarbageTrucks(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GARBAGE_TRUCKS), void>(toggle); }
    static inline auto SetGenerateBulletShells(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GENERATE_BULLET_SHELLS), void>(toggle); }
    static inline auto SetGlobalInstancePriority(int priority) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GLOBAL_INSTANCE_PRIORITY), void>(priority); }
    static inline auto SetGlobalPhaseOverride(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GLOBAL_PHASE_OVERRIDE), void>(value); }
    static inline auto SetGlobalSuggestedCombatAreaWeight(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GLOBAL_SUGGESTED_COMBAT_AREA_WEIGHT), void>(value); }
    static inline auto SetGrindProgress(int grindId, int progress) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GRIND_PROGRESS), BOOL>(grindId, progress); }
    static inline auto SetGroupFormation(Group group, int formation) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GROUP_FORMATION), void>(group, formation); }
    static inline auto SetGroupFormationMaxMoveSpeed(Group group, int speedIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GROUP_FORMATION_MAX_MOVE_SPEED), void>(group, speedIndex); }
    static inline auto SetGroupFormationSpacing(Group group, float spacing) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GROUP_FORMATION_SPACING), void>(group, spacing); }
    static inline auto SetGroupFormationWalkAlongsideLeaderWhenClose(Group group, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GROUP_FORMATION_WALK_ALONGSIDE_LEADER_WHEN_CLOSE), void>(group, toggle); }
    static inline auto SetGroupGrenadeParams(Group group, int params) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GROUP_GRENADE_PARAMS), void>(group, params); }
    static inline auto SetGroupLastAliveAsLoneWolf(Group group, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GROUP_LAST_ALIVE_AS_LONE_WOLF), void>(group, toggle); }
    static inline auto SetGroupMaxNumAdvancing(Group group, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GROUP_MAX_NUM_ADVANCING), void>(group, value); }
    static inline auto SetGroupMaxNumMoving(Group group, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GROUP_MAX_NUM_MOVING), void>(group, value); }
    static inline auto SetGroupMaxNumsFiring(Group group, int* values) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GROUP_MAX_NUMS_FIRING), void>(group, values); }
    static inline auto SetGroupPedDecisionMaker() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GROUP_PED_DECISION_MAKER), Any>(); }
    static inline auto SetGroupPedDucksWhenAimedAt(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GROUP_PED_DUCKS_WHEN_AIMED_AT), void>(ped, toggle); }
    static inline auto SetGroupRatioFiringAtInvisible(Group group, float ratio) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GROUP_RATIO_FIRING_AT_INVISIBLE), void>(group, ratio); }
    static inline auto SetGroupRatioFiringAtVisible(Group group, float ratio) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GROUP_RATIO_FIRING_AT_VISIBLE), void>(group, ratio); }
    static inline auto SetGroupSeparationRange(Group group, float range) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_GROUP_SEPARATION_RANGE), void>(group, range); }
    static inline auto SetHandycamShake(Cam cam, BOOL a1, BOOL a2, int a3, float a4, float a5, float a6, float a7, float a8, float a9, int a10) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HANDYCAM_SHAKE), void>(cam, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); }
    static inline auto SetHangGliderAirSpeed(Ped ped, float a1, float a2, float a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HANG_GLIDER_AIR_SPEED), void>(ped, a1, a2, a3); }
    static inline auto SetHeadingLimitForAttachedPed(Ped ped, float a1, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HEADING_LIMIT_FOR_ATTACHED_PED), void>(ped, a1, a2); }
    static inline auto SetHeadingOfClosestObjectOfType(float x, float y, float z, float radius, Hash modelHash, float heading, BOOL a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HEADING_OF_CLOSEST_OBJECT_OF_TYPE), void>(x, y, z, radius, modelHash, heading, a6); }
    static inline auto SetHeliAudioMaxOcclusion() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HELI_AUDIO_MAX_OCCLUSION), Any>(); }
    static inline auto SetHeliBladesFullSpeed(Vehicle heli) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HELI_BLADES_FULL_SPEED), void>(heli); }
    static inline auto SetHeliSpeedCheat(Vehicle heli, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HELI_SPEED_CHEAT), void>(heli, toggle); }
    static inline auto SetHelmetKnockOffHealth(Ped ped, float health) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HELMET_KNOCK_OFF_HEALTH), void>(ped, health); }
    static inline auto SetHelpMessageBoxSize() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HELP_MESSAGE_BOX_SIZE), Any>(); }
    static inline auto SetHelperEnabled(const char* iplName, BOOL a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HELPER_ENABLED), void>(iplName, a1, a2); }
    static inline auto SetHelperTrackingMode(int mode) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HELPER_TRACKING_MODE), void>(mode); }
    static inline auto SetHighRagdollLodLimit(int limit) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HIGH_RAGDOLL_LOD_LIMIT), void>(limit); }
    static inline auto SetHighRagdollLodLimitToDefault() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HIGH_RAGDOLL_LOD_LIMIT_TO_DEFAULT), void>(); }
    static inline auto SetHighestArcadeLevelUnlocked(int levelId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HIGHEST_ARCADE_LEVEL_UNLOCKED), void>(levelId); }
    static inline auto SetHighestDifficultyBeat() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HIGHEST_DIFFICULTY_BEAT), void>(); }
    static inline auto SetHolsterVisible(Ped ped, int holsterType, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HOLSTER_VISIBLE), void>(ped, holsterType, toggle); }
    static inline auto SetHudTimer(int a0, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_HUD_TIMER), void>(a0, a1); }
    static inline auto SetIgnoreLowPriorityShockingEvents(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS), void>(player, toggle); }
    static inline auto SetIkAttachTargetObj(Ped ped, Vehicle targetVehicle, const char* boneName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_IK_ATTACH_TARGET_OBJ), void>(ped, targetVehicle, boneName); }
    static inline auto SetIkAttachTargetPed(Ped ped, Ped targetPed, const char* boneName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_IK_ATTACH_TARGET_PED), void>(ped, targetPed, boneName); }
    static inline auto SetIkAttachTargetVeh(Ped ped, Object targetObject, const char* boneName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_IK_ATTACH_TARGET_VEH), void>(ped, targetObject, boneName); }
    static inline auto SetImagefxEnabled(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_IMAGEFX_ENABLED), void>(toggle); }
    static inline auto SetInMpTutorial(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_IN_MP_TUTORIAL), void>(toggle); }
    static inline auto SetInSpectatorMode() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_IN_SPECTATOR_MODE), Any>(); }
    static inline auto SetInfoTimer(const char* a0, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_INFO_TIMER), void>(a0, a1); }
    static inline auto SetInstantFireForced(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_INSTANT_FIRE_FORCED), void>(toggle); }
    static inline auto SetInteractionVolumeBlipParams(int a0, int a1, int a2, float a3, int a4, int a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_INTERACTION_VOLUME_BLIP_PARAMS), void>(a0, a1, a2, a3, a4, a5); }
    static inline auto SetInteractionVolumeStaticVariables(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_INTERACTION_VOLUME_STATIC_VARIABLES), void>(a0, a1, a2); }
    static inline auto SetInteractiontextAvailable(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_INTERACTIONTEXT_AVAILABLE), void>(toggle); }
    static inline auto SetInteractiontextButton(int button) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_INTERACTIONTEXT_BUTTON), void>(button); }
    static inline auto SetInteractiontextButtonVisible(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_INTERACTIONTEXT_BUTTON_VISIBLE), void>(toggle); }
    static inline auto SetInteractiontextPulse(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_INTERACTIONTEXT_PULSE), void>(toggle); }
    static inline auto SetInteractiontextPulsePeriod(float period) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_INTERACTIONTEXT_PULSE_PERIOD), void>(period); }
    static inline auto SetInteractiontextText(const char* text) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_INTERACTIONTEXT_TEXT), void>(text); }
    static inline auto SetInteractiontextVisible(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_INTERACTIONTEXT_VISIBLE), void>(toggle); }
    static inline auto SetInteriorActive(Interior interior, BOOL a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_INTERIOR_ACTIVE), void>(interior, a1, a2); }
    static inline auto SetInteriorForceInstantiation(Interior interior, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_INTERIOR_FORCE_INSTANTIATION), void>(interior, toggle); }
    static inline auto SetIplAlwaysSeesExplosion(const char* iplName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_IPL_ALWAYS_SEES_EXPLOSION), void>(iplName); }
    static inline auto SetKillEffectName(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_KILL_EFFECT_NAME), void>(name); }
    static inline auto SetKillHeight(float height) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_KILL_HEIGHT), void>(height); }
    static inline auto SetLaserColor(int laser, float r, float g, float b, float a) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_LASER_COLOR), void>(laser, r, g, b, a); }
    static inline auto SetLaserSightAttachment(Weapon weapon, Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_LASER_SIGHT_ATTACHMENT), void>(weapon, hash); }
    static inline auto SetLaserSpread(int laser, float spread) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_LASER_SPREAD), void>(laser, spread); }
    static inline auto SetLaserWidth(int laser, float width) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_LASER_WIDTH), void>(laser, width); }
    static inline auto SetLeftTriggerHoldTime(int time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_LEFT_TRIGGER_HOLD_TIME), void>(time); }
    static inline auto SetLevelCompletion(int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_LEVEL_COMPLETION), void>(value); }
    static inline auto SetLmsTutorialComplete() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_LMS_TUTORIAL_COMPLETE), void>(); }
    static inline auto SetLoadCollisionForPedFlag(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_LOAD_COLLISION_FOR_PED_FLAG), void>(ped, toggle); }
    static inline auto SetLoadCollisionForVehicleFlag(Vehicle vehicle, BOOL flag) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_LOAD_COLLISION_FOR_VEHICLE_FLAG), void>(vehicle, flag); }
    static inline auto SetLobbyMuteOverride() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_LOBBY_MUTE_OVERRIDE), Any>(); }
    static inline auto SetLocalExperienceMultiplier(float multiplier) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_LOCAL_EXPERIENCE_MULTIPLIER), void>(multiplier); }
    static inline auto SetLocalPlayerCanUseShootdodge(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_LOCAL_PLAYER_CAN_USE_SHOOTDODGE), void>(toggle); }
    static inline auto SetLockedTarget(Ped ped, Ped targetPed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_LOCKED_TARGET), void>(ped, targetPed); }
    static inline auto SetLockonToFriendlyPlayers(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_LOCKON_TO_FRIENDLY_PLAYERS), void>(player, toggle); }
    static inline auto SetLookInvert(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_LOOK_INVERT), void>(toggle); }
    static inline auto SetMadDrivers(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MAD_DRIVERS), void>(toggle); }
    static inline auto SetMaskActive(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MASK_ACTIVE), void>(toggle); }
    static inline auto SetMaskAttributes(float a0, float a1, float a2, float a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MASK_ATTRIBUTES), void>(a0, a1, a2, a3); }
    static inline auto SetMaxAmmoCap() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MAX_AMMO_CAP), Any>(); }
    static inline auto SetMaxSuppressorDamageLevel(Weapon weapon, int damageLevel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MAX_SUPPRESSOR_DAMAGE_LEVEL), void>(weapon, damageLevel); }
    static inline auto SetMaxWantedLevel(int wantedLevel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MAX_WANTED_LEVEL), void>(wantedLevel); }
    static inline auto SetMediumBoatsPropellorPtfxMaxSpeedEvo(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MEDIUM_BOATS_PROPELLOR_PTFX_MAX_SPEED_EVO), void>(toggle); }
    static inline auto SetMediumBoatsPtfxMaxSpeedEvo(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MEDIUM_BOATS_PTFX_MAX_SPEED_EVO), void>(toggle); }
    static inline auto SetMeleeGrappleFail(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MELEE_GRAPPLE_FAIL), void>(ped); }
    static inline auto SetMeleeGrappleSuccess(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MELEE_GRAPPLE_SUCCESS), void>(ped); }
    static inline auto SetMessagesWaiting(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MESSAGES_WAITING), void>(toggle); }
    static inline auto SetMinigameInProgress(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MINIGAME_IN_PROGRESS), void>(toggle); }
    static inline auto SetMissionFlag(BOOL value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MISSION_FLAG), void>(value); }
    static inline auto SetMissionTrainAsNoLongerNeeded(Vehicle train) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED), void>(train); }
    static inline auto SetMissionTrainCoords(Vehicle train, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MISSION_TRAIN_COORDS), void>(train, x, y, z); }
    static inline auto SetMissionTrainsAsNoLongerNeeded() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MISSION_TRAINS_AS_NO_LONGER_NEEDED), void>(); }
    static inline auto SetModelAsNoLongerNeeded(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MODEL_AS_NO_LONGER_NEEDED), void>(modelHash); }
    static inline auto SetMonitoredStats(Any* a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MONITORED_STATS), void>(a0); }
    static inline auto SetMoverActive(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MOVER_ACTIVE), void>(object, toggle); }
    static inline auto SetMoverSpeed(Object object, float a1, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MOVER_SPEED), void>(object, a1, a2); }
    static inline auto SetMovieFrame(int a0, int frame) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MOVIE_FRAME), void>(a0, frame); }
    static inline auto SetMovieLoop(int a0, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MOVIE_LOOP), void>(a0, toggle); }
    static inline auto SetMovieTime(int a0, float time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MOVIE_TIME), void>(a0, time); }
    static inline auto SetMovieTint(int a0, float a1, float a2, float a3, float a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MOVIE_TINT), void>(a0, a1, a2, a3, a4); }
    static inline auto SetMovieVolume(int a0, float volume) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MOVIE_VOLUME), void>(a0, volume); }
    static inline auto SetMpGameDifficulty(int difficulty) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MP_GAME_DIFFICULTY), void>(difficulty); }
    static inline auto SetMpLastManStandingDownTime(int time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MP_LAST_MAN_STANDING_DOWN_TIME), void>(time); }
    static inline auto SetMpLastManStandingFlags(BOOL a0, BOOL a1, BOOL a2, BOOL a3, int a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MP_LAST_MAN_STANDING_FLAGS), void>(a0, a1, a2, a3, a4); }
    static inline auto SetMpLastManStandingInvincibleTime(int time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MP_LAST_MAN_STANDING_INVINCIBLE_TIME), void>(time); }
    static inline auto SetMpbagOverheadParams(int a0, int a1, int a2, int a3, BOOL a4, BOOL a5, const char* text) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MPBAG_OVERHEAD_PARAMS), void>(a0, a1, a2, a3, a4, a5, text); }
    static inline auto SetMpitemsOverheadIconsEnabled(BOOL a0, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MPITEMS_OVERHEAD_ICONS_ENABLED), void>(a0, a1); }
    static inline auto SetMsgForLoadingScreen(const char* msg) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MSG_FOR_LOADING_SCREEN), void>(msg); }
    static inline auto SetMultiplayerHudCash(int cash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MULTIPLAYER_HUD_CASH), void>(cash); }
    static inline auto SetMultiplayerHudScoreStats(int a0, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MULTIPLAYER_HUD_SCORE_STATS), void>(a0, a1); }
    static inline auto SetMultiplayerHudTime(const char* time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MULTIPLAYER_HUD_TIME), void>(time); }
    static inline auto SetMultipleDrivebyPickups() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_MULTIPLE_DRIVEBY_PICKUPS), Any>(); }
    static inline auto SetNetworkObjectTerritoryEffect(Object object, float a1, float a2, int color) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NETWORK_OBJECT_TERRITORY_EFFECT), void>(object, a1, a2, color); }
    static inline auto SetNetworkSettingsMenu(BOOL a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NETWORK_SETTINGS_MENU), void>(a0); }
    static inline auto SetNewGameReady() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NEW_GAME_READY), void>(); }
    static inline auto SetNextDesiredMoveState(int moveState) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NEXT_DESIRED_MOVE_STATE), void>(moveState); }
    static inline auto SetNextMultiplayerMessageTimeout(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NEXT_MULTIPLAYER_MESSAGE_TIMEOUT), void>(a0, a1); }
    static inline auto SetNextStreamingRequestAPriority() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NEXT_STREAMING_REQUEST_A_PRIORITY), void>(); }
    static inline auto SetNextTickerMessageBackgroundColor() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NEXT_TICKER_MESSAGE_BACKGROUND_COLOR), Any>(); }
    static inline auto SetNightvision(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NIGHTVISION), void>(toggle); }
    static inline auto SetNmMessageBool(int messageId, BOOL value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NM_MESSAGE_BOOL), void>(messageId, value); }
    static inline auto SetNmMessageFloat(int messageId, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NM_MESSAGE_FLOAT), void>(messageId, value); }
    static inline auto SetNmMessageInstanceIndex(int messageId, Ped ped, Vehicle vehicle, Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NM_MESSAGE_INSTANCE_INDEX), void>(messageId, ped, vehicle, object); }
    static inline auto SetNmMessageInt(int messageId, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NM_MESSAGE_INT), void>(messageId, value); }
    static inline auto SetNmMessageString(int messageId, const char* value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NM_MESSAGE_STRING), void>(messageId, value); }
    static inline auto SetNmMessageVec3(int messageId, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NM_MESSAGE_VEC3), void>(messageId, x, y, z); }
    static inline auto SetNoCollisionToPed(Ped ped, Ped ped2, BOOL a2, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NO_COLLISION_TO_PED), void>(ped, ped2, a2, a3); }
    static inline auto SetNoiseoveride(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NOISEOVERIDE), void>(toggle); }
    static inline auto SetNoisinessoveride(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NOISINESSOVERIDE), void>(value); }
    static inline auto SetNumberOfParkedVehicles(int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_NUMBER_OF_PARKED_VEHICLES), void>(value); }
    static inline auto SetObjectAlpha() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_ALPHA), Any>(); }
    static inline auto SetObjectAnchor(Object object, BOOL toggle, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_ANCHOR), void>(object, toggle, a2); }
    static inline auto SetObjectAnimCurrentTime(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_ANIM_CURRENT_TIME), void>(a0, a1, a2, a3); }
    static inline auto SetObjectAnimSpeed(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_ANIM_SPEED), void>(a0, a1, a2, a3); }
    static inline auto SetObjectAsFlippableTable(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_AS_FLIPPABLE_TABLE), void>(object, toggle); }
    static inline auto SetObjectAsNoLongerNeeded(Object* object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_AS_NO_LONGER_NEEDED), void>(object); }
    static inline auto SetObjectAsNonPathObstacle(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_AS_NON_PATH_OBSTACLE), void>(object); }
    static inline auto SetObjectAsPathObstacle(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_AS_PATH_OBSTACLE), void>(object); }
    static inline auto SetObjectAsStealable(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_AS_STEALABLE), void>(object, toggle); }
    static inline auto SetObjectBulletCamPref(Object object, const char* a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_BULLET_CAM_PREF), void>(object, a1); }
    static inline auto SetObjectCanTriggerBulletCam(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_CAN_TRIGGER_BULLET_CAM), void>(object, toggle); }
    static inline auto SetObjectCollideWithNonPlayerCharacter(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_COLLIDE_WITH_NON_PLAYER_CHARACTER), void>(object, toggle); }
    static inline auto SetObjectCollideWithOtherObjects(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_COLLIDE_WITH_OTHER_OBJECTS), void>(object, toggle); }
    static inline auto SetObjectCollision(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_COLLISION), void>(object, toggle); }
    static inline auto SetObjectCoords(Object object, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_COORDS), void>(object, x, y, z); }
    static inline auto SetObjectDynamic(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_DYNAMIC), void>(object, toggle); }
    static inline auto SetObjectHeading(Object object, float heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_HEADING), void>(object, heading); }
    static inline auto SetObjectHealth(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_HEALTH), void>(a0, a1); }
    static inline auto SetObjectInitialVelocity(Object object, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_INITIAL_VELOCITY), void>(object, x, y, z); }
    static inline auto SetObjectInvincible(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_INVINCIBLE), void>(object, toggle); }
    static inline auto SetObjectLights(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_LIGHTS), void>(object, toggle); }
    static inline auto SetObjectOnlyDamagedByPlayer(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_ONLY_DAMAGED_BY_PLAYER), void>(object, toggle); }
    static inline auto SetObjectPhysicsParams(Object object, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_PHYSICS_PARAMS), void>(object, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); }
    static inline auto SetObjectProofs(Object object, BOOL a1, BOOL a2, BOOL a3, BOOL a4, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_PROOFS), void>(object, a1, a2, a3, a4, a5); }
    static inline auto SetObjectQuaternion(Object object, float x, float y, float z, float w) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_QUATERNION), void>(object, x, y, z, w); }
    static inline auto SetObjectRecordsCollisions(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_RECORDS_COLLISIONS), void>(object, toggle); }
    static inline auto SetObjectReflects(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_REFLECTS), void>(object, toggle); }
    static inline auto SetObjectRotation(Object object, float pitch, float roll, float yaw) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_ROTATION), void>(object, pitch, roll, yaw); }
    static inline auto SetObjectSilhouetteColour(Object object, int color) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_SILHOUETTE_COLOUR), void>(object, color); }
    static inline auto SetObjectSilhouetteEnabled(Object object, BOOL a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_SILHOUETTE_ENABLED), void>(object, a1, a2); }
    static inline auto SetObjectTargettable(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_TARGETTABLE), void>(object, toggle); }
    static inline auto SetObjectUseWaterParticles(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_USE_WATER_PARTICLES), void>(object, toggle); }
    static inline auto SetObjectVisible(Object object, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECT_VISIBLE), void>(object, toggle); }
    static inline auto SetObjectsAtCoordNotRemovedByStreaming(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OBJECTS_AT_COORD_NOT_REMOVED_BY_STREAMING), void>(x, y, z); }
    static inline auto SetOneTimeOnlyCommandsToRun() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ONE_TIME_ONLY_COMMANDS_TO_RUN), BOOL>(); }
    static inline auto SetOverheatAmount(float amount) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OVERHEAT_AMOUNT), void>(amount); }
    static inline auto SetOverrideNoSprintingOnPhoneInMultiplayer(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_OVERRIDE_NO_SPRINTING_ON_PHONE_IN_MULTIPLAYER), void>(toggle); }
    static inline auto SetPadShake(int padIndex, int duration, int frequency) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PAD_SHAKE), void>(padIndex, duration, frequency); }
    static inline auto SetParkedVehicleDensityMultiplier(float multiplier) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PARKED_VEHICLE_DENSITY_MULTIPLIER), void>(multiplier); }
    static inline auto SetParticleFxCamInsideVehicle(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PARTICLE_FX_CAM_INSIDE_VEHICLE), void>(toggle); }
    static inline auto SetParticleFxLoopedEvolution(ScrHandle ptfxHandle, const char* propertyName, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PARTICLE_FX_LOOPED_EVOLUTION), void>(ptfxHandle, propertyName, value); }
    static inline auto SetParticleFxLoopedOffsets(ScrHandle ptfxHandle, float a1, float a2, float a3, float a4, float a5, float a6, float a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PARTICLE_FX_LOOPED_OFFSETS), void>(ptfxHandle, a1, a2, a3, a4, a5, a6, a7); }
    static inline auto SetPauseMenuActive(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PAUSE_MENU_ACTIVE), void>(toggle); }
    static inline auto SetPayneBoatPropellorPtfxMaxSpeedEvo(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PAYNE_BOAT_PROPELLOR_PTFX_MAX_SPEED_EVO), void>(toggle); }
    static inline auto SetPayneBoatPtfxCutsceneEffect(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PAYNE_BOAT_PTFX_CUTSCENE_EFFECT), void>(toggle); }
    static inline auto SetPayneBoatPtfxCutscenePropellorEffect(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PAYNE_BOAT_PTFX_CUTSCENE_PROPELLOR_EFFECT), void>(toggle); }
    static inline auto SetPayneBoatPtfxMaxSpeedEvo(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PAYNE_BOAT_PTFX_MAX_SPEED_EVO), void>(toggle); }
    static inline auto SetPayneBoatPtfxSkip(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PAYNE_BOAT_PTFX_SKIP), void>(toggle); }
    static inline auto SetPaynekillerAmt(int amount) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PAYNEKILLER_AMT), void>(amount); }
    static inline auto SetPaynekillerBottleCount() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PAYNEKILLER_BOTTLE_COUNT), Any>(); }
    static inline auto SetPaynekillerHealthBoost(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PAYNEKILLER_HEALTH_BOOST), void>(value); }
    static inline auto SetPaynekillerRechargeRate() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PAYNEKILLER_RECHARGE_RATE), Any>(); }
    static inline auto SetPedAccuracy(Ped ped, int accuracy) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ACCURACY), void>(ped, accuracy); }
    static inline auto SetPedAdvanceDelayOverride() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ADVANCE_DELAY_OVERRIDE), Any>(); }
    static inline auto SetPedAiTemplate(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_AI_TEMPLATE), void>(ped, name); }
    static inline auto SetPedAimLockonable(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_AIM_LOCKONABLE), void>(ped, toggle); }
    static inline auto SetPedAlertness(Ped ped, int alertness) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ALERTNESS), void>(ped, alertness); }
    static inline auto SetPedAllAnimsSpeed(Ped ped, float speed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ALL_ANIMS_SPEED), void>(ped, speed); }
    static inline auto SetPedAllowedToAttackIfSurrendered(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ALLOWED_TO_ATTACK_IF_SURRENDERED), void>(ped, toggle); }
    static inline auto SetPedAllowedToDestroyIfSurrendered(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ALLOWED_TO_DESTROY_IF_SURRENDERED), void>(ped, toggle); }
    static inline auto SetPedAllowedToDuck(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ALLOWED_TO_DUCK), void>(ped, toggle); }
    static inline auto SetPedAllowedToKneelAndFire(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ALLOWED_TO_KNEEL_AND_FIRE), void>(ped, toggle); }
    static inline auto SetPedAllowedToStand(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ALLOWED_TO_STAND), void>(ped, toggle); }
    static inline auto SetPedAllowedToSurrender(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ALLOWED_TO_SURRENDER), void>(ped, toggle); }
    static inline auto SetPedAlpha() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ALPHA), Any>(); }
    static inline auto SetPedAmmo(Ped ped, Hash weaponHash, int ammo) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_AMMO), void>(ped, weaponHash, ammo); }
    static inline auto SetPedAngledDefensiveArea(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float angle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ANGLED_DEFENSIVE_AREA), void>(ped, x1, y1, z1, x2, y2, z2, angle); }
    static inline auto SetPedAnimCurrentTime(Ped ped, const char* animDict, const char* animName, float time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ANIM_CURRENT_TIME), void>(ped, animDict, animName, time); }
    static inline auto SetPedAnimGroup(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ANIM_GROUP), void>(ped, name); }
    static inline auto SetPedAnimSpeed(Ped ped, const char* animDict, const char* animName, float speed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ANIM_SPEED), void>(ped, animDict, animName, speed); }
    static inline auto SetPedAsEnemy(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_AS_ENEMY), void>(ped, toggle); }
    static inline auto SetPedAsGroupLeader(Ped ped, Group group) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_AS_GROUP_LEADER), void>(ped, group); }
    static inline auto SetPedAsGroupMember(Ped ped, Group group) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_AS_GROUP_MEMBER), void>(ped, group); }
    static inline auto SetPedAsMissionPed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_AS_MISSION_PED), void>(ped); }
    static inline auto SetPedAsNoLongerNeeded(Ped* ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_AS_NO_LONGER_NEEDED), void>(ped); }
    static inline auto SetPedAsOneShotKill(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_AS_ONE_SHOT_KILL), void>(ped, toggle); }
    static inline auto SetPedAsPrimaryChar(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_AS_PRIMARY_CHAR), void>(ped, toggle); }
    static inline auto SetPedAutoUpdateEmotionState(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_AUTO_UPDATE_EMOTION_STATE), void>(ped, toggle); }
    static inline auto SetPedBlendFromNmWithAnim() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_BLEND_FROM_NM_WITH_ANIM), Any>(); }
    static inline auto SetPedBlendToCrouchingFromNm(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_BLEND_TO_CROUCHING_FROM_NM), void>(ped, toggle); }
    static inline auto SetPedBloodSmear(Ped ped, int smear) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_BLOOD_SMEAR), void>(ped, smear); }
    static inline auto SetPedBloodsprayEnable(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_BLOODSPRAY_ENABLE), void>(ped, toggle); }
    static inline auto SetPedBossPecentDamaged(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_BOSS_PECENT_DAMAGED), void>(ped, toggle); }
    static inline auto SetPedBulletCameraOnNextHit(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_BULLET_CAMERA_ON_NEXT_HIT), void>(ped); }
    static inline auto SetPedCanAvoidDeathZones(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_AVOID_DEATH_ZONES), void>(ped, toggle); }
    static inline auto SetPedCanBeDamagedByRelationshipGroup(Ped ped, BOOL toggle, int relGroupId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP), void>(ped, toggle, relGroupId); }
    static inline auto SetPedCanBeDraggedOut(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_BE_DRAGGED_OUT), void>(ped, toggle); }
    static inline auto SetPedCanBeKnockedOffBike(Ped ped, int state) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_BE_KNOCKED_OFF_BIKE), void>(ped, state); }
    static inline auto SetPedCanBeMeleed(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_BE_MELEED), void>(ped, toggle); }
    static inline auto SetPedCanBeShotInVehicle(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_BE_SHOT_IN_VEHICLE), void>(ped, toggle); }
    static inline auto SetPedCanBeSnappedToGround(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_BE_SNAPPED_TO_GROUND), void>(ped, toggle); }
    static inline auto SetPedCanBeTargetedWhenInjured(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_BE_TARGETED_WHEN_INJURED), void>(ped, toggle); }
    static inline auto SetPedCanBeTargetedWithoutLos(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_BE_TARGETED_WITHOUT_LOS), void>(ped, toggle); }
    static inline auto SetPedCanBeTargetted(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_BE_TARGETTED), void>(ped, toggle); }
    static inline auto SetPedCanCowerInCover(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_COWER_IN_COVER), void>(ped, toggle); }
    static inline auto SetPedCanEvasiveDive(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_EVASIVE_DIVE), void>(ped, toggle); }
    static inline auto SetPedCanFlyThroughWindscreen(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_FLY_THROUGH_WINDSCREEN), void>(ped, toggle); }
    static inline auto SetPedCanHeadIk(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_HEAD_IK), void>(ped, toggle); }
    static inline auto SetPedCanInitiateBulletCam(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_INITIATE_BULLET_CAM), void>(ped, toggle); }
    static inline auto SetPedCanInteractWithDoors(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_INTERACT_WITH_DOORS), void>(ped, toggle); }
    static inline auto SetPedCanMelee(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_MELEE), void>(ped, toggle); }
    static inline auto SetPedCanMoveWhenInjured(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_MOVE_WHEN_INJURED), void>(ped, toggle); }
    static inline auto SetPedCanPeekInCover(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_PEEK_IN_COVER), void>(ped, toggle); }
    static inline auto SetPedCanPlayAmbientAnims(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_PLAY_AMBIENT_ANIMS), void>(ped, toggle); }
    static inline auto SetPedCanPlayGestureAnims(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_PLAY_GESTURE_ANIMS), void>(ped, toggle); }
    static inline auto SetPedCanPlayLocoFlavorStarts(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_PLAY_LOCO_FLAVOR_STARTS), void>(ped, toggle); }
    static inline auto SetPedCanPlayVisemeAnims(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_PLAY_VISEME_ANIMS), void>(ped, toggle); }
    static inline auto SetPedCanPushPlayer(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_PUSH_PLAYER), void>(ped, toggle); }
    static inline auto SetPedCanPutPlayerIntoLms(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_PUT_PLAYER_INTO_LMS), void>(ped, toggle); }
    static inline auto SetPedCanRagdoll(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_RAGDOLL), void>(ped, toggle); }
    static inline auto SetPedCanRagdollFromPlayerImpact(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT), void>(ped, toggle); }
    static inline auto SetPedCanRemainOnBoatAfterMissionEnds(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_REMAIN_ON_BOAT_AFTER_MISSION_ENDS), void>(ped, toggle); }
    static inline auto SetPedCanSlowDownWhenTurning(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_SLOW_DOWN_WHEN_TURNING), void>(ped, toggle); }
    static inline auto SetPedCanSmashGlass(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_SMASH_GLASS), void>(ped, toggle); }
    static inline auto SetPedCanSwitchWeapon(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_SWITCH_WEAPON), void>(ped, toggle); }
    static inline auto SetPedCanTriggerBulletCam(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_TRIGGER_BULLET_CAM), void>(ped, toggle); }
    static inline auto SetPedCanUseAutoConversationLookat(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT), void>(ped, toggle); }
    static inline auto SetPedChanceToReactToImminentDanger(Ped ped, int chance) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CHANCE_TO_REACT_TO_IMMINENT_DANGER), void>(ped, chance); }
    static inline auto SetPedChanceToShootAtDestructibles(Ped ped, int chance) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CHANCE_TO_SHOOT_AT_DESTRUCTIBLES), void>(ped, chance); }
    static inline auto SetPedChargeDelayOverride() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CHARGE_DELAY_OVERRIDE), Any>(); }
    static inline auto SetPedClearCoverTarget(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CLEAR_COVER_TARGET), void>(ped); }
    static inline auto SetPedClimbAnimRate(Ped ped, float rate) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CLIMB_ANIM_RATE), void>(ped, rate); }
    static inline auto SetPedCollision(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COLLISION), void>(ped, toggle); }
    static inline auto SetPedCombatAbility(Ped ped, int type) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COMBAT_ABILITY), void>(ped, type); }
    static inline auto SetPedCombatAdvanceDelayTime(Ped ped, float a1, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COMBAT_ADVANCE_DELAY_TIME), void>(ped, a1, a2); }
    static inline auto SetPedCombatAttributes(Ped ped, int attributes, BOOL enabled) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COMBAT_ATTRIBUTES), void>(ped, attributes, enabled); }
    static inline auto SetPedCombatMovement(Ped ped, int type) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COMBAT_MOVEMENT), void>(ped, type); }
    static inline auto SetPedCombatRange(Ped ped, int type) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COMBAT_RANGE), void>(ped, type); }
    static inline auto SetPedCombatRangeHalfHeight(Ped ped, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COMBAT_RANGE_HALF_HEIGHT), void>(ped, value); }
    static inline auto SetPedCombatRangeMax(Ped ped, float range) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COMBAT_RANGE_MAX), void>(ped, range); }
    static inline auto SetPedCombatRangeMin(Ped ped, float range) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COMBAT_RANGE_MIN), void>(ped, range); }
    static inline auto SetPedComponentVariation(Ped ped, int componentId, int drawableId, int textureId, int paletteId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COMPONENT_VARIATION), void>(ped, componentId, drawableId, textureId, paletteId); }
    static inline auto SetPedConsumingAmmo(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CONSUMING_AMMO), void>(ped, toggle); }
    static inline auto SetPedCoords(Ped ped, float x, float y, float z, BOOL unk) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COORDS), void>(ped, x, y, z, unk); }
    static inline auto SetPedCoordsNoGang(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COORDS_NO_GANG), void>(ped, x, y, z); }
    static inline auto SetPedCoordsNoOffset(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COORDS_NO_OFFSET), void>(ped, x, y, z); }
    static inline auto SetPedCorpse(Ped ped, BOOL unk) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CORPSE), void>(ped, unk); }
    static inline auto SetPedCorpseFromAnim(Ped ped, const char* dictName, const char* animName, float a3, BOOL a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CORPSE_FROM_ANIM), void>(ped, dictName, animName, a3, a4); }
    static inline auto SetPedCoverRequestBlindfire(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COVER_REQUEST_BLINDFIRE), void>(ped); }
    static inline auto SetPedCoverRequestPeek(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COVER_REQUEST_PEEK), void>(ped); }
    static inline auto SetPedCoverTargetCoord(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COVER_TARGET_COORD), void>(ped, x, y, z); }
    static inline auto SetPedCoverTargetPed(Ped ped, Ped targetPed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COVER_TARGET_PED), void>(ped, targetPed); }
    static inline auto SetPedCoverTargetPedWithBoneAndOffset() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COVER_TARGET_PED_WITH_BONE_AND_OFFSET), Any>(); }
    static inline auto SetPedCoverTargetPedWithOffset() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COVER_TARGET_PED_WITH_OFFSET), Any>(); }
    static inline auto SetPedCoverTargetVehicle(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_COVER_TARGET_VEHICLE), void>(a0, a1, a2, a3, a4, a5); }
    static inline auto SetPedCurrentWeaponVisible(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CURRENT_WEAPON_VISIBLE), void>(ped, toggle); }
    static inline auto SetPedCustomFiringPatternShotsPerBurst(Ped ped, int a1, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CUSTOM_FIRING_PATTERN_SHOTS_PER_BURST), void>(ped, a1, a2); }
    static inline auto SetPedCustomFiringPatternTimeBetweenBursts(Ped ped, float a1, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CUSTOM_FIRING_PATTERN_TIME_BETWEEN_BURSTS), void>(ped, a1, a2); }
    static inline auto SetPedCustomFiringPatternTimeBetweenShots(Ped ped, float a1, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_CUSTOM_FIRING_PATTERN_TIME_BETWEEN_SHOTS), void>(ped, a1, a2); }
    static inline auto SetPedDamagedByTearGas(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DAMAGED_BY_TEAR_GAS), void>(ped, toggle); }
    static inline auto SetPedDecisionMaker() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DECISION_MAKER), Any>(); }
    static inline auto SetPedDecisionMakerToDefault() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DECISION_MAKER_TO_DEFAULT), Any>(); }
    static inline auto SetPedDefaultAimAhead(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DEFAULT_AIM_AHEAD), void>(ped); }
    static inline auto SetPedDefaultAimAtCoord(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DEFAULT_AIM_AT_COORD), void>(ped, x, y, z); }
    static inline auto SetPedDefaultAimAtPed(Ped ped, Ped targetPed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DEFAULT_AIM_AT_PED), void>(ped, targetPed); }
    static inline auto SetPedDefaultComponentVariation(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DEFAULT_COMPONENT_VARIATION), void>(ped); }
    static inline auto SetPedDefensiveAreaAttachedToPed(Ped ped, Ped ped2, float x1, float y1, float z1, float x2, float y2, float z2, float angle, BOOL a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED), void>(ped, ped2, x1, y1, z1, x2, y2, z2, angle, a9); }
    static inline auto SetPedDefensiveAreaDirection(Ped ped, float xDir, float yDir, float zDir) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DEFENSIVE_AREA_DIRECTION), void>(ped, xDir, yDir, zDir); }
    static inline auto SetPedDensityMultiplier(float multiplier) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DENSITY_MULTIPLIER), void>(multiplier); }
    static inline auto SetPedDesiredHeading(Ped ped, float heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DESIRED_HEADING), void>(ped, heading); }
    static inline auto SetPedDiesInSinkingVehicle(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DIES_IN_SINKING_VEHICLE), void>(ped, toggle); }
    static inline auto SetPedDiesInVehicle(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DIES_IN_VEHICLE), void>(ped, toggle); }
    static inline auto SetPedDiesInWater(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DIES_IN_WATER), void>(ped, toggle); }
    static inline auto SetPedDiesInstantlyInWater(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DIES_INSTANTLY_IN_WATER), void>(ped, toggle); }
    static inline auto SetPedDiesWhenInjured(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DIES_WHEN_INJURED), void>(ped, toggle); }
    static inline auto SetPedDontUseVehicleSpecificAnims(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DONT_USE_VEHICLE_SPECIFIC_ANIMS), void>(ped, toggle); }
    static inline auto SetPedDropsObject() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DROPS_OBJECT), Any>(); }
    static inline auto SetPedDropsWeapon(Ped ped, Weapon weapon) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DROPS_WEAPON), Weapon>(ped, weapon); }
    static inline auto SetPedDropsWeaponsWhenDead(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DROPS_WEAPONS_WHEN_DEAD), void>(ped, toggle); }
    static inline auto SetPedDruggedUp(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DRUGGED_UP), void>(ped, toggle); }
    static inline auto SetPedDucking(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_DUCKING), void>(ped, toggle); }
    static inline auto SetPedEdgeCoverBlindfireArcOverride(Ped ped, float a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_EDGE_COVER_BLINDFIRE_ARC_OVERRIDE), void>(ped, a1); }
    static inline auto SetPedEmotionState(Ped ped, int state) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_EMOTION_STATE), void>(ped, state); }
    static inline auto SetPedEnableDistanceInaccuracy(Ped ped, BOOL toggle, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ENABLE_DISTANCE_INACCURACY), void>(ped, toggle, a2); }
    static inline auto SetPedEnableHeadlookController(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ENABLE_HEADLOOK_CONTROLLER), void>(ped, toggle); }
    static inline auto SetPedEnableSpawnInaccuracy(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ENABLE_SPAWN_INACCURACY), void>(ped, toggle); }
    static inline auto SetPedFieldOfView(Ped ped, float a1, float a2, float a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FIELD_OF_VIEW), void>(ped, a1, a2, a3); }
    static inline auto SetPedFireAtCover(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FIRE_AT_COVER), void>(ped, toggle); }
    static inline auto SetPedFlagAggressiveCharger(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLAG_AGGRESSIVE_CHARGER), void>(ped, toggle); }
    static inline auto SetPedFlagAlwaysHideWhenInCover(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLAG_ALWAYS_HIDE_WHEN_IN_COVER), void>(ped, toggle); }
    static inline auto SetPedFlagBlockBlindfireInCover(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLAG_BLOCK_BLINDFIRE_IN_COVER), void>(ped, toggle); }
    static inline auto SetPedFlagBlockGoreReaction(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLAG_BLOCK_GORE_REACTION), void>(ped, toggle); }
    static inline auto SetPedFlagBlockLeanfireInCover(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLAG_BLOCK_LEANFIRE_IN_COVER), void>(ped, toggle); }
    static inline auto SetPedFlagBlockWoundedMovement(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLAG_BLOCK_WOUNDED_MOVEMENT), void>(ped, toggle); }
    static inline auto SetPedFlagCombatLeader(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLAG_COMBAT_LEADER), void>(ped, toggle); }
    static inline auto SetPedFlagFireUntilEmptyInCover(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLAG_FIRE_UNTIL_EMPTY_IN_COVER), void>(ped, toggle); }
    static inline auto SetPedFlagForceBlindfireInCover(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLAG_FORCE_BLINDFIRE_IN_COVER), void>(ped, toggle); }
    static inline auto SetPedFlagForceLeanfireInCover(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLAG_FORCE_LEANFIRE_IN_COVER), void>(ped, toggle); }
    static inline auto SetPedFlagForceThrowProjectileInCover(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLAG_FORCE_THROW_PROJECTILE_IN_COVER), void>(ped, toggle); }
    static inline auto SetPedFlagLockToCover(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLAG_LOCK_TO_COVER), void>(ped, toggle); }
    static inline auto SetPedFlagScriptedProjectileUse(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLAG_SCRIPTED_PROJECTILE_USE), void>(ped, toggle); }
    static inline auto SetPedFlagSnipeMovingTargetsOverride(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLAG_SNIPE_MOVING_TARGETS_OVERRIDE), void>(ped, toggle); }
    static inline auto SetPedFleeAttributes(Ped ped, int attributes, BOOL enabled) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLEE_ATTRIBUTES), void>(ped, attributes, enabled); }
    static inline auto SetPedFleezoneAddBox(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLEEZONE_ADD_BOX), void>(ped, name); }
    static inline auto SetPedFleezoneOption(Ped ped, int option) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLEEZONE_OPTION), void>(ped, option); }
    static inline auto SetPedFleezoneRemoveBox(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FLEEZONE_REMOVE_BOX), void>(ped, name); }
    static inline auto SetPedForceFire(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FORCE_FIRE), void>(ped); }
    static inline auto SetPedForceKneelAndFire(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FORCE_KNEEL_AND_FIRE), void>(ped, toggle); }
    static inline auto SetPedForceStartFiringFromCover(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FORCE_START_FIRING_FROM_COVER), void>(a0); }
    static inline auto SetPedForceStopFiringFromCover(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FORCE_STOP_FIRING_FROM_COVER), void>(a0); }
    static inline auto SetPedForceUseMuzzleDirection() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FORCE_USE_MUZZLE_DIRECTION), Any>(); }
    static inline auto SetPedForceUseRagdoll(Ped ped, BOOL a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FORCE_USE_RAGDOLL), void>(ped, a1, a2); }
    static inline auto SetPedForcedToRun(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FORCED_TO_RUN), void>(ped, toggle); }
    static inline auto SetPedForcedToWalk(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FORCED_TO_WALK), void>(ped, toggle); }
    static inline auto SetPedFreezeOrientation(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FREEZE_ORIENTATION), void>(ped, toggle); }
    static inline auto SetPedFreezeProcessing(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_FREEZE_PROCESSING), void>(ped, toggle); }
    static inline auto SetPedGadget(Ped ped, Hash gadgetHash, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_GADGET), void>(ped, gadgetHash, a2); }
    static inline auto SetPedGeneratesDeadBodyEvents(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_GENERATES_DEAD_BODY_EVENTS), void>(ped, toggle); }
    static inline auto SetPedGestureGroup(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_GESTURE_GROUP), void>(ped, name); }
    static inline auto SetPedGetOutUpsideDownVehicle(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE), void>(ped, toggle); }
    static inline auto SetPedGivePostLmsBreak(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_GIVE_POST_LMS_BREAK), void>(ped, toggle); }
    static inline auto SetPedGlobalKneelingAllowed(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_GLOBAL_KNEELING_ALLOWED), void>(toggle); }
    static inline auto SetPedGlobalPercentDodgeChance(int chance) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_GLOBAL_PERCENT_DODGE_CHANCE), void>(chance); }
    static inline auto SetPedGore(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_GORE), void>(ped, toggle); }
    static inline auto SetPedGoreAsAlly(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_GORE_AS_ALLY), void>(ped); }
    static inline auto SetPedGoreAsDefault(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_GORE_AS_DEFAULT), void>(ped); }
    static inline auto SetPedGoreFromNpc(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_GORE_FROM_NPC), void>(ped, toggle); }
    static inline auto SetPedGoreFromPlayer(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_GORE_FROM_PLAYER), void>(ped, toggle); }
    static inline auto SetPedGravity(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_GRAVITY), void>(ped, toggle); }
    static inline auto SetPedGroupMemberPassengerIndex(Ped ped, int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_GROUP_MEMBER_PASSENGER_INDEX), void>(ped, index); }
    static inline auto SetPedHasSpecialGunSound(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_HAS_SPECIAL_GUN_SOUND), void>(ped, toggle); }
    static inline auto SetPedHeading(Ped ped, float heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_HEADING), void>(ped, heading); }
    static inline auto SetPedHealth(Ped ped, int health, BOOL unk) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_HEALTH), void>(ped, health, unk); }
    static inline auto SetPedHealthAsBoost(Ped ped, int health, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_HEALTH_AS_BOOST), void>(ped, health, a2); }
    static inline auto SetPedHearingRange(Ped ped, float range) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_HEARING_RANGE), void>(ped, range); }
    static inline auto SetPedHeedsTheEveryoneIgnorePlayerFlag(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_HEEDS_THE_EVERYONE_IGNORE_PLAYER_FLAG), void>(ped, toggle); }
    static inline auto SetPedHelmet(Ped ped, BOOL canWearHelmet) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_HELMET), void>(ped, canWearHelmet); }
    static inline auto SetPedIdRange(Ped ped, float range) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ID_RANGE), void>(ped, range); }
    static inline auto SetPedIgnoreLosChecks(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_IGNORE_LOS_CHECKS), void>(ped, toggle); }
    static inline auto SetPedInCutscene(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_IN_CUTSCENE), void>(ped, toggle); }
    static inline auto SetPedIntoVehicle(Ped ped, Vehicle vehicle, int seatIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_INTO_VEHICLE), void>(ped, vehicle, seatIndex); }
    static inline auto SetPedInvincible(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_INVINCIBLE), void>(ped, toggle); }
    static inline auto SetPedIsHumanShield(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_IS_HUMAN_SHIELD), void>(ped, toggle); }
    static inline auto SetPedIsTargetPriority(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_IS_TARGET_PRIORITY), void>(ped, toggle); }
    static inline auto SetPedKeepTask(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_KEEP_TASK), void>(ped, toggle); }
    static inline auto SetPedLegIkMode(Ped ped, int mode) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_LEG_IK_MODE), void>(ped, mode); }
    static inline auto SetPedLodThreshold(Ped ped, float threshold) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_LOD_THRESHOLD), void>(ped, threshold); }
    static inline auto SetPedMaxCoverSearchRadius(Ped ped, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_MAX_COVER_SEARCH_RADIUS), void>(ped, radius); }
    static inline auto SetPedMaxHealth(Ped ped, int health) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_MAX_HEALTH), void>(ped, health); }
    static inline auto SetPedMaxTimeInWater(Ped ped, float time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_MAX_TIME_IN_WATER), void>(ped, time); }
    static inline auto SetPedMaxTimeUnderwater(Ped ped, float time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_MAX_TIME_UNDERWATER), void>(ped, time); }
    static inline auto SetPedMeleeActionFlag0(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_MELEE_ACTION_FLAG0), void>(ped, toggle); }
    static inline auto SetPedMeleeActionFlag1(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_MELEE_ACTION_FLAG1), void>(ped, toggle); }
    static inline auto SetPedMeleeMovementConstraintBox(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_MELEE_MOVEMENT_CONSTRAINT_BOX), void>(ped, x1, y1, z1, x2, y2, z2); }
    static inline auto SetPedMeleeTriggerDistOverride(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_MELEE_TRIGGER_DIST_OVERRIDE), void>(a0, a1); }
    static inline auto SetPedModelIsSuppressed(Hash modelHash, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_MODEL_IS_SUPPRESSED), void>(modelHash, toggle); }
    static inline auto SetPedModelLodDistances(Hash modelHash, float min, float max) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_MODEL_LOD_DISTANCES), void>(modelHash, min, max); }
    static inline auto SetPedMoveAnimsBlendOut(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_MOVE_ANIMS_BLEND_OUT), void>(ped); }
    static inline auto SetPedNameDebug(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_NAME_DEBUG), void>(ped, name); }
    static inline auto SetPedNeverLeavesGroup(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_NEVER_LEAVES_GROUP), void>(ped, toggle); }
    static inline auto SetPedNmAnimPose(Ped ped, const char* clipDictName, const char* animName, float a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_NM_ANIM_POSE), void>(ped, clipDictName, animName, a3); }
    static inline auto SetPedNoRagdollToBulletUnlessDead(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_NO_RAGDOLL_TO_BULLET_UNLESS_DEAD), void>(ped, toggle); }
    static inline auto SetPedNoRagdollToExplosionUnlessDead(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_NO_RAGDOLL_TO_EXPLOSION_UNLESS_DEAD), void>(ped, toggle); }
    static inline auto SetPedNonCreationArea(float x1, float y1, float z1, float x2, float y2, float z2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_NON_CREATION_AREA), void>(x1, y1, z1, x2, y2, z2); }
    static inline auto SetPedNonRemovalArea(float x1, float y1, float z1, float x2, float y2, float z2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_NON_REMOVAL_AREA), void>(x1, y1, z1, x2, y2, z2); }
    static inline auto SetPedNumAdvancersOverride(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_NUM_ADVANCERS_OVERRIDE), void>(a0, a1); }
    static inline auto SetPedNumChargersOverride(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_NUM_CHARGERS_OVERRIDE), void>(a0, a1); }
    static inline auto SetPedObliviousToDanger(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_OBLIVIOUS_TO_DANGER), void>(ped, toggle); }
    static inline auto SetPedOnlyCollideWithRagdollBounds(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ONLY_COLLIDE_WITH_RAGDOLL_BOUNDS), void>(ped, toggle); }
    static inline auto SetPedOnlyDamagedByPlayer(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ONLY_DAMAGED_BY_PLAYER), void>(ped, toggle); }
    static inline auto SetPedOnlyDamagedByRelationshipGroup(Ped ped, BOOL toggle, int relGroupId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP), void>(ped, toggle, relGroupId); }
    static inline auto SetPedOutOfVehicle(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_OUT_OF_VEHICLE), void>(ped); }
    static inline auto SetPedPanicRangeOverride(Ped ped, float range) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PANIC_RANGE_OVERRIDE), void>(ped, range); }
    static inline auto SetPedPathCanAvoidDynamicObjects(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PATH_CAN_AVOID_DYNAMIC_OBJECTS), void>(ped, toggle); }
    static inline auto SetPedPathCanAvoidLineOfFire(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PATH_CAN_AVOID_LINE_OF_FIRE), void>(ped, toggle); }
    static inline auto SetPedPathCanDropFromHeight(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PATH_CAN_DROP_FROM_HEIGHT), void>(ped, toggle); }
    static inline auto SetPedPathCanEnterWater(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PATH_CAN_ENTER_WATER), void>(ped, toggle); }
    static inline auto SetPedPathCanOpenClosedDoors(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PATH_CAN_OPEN_CLOSED_DOORS), void>(ped, toggle); }
    static inline auto SetPedPathCanUseClimbovers(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PATH_CAN_USE_CLIMBOVERS), void>(ped, toggle); }
    static inline auto SetPedPathCanUseLadders(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PATH_CAN_USE_LADDERS), void>(ped, toggle); }
    static inline auto SetPedPathVaultingUsage(Ped ped, int a1, int a2, int a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PATH_VAULTING_USAGE), void>(ped, a1, a2, a3); }
    static inline auto SetPedPathsBackToOriginal(float x1, float y1, float z1, float x2, float y2, float z2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PATHS_BACK_TO_ORIGINAL), void>(x1, y1, z1, x2, y2, z2); }
    static inline auto SetPedPathsInArea(float x1, float y1, float z1, float x2, float y2, float z2, BOOL missionFlag) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PATHS_IN_AREA), void>(x1, y1, z1, x2, y2, z2, missionFlag); }
    static inline auto SetPedPerfectAccuracyOverride(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PERFECT_ACCURACY_OVERRIDE), void>(ped, toggle); }
    static inline auto SetPedPinnedDown(Ped ped, BOOL toggle, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PINNED_DOWN), Any>(ped, toggle, a2); }
    static inline auto SetPedPlaysHeadOnHornAnimWhenDiesInVehicle(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE), void>(ped, toggle); }
    static inline auto SetPedPrimaryLookat(Ped ped, Ped lookat) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PRIMARY_LOOKAT), void>(ped, lookat); }
    static inline auto SetPedProjectileOverrideParameters(Ped ped, BOOL a1, float a2, float a3, BOOL a4, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PROJECTILE_OVERRIDE_PARAMETERS), void>(ped, a1, a2, a3, a4, a5); }
    static inline auto SetPedProofs(Ped ped, BOOL a1, BOOL a2, BOOL a3, BOOL a4, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PROOFS), void>(ped, a1, a2, a3, a4, a5); }
    static inline auto SetPedPropIndex(Ped ped, int componentId, int drawableId, int textureId, int unk) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PROP_INDEX), void>(ped, componentId, drawableId, textureId, unk); }
    static inline auto SetPedPtfxSplashOutSpecialEffect(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_PTFX_SPLASH_OUT_SPECIAL_EFFECT), void>(toggle); }
    static inline auto SetPedRandomComponentVariation(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_RANDOM_COMPONENT_VARIATION), void>(ped); }
    static inline auto SetPedReactToCarCollision(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_REACT_TO_CAR_COLLISION), void>(a0, a1); }
    static inline auto SetPedReadyToBeExecuted(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_READY_TO_BE_EXECUTED), void>(ped, toggle); }
    static inline auto SetPedReadyToBeStunned(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_READY_TO_BE_STUNNED), void>(ped, toggle); }
    static inline auto SetPedRecordingPlaybackSpeed(Ped ped, float speed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_RECORDING_PLAYBACK_SPEED), void>(ped, speed); }
    static inline auto SetPedReducedDamageIk(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_REDUCED_DAMAGE_IK), void>(ped, toggle); }
    static inline auto SetPedRelationship(Ped ped, int relGroupId, int flags) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_RELATIONSHIP), void>(ped, relGroupId, flags); }
    static inline auto SetPedRelationshipGroup(Ped ped, int relGroupIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_RELATIONSHIP_GROUP), void>(ped, relGroupIndex); }
    static inline auto SetPedRequireHeadshotToKill(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_REQUIRE_HEADSHOT_TO_KILL), void>(ped, toggle); }
    static inline auto SetPedResistToObjectCollision(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_RESIST_TO_OBJECT_COLLISION), void>(ped, toggle); }
    static inline auto SetPedRotation(Ped ped, float pitch, float roll, float yaw) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_ROTATION), void>(ped, pitch, roll, yaw); }
    static inline auto SetPedSecondaryLookat(Ped ped, Ped lookat) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SECONDARY_LOOKAT), void>(ped, lookat); }
    static inline auto SetPedSeeingRange(Ped ped, float range, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SEEING_RANGE), void>(ped, range, a2); }
    static inline auto SetPedSenseRange(Ped ped, float range) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SENSE_RANGE), void>(ped, range); }
    static inline auto SetPedShootRate(Ped ped, int shootRate) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SHOOT_RATE), void>(ped, shootRate); }
    static inline auto SetPedShootsAtCoord(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SHOOTS_AT_COORD), void>(ped, x, y, z); }
    static inline auto SetPedSilhouetteColour(Ped ped, int color) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SILHOUETTE_COLOUR), void>(ped, color); }
    static inline auto SetPedSilhouetteEnabled(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SILHOUETTE_ENABLED), void>(ped, toggle); }
    static inline auto SetPedSilhouetteWhenvisibleEnabled(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SILHOUETTE_WHENVISIBLE_ENABLED), void>(ped, toggle); }
    static inline auto SetPedSitIdleAnim(Ped ped, const char* animDict, const char* animName, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SIT_IDLE_ANIM), void>(ped, animDict, animName, a3); }
    static inline auto SetPedSphereDefensiveArea(Ped ped, float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SPHERE_DEFENSIVE_AREA), void>(ped, x, y, z, radius); }
    static inline auto SetPedStandGroundOnPlayerImpact(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_STAND_GROUND_ON_PLAYER_IMPACT), void>(a0, a1); }
    static inline auto SetPedStartSuppressiveFire(Ped ped, float a1, float a2, float a3, float a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_START_SUPPRESSIVE_FIRE), void>(ped, a1, a2, a3, a4); }
    static inline auto SetPedStayInVehicleWhenJacked(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_STAY_IN_VEHICLE_WHEN_JACKED), void>(ped, toggle); }
    static inline auto SetPedStealthAttributes() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_STEALTH_ATTRIBUTES), Any>(); }
    static inline auto SetPedStealthMovement(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_STEALTH_MOVEMENT), void>(ped, toggle); }
    static inline auto SetPedSteersAroundObjects(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_STEERS_AROUND_OBJECTS), void>(ped, toggle); }
    static inline auto SetPedSteersAroundPeds(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_STEERS_AROUND_PEDS), void>(ped, toggle); }
    static inline auto SetPedStopSuppressiveFire(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_STOP_SUPPRESSIVE_FIRE), void>(ped); }
    static inline auto SetPedSuffersCriticalHits(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SUFFERS_CRITICAL_HITS), void>(ped, toggle); }
    static inline auto SetPedSuggestedCombatAreaAddBox(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SUGGESTED_COMBAT_AREA_ADD_BOX), void>(ped, name); }
    static inline auto SetPedSuggestedCombatAreaRemoveBox(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SUGGESTED_COMBAT_AREA_REMOVE_BOX), void>(ped, name); }
    static inline auto SetPedSuggestedCombatAreaStep(Ped ped, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SUGGESTED_COMBAT_AREA_STEP), void>(ped, value); }
    static inline auto SetPedSuggestedCoverPoint(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SUGGESTED_COVER_POINT), void>(a0, a1, a2); }
    static inline auto SetPedSuperlodThreshold(Ped ped, float threshold) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SUPERLOD_THRESHOLD), void>(ped, threshold); }
    static inline auto SetPedSweat(Ped ped, float sweat, float unused) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SWEAT), void>(ped, sweat, unused); }
    static inline auto SetPedSyncPoint(Ped ped, float x, float y, float z, float heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_SYNC_POINT), void>(ped, x, y, z, heading); }
    static inline auto SetPedTetheringAddBox(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_TETHERING_ADD_BOX), void>(ped, name); }
    static inline auto SetPedTetheringOption(Ped ped, int option) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_TETHERING_OPTION), void>(ped, option); }
    static inline auto SetPedTetheringRemoveBox(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_TETHERING_REMOVE_BOX), void>(ped, name); }
    static inline auto SetPedToAnimated(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_TO_ANIMATED), void>(ped, toggle); }
    static inline auto SetPedToInformRespectedFriends(Ped ped, float radius, int maxFriends) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_TO_INFORM_RESPECTED_FRIENDS), void>(ped, radius, maxFriends); }
    static inline auto SetPedToLoadCover(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_TO_LOAD_COVER), void>(ped, toggle); }
    static inline auto SetPedToRagdoll(Ped ped, int time1, int time2, int a3, BOOL a4, BOOL a5, BOOL a6, float a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_TO_RAGDOLL), BOOL>(ped, time1, time2, a3, a4, a5, a6, a7); }
    static inline auto SetPedToRagdollWithExplosion(Ped ped, int time1, int time2, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_TO_RAGDOLL_WITH_EXPLOSION), BOOL>(ped, time1, time2, x, y, z); }
    static inline auto SetPedToRagdollWithFall(Ped ped, int time1, int time2, int ragdollType, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_TO_RAGDOLL_WITH_FALL), BOOL>(ped, time1, time2, ragdollType, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); }
    static inline auto SetPedUsesAnimatedDeath(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_USES_ANIMATED_DEATH), void>(ped, toggle); }
    static inline auto SetPedUsesDeafultAnimGroupWhenFleeing(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_USES_DEAFULT_ANIM_GROUP_WHEN_FLEEING), void>(ped, toggle); }
    static inline auto SetPedUsesDyingAnim(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_USES_DYING_ANIM), void>(ped, toggle); }
    static inline auto SetPedValidateBulletCamHit(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_VALIDATE_BULLET_CAM_HIT), void>(ped, toggle); }
    static inline auto SetPedVelocity(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_VELOCITY), void>(ped, x, y, z); }
    static inline auto SetPedVisible(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_VISIBLE), void>(ped, toggle); }
    static inline auto SetPedVisibleDuringSequence(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_VISIBLE_DURING_SEQUENCE), void>(ped, toggle); }
    static inline auto SetPedVoiceFull(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_VOICE_FULL), void>(ped); }
    static inline auto SetPedWantedByPolice(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_WANTED_BY_POLICE), void>(ped, toggle); }
    static inline auto SetPedWeaponBlockCheck(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_WEAPON_BLOCK_CHECK), void>(ped, toggle); }
    static inline auto SetPedWeaponObstructionCheckDistance(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_WEAPON_OBSTRUCTION_CHECK_DISTANCE), void>(a0, a1); }
    static inline auto SetPedWetness(Ped ped, float wetness, float wetHeight) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_WETNESS), void>(ped, wetness, wetHeight); }
    static inline auto SetPedWillOnlyAttackWantedPlayer(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER), void>(ped, toggle); }
    static inline auto SetPedWithBrainCanBeConvertedToDummyPed(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PED_WITH_BRAIN_CAN_BE_CONVERTED_TO_DUMMY_PED), void>(ped, toggle); }
    static inline auto SetPersistentPedVariation(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PERSISTENT_PED_VARIATION), void>(ped, name); }
    static inline auto SetPersistentPedVariationEnum(Ped ped, Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PERSISTENT_PED_VARIATION_ENUM), void>(ped, hash); }
    static inline auto SetPersistentStreamPedVariation(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PERSISTENT_STREAM_PED_VARIATION), void>(ped, name); }
    static inline auto SetPersistentStreamPedVariationEnum(Ped ped, Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PERSISTENT_STREAM_PED_VARIATION_ENUM), void>(ped, hash); }
    static inline auto SetPetroltankBurnRate(Vehicle vehicle, float rate) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PETROLTANK_BURN_RATE), void>(vehicle, rate); }
    static inline auto SetPhoneHudItem() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PHONE_HUD_ITEM), Any>(); }
    static inline auto SetPickupAmmo(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PICKUP_AMMO), void>(a0, a1); }
    static inline auto SetPickupBlipColour(int color) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PICKUP_BLIP_COLOUR), void>(color); }
    static inline auto SetPickupBlipDisplay(int display) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PICKUP_BLIP_DISPLAY), void>(display); }
    static inline auto SetPickupBlipPriority(int priority) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PICKUP_BLIP_PRIORITY), void>(priority); }
    static inline auto SetPickupBlipScale(float scale) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PICKUP_BLIP_SCALE), void>(scale); }
    static inline auto SetPickupBlipSprite(int sprite) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PICKUP_BLIP_SPRITE), void>(sprite); }
    static inline auto SetPickupLaserSightAttachment() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PICKUP_LASER_SIGHT_ATTACHMENT), Any>(); }
    static inline auto SetPickupLimitAngle() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PICKUP_LIMIT_ANGLE), Any>(); }
    static inline auto SetPickupRemovalTimes(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PICKUP_REMOVAL_TIMES), void>(a0, a1); }
    static inline auto SetPickupWeaponDataFromWeapon(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PICKUP_WEAPON_DATA_FROM_WEAPON), void>(a0, a1); }
    static inline auto SetPlacementCanBeCollected(int index, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLACEMENT_CAN_BE_COLLECTED), void>(index, toggle); }
    static inline auto SetPlaybackSpeed(Vehicle vehicle, float speed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYBACK_SPEED), void>(vehicle, speed); }
    static inline auto SetPlaybackToUseAi(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYBACK_TO_USE_AI), void>(vehicle); }
    static inline auto SetPlaybackToUseAiTryToRevertBackLater(Vehicle vehicle, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER), void>(vehicle, a1); }
    static inline auto SetPlayerAltHealth(float health) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_ALT_HEALTH), void>(health); }
    static inline auto SetPlayerAltMaxHealth(float health) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_ALT_MAX_HEALTH), void>(health); }
    static inline auto SetPlayerCachedCameraOrientation(float orientation) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_CACHED_CAMERA_ORIENTATION), void>(orientation); }
    static inline auto SetPlayerCanActivateBulletTime(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_CAN_ACTIVATE_BULLET_TIME), void>(player, toggle); }
    static inline auto SetPlayerCanBeHassledByGangs(Player player, Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_CAN_BE_HASSLED_BY_GANGS), void>(player, object); }
    static inline auto SetPlayerCanBePinnedInCover(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_CAN_BE_PINNED_IN_COVER), void>(player, toggle); }
    static inline auto SetPlayerCanCancelShootdodge(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_CAN_CANCEL_SHOOTDODGE), void>(toggle); }
    static inline auto SetPlayerCanCarryNonMissionObjects(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_CAN_CARRY_NON_MISSION_OBJECTS), void>(player); }
    static inline auto SetPlayerCanDoDriveBy(Player player, Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_CAN_DO_DRIVE_BY), void>(player, object); }
    static inline auto SetPlayerCanUseCover(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_CAN_USE_COVER), void>(player, toggle); }
    static inline auto SetPlayerCanUseFreeformStrike(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_CAN_USE_FREEFORM_STRIKE), void>(toggle); }
    static inline auto SetPlayerCanUseShootdodge(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_CAN_USE_SHOOTDODGE), void>(player, toggle); }
    static inline auto SetPlayerColour(Player player, int color) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_COLOUR), void>(player, color); }
    static inline auto SetPlayerCombatTimerMode(int mode) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_COMBAT_TIMER_MODE), void>(mode); }
    static inline auto SetPlayerControl(Player player, BOOL toggle, int flags) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_CONTROL), void>(player, toggle, flags); }
    static inline auto SetPlayerControlForNetwork(Player player, BOOL toggle, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_CONTROL_FOR_NETWORK), void>(player, toggle, a2); }
    static inline auto SetPlayerControlOnInMissionCleanup(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_CONTROL_ON_IN_MISSION_CLEANUP), void>(toggle); }
    static inline auto SetPlayerForcePainKiller(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_FORCE_PAIN_KILLER), void>(toggle); }
    static inline auto SetPlayerForcedAim(ScrHandle playerOrPed, BOOL a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_FORCED_AIM), void>(playerOrPed, a1, a2); }
    static inline auto SetPlayerForcedAimMaintainDirection(ScrHandle playerOrPed, BOOL a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_FORCED_AIM_MAINTAIN_DIRECTION), void>(playerOrPed, a1, a2); }
    static inline auto SetPlayerGlobalCombatTimerState(BOOL state) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_GLOBAL_COMBAT_TIMER_STATE), void>(state); }
    static inline auto SetPlayerHealthRegeneration(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_HEALTH_REGENERATION), void>(toggle); }
    static inline auto SetPlayerHealthRegenerationMax(int maxValue) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_HEALTH_REGENERATION_MAX), void>(maxValue); }
    static inline auto SetPlayerHealthRegenerationRate(int mpRate, int spRate) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_HEALTH_REGENERATION_RATE), void>(mpRate, spRate); }
    static inline auto SetPlayerIconColour(int color) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_ICON_COLOUR), void>(color); }
    static inline auto SetPlayerInBeckerBossFight(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_IN_BECKER_BOSS_FIGHT), void>(player, toggle); }
    static inline auto SetPlayerInfinteStamina(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_INFINTE_STAMINA), void>(player, toggle); }
    static inline auto SetPlayerInvincible(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_INVINCIBLE), void>(player, toggle); }
    static inline auto SetPlayerKeepsWeaponsWhenRespawned(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_KEEPS_WEAPONS_WHEN_RESPAWNED), void>(player); }
    static inline auto SetPlayerLockedInCover(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_LOCKED_IN_COVER), void>(player, toggle); }
    static inline auto SetPlayerLockon(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_LOCKON), void>(player, toggle); }
    static inline auto SetPlayerMayOnlyEnterThisVehicle(Player player, Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE), void>(player, vehicle); }
    static inline auto SetPlayerModel(Player player, Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_MODEL), void>(player, modelHash); }
    static inline auto SetPlayerMoodNormal(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_MOOD_NORMAL), void>(player); }
    static inline auto SetPlayerMoodPissedOff(Player player, int seconds) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_MOOD_PISSED_OFF), void>(player, seconds); }
    static inline auto SetPlayerOxygen(Player player, int oxygen) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_OXYGEN), void>(player, oxygen); }
    static inline auto SetPlayerPlayerTargetting(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_PLAYER_TARGETTING), void>(toggle); }
    static inline auto SetPlayerPoints(int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_POINTS), void>(value); }
    static inline auto SetPlayerSafeForCutscene(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_SAFE_FOR_CUTSCENE), void>(player); }
    static inline auto SetPlayerShootdodgeGetUpState(int state) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_SHOOTDODGE_GET_UP_STATE), void>(state); }
    static inline auto SetPlayerSprint(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_SPRINT), void>(player, toggle); }
    static inline auto SetPlayerSprintSp(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_SPRINT_SP), void>(player, toggle); }
    static inline auto SetPlayerTeam(Player player, int team) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_TEAM), void>(player, team); }
    static inline auto SetPlayerThreatReaction(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_THREAT_REACTION), void>(ped, toggle); }
    static inline auto SetPlayerUsingCover(Player player, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_USING_COVER), void>(player, toggle); }
    static inline auto SetPlayerWantedLevel(Player player, int wantedLevel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_WANTED_LEVEL), void>(player, wantedLevel); }
    static inline auto SetPlayerWantedLevelNoDrop(Player player, int wantedLevel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_WANTED_LEVEL_NO_DROP), void>(player, wantedLevel); }
    static inline auto SetPlayerWantedLevelNow(Player player) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYER_WANTED_LEVEL_NOW), void>(player); }
    static inline auto SetPlayerpadShakesWhenControllerDisabled(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED), void>(toggle); }
    static inline auto SetPlayersDropMoneyInNetworkGame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PLAYERS_DROP_MONEY_IN_NETWORK_GAME), Any>(); }
    static inline auto SetPoliceFocusWillTrackVehicle(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_POLICE_FOCUS_WILL_TRACK_VEHICLE), void>(vehicle, toggle); }
    static inline auto SetPoliceIgnorePlayer(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_POLICE_IGNORE_PLAYER), void>(toggle); }
    static inline auto SetPoliceRadarBlips(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_POLICE_RADAR_BLIPS), void>(toggle); }
    static inline auto SetPortalTrackDeathCamera(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PORTAL_TRACK_DEATH_CAMERA), void>(toggle); }
    static inline auto SetPostLmsDamageToPlayerOverrides(int a0, float a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_POST_LMS_DAMAGE_TO_PLAYER_OVERRIDES), void>(a0, a1); }
    static inline auto SetPreCutsceneObjectNoLongerNeeded(Object* object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PRE_CUTSCENE_OBJECT_NO_LONGER_NEEDED), void>(object); }
    static inline auto SetPreCutscenePedNoLongerNeeded(Ped* ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PRE_CUTSCENE_PED_NO_LONGER_NEEDED), void>(ped); }
    static inline auto SetPreCutsceneVehicleNoLongerNeeded(Vehicle* vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PRE_CUTSCENE_VEHICLE_NO_LONGER_NEEDED), void>(vehicle); }
    static inline auto SetPreCutsceneWeaponNoLongerNeeded(Weapon* weapon) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PRE_CUTSCENE_WEAPON_NO_LONGER_NEEDED), void>(weapon); }
    static inline auto SetPresetText(const char* presetName, int a1, int a2, const char* a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PRESET_TEXT), BOOL>(presetName, a1, a2, a3); }
    static inline auto SetPresetTextTiming(const char* presetName, int a1, int a2, int a3, float a4, int a5, float a6, int a7, float a8, int a9, float a10, int a11, float a12, int a13, float a14) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PRESET_TEXT_TIMING), BOOL>(presetName, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); }
    static inline auto SetPresetTextvideo(const char* presetName, int a1, int a2, const char* a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PRESET_TEXTVIDEO), BOOL>(presetName, a1, a2, a3); }
    static inline auto SetProfileSetting(Hash hash, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PROFILE_SETTING), BOOL>(hash, value); }
    static inline auto SetProgressBarColours(int color1, int color2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PROGRESS_BAR_COLOURS), void>(color1, color2); }
    static inline auto SetProgressBarFlash(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PROGRESS_BAR_FLASH), void>(toggle); }
    static inline auto SetProgressBarName(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PROGRESS_BAR_NAME), void>(name); }
    static inline auto SetProgressBarPercent(float percent) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PROGRESS_BAR_PERCENT), void>(percent); }
    static inline auto SetProgressBarPosition(float x, float y) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PROGRESS_BAR_POSITION), void>(x, y); }
    static inline auto SetProgressBarStartFlashPercent(float percent) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PROGRESS_BAR_START_FLASH_PERCENT), void>(percent); }
    static inline auto SetProgressBarVisible(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PROGRESS_BAR_VISIBLE), void>(toggle); }
    static inline auto SetProjectileThrowUseDampingCompensation(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PROJECTILE_THROW_USE_DAMPING_COMPENSATION), void>(toggle); }
    static inline auto SetPuddles(float a0, float a1, float a2, float a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_PUDDLES), void>(a0, a1, a2, a3); }
    static inline auto SetRadarAsInteriorThisFrame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RADAR_AS_INTERIOR_THIS_FRAME), void>(); }
    static inline auto SetRadarZoom(int zoomLevel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RADAR_ZOOM), void>(zoomLevel); }
    static inline auto SetRailRelativeDir(int index, float dir) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RAIL_RELATIVE_DIR), void>(index, dir); }
    static inline auto SetRandomBoats(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RANDOM_BOATS), void>(toggle); }
    static inline auto SetRandomSeed(int seed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RANDOM_SEED), void>(seed); }
    static inline auto SetRandomTrains(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RANDOM_TRAINS), void>(toggle); }
    static inline auto SetRandomVehicleDensityMultiplier(float multiplier) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER), void>(multiplier); }
    static inline auto SetRandomWeatherType() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RANDOM_WEATHER_TYPE), void>(); }
    static inline auto SetReducePedModelBudget(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_REDUCE_PED_MODEL_BUDGET), void>(toggle); }
    static inline auto SetReduceVehicleModelBudget(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_REDUCE_VEHICLE_MODEL_BUDGET), void>(toggle); }
    static inline auto SetRelationshipBetweenRelGroups(int relGroupId1, int relGroupId2, int flags) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RELATIONSHIP_BETWEEN_REL_GROUPS), void>(relGroupId1, relGroupId2, flags); }
    static inline auto SetRenderTrainAsDerailed(Vehicle train, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RENDER_TRAIN_AS_DERAILED), void>(train, toggle); }
    static inline auto SetRichPresence(Any* a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RICH_PRESENCE), void>(a0); }
    static inline auto SetRightTriggerHoldTime(int time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RIGHT_TRIGGER_HOLD_TIME), void>(time); }
    static inline auto SetRingiconObject(Object object, Any* ringicon) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RINGICON_OBJECT), void>(object, ringicon); }
    static inline auto SetRingiconObjectPercent(Object object, float percent) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RINGICON_OBJECT_PERCENT), void>(object, percent); }
    static inline auto SetRingiconPlayer(Player player, Any* ringicon) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RINGICON_PLAYER), void>(player, ringicon); }
    static inline auto SetRingiconPlayerPercent(Player player, float percent) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RINGICON_PLAYER_PERCENT), void>(player, percent); }
    static inline auto SetRingiconWorld(float x, float y, float z, Any* ringicon) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RINGICON_WORLD), void>(x, y, z, ringicon); }
    static inline auto SetRingiconWorldPercent(float x, float y, float z, float percent) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_RINGICON_WORLD_PERCENT), void>(x, y, z, percent); }
    static inline auto SetRoadsBackToOriginal(float x1, float y1, float z1, float x2, float y2, float z2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ROADS_BACK_TO_ORIGINAL), void>(x1, y1, z1, x2, y2, z2); }
    static inline auto SetRoadsInArea(float x1, float y1, float z1, float x2, float y2, float z2, BOOL missionFlag) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ROADS_IN_AREA), void>(x1, y1, z1, x2, y2, z2, missionFlag); }
    static inline auto SetRocketLauncherFreebieInHeli() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ROCKET_LAUNCHER_FREEBIE_IN_HELI), Any>(); }
    static inline auto SetRoomForObjectsInIpl(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ROOM_FOR_OBJECTS_IN_IPL), void>(a0, a1, a2); }
    static inline auto SetRoomForPedByKey(Ped ped, Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ROOM_FOR_PED_BY_KEY), void>(ped, hash); }
    static inline auto SetRoomForPedByName(Ped ped, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ROOM_FOR_PED_BY_NAME), void>(ped, name); }
    static inline auto SetRoomForVehicleByKey(Vehicle vehicle, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ROOM_FOR_VEHICLE_BY_KEY), void>(vehicle, name); }
    static inline auto SetRoomForVehicleByName(Vehicle vehicle, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ROOM_FOR_VEHICLE_BY_NAME), void>(vehicle, name); }
    static inline auto SetRouteFlashes() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ROUTE_FLASHES), Any>(); }
    static inline auto SetSafeToKillPlayer(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SAFE_TO_KILL_PLAYER), void>(toggle); }
    static inline auto SetScenarioPedDensityMultiplier(float a0, float a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SCENARIO_PED_DENSITY_MULTIPLIER), void>(a0, a1); }
    static inline auto SetScenarioPedsSpawnInSphereArea(float x, float y, float z, float radius, int a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA), void>(x, y, z, radius, a4); }
    static inline auto SetScenarioPedsToBeReturnedByNextCommand(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND), void>(toggle); }
    static inline auto SetSceneStreaming(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SCENE_STREAMING), void>(toggle); }
    static inline auto SetScriptAsNoLongerNeeded(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SCRIPT_AS_NO_LONGER_NEEDED), void>(name); }
    static inline auto SetScriptControlResetOnPlayerDeath(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SCRIPT_CONTROL_RESET_ON_PLAYER_DEATH), void>(toggle); }
    static inline auto SetScriptRendertargetSizeId(int a0, int a1, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SCRIPT_RENDERTARGET_SIZE_ID), void>(a0, a1, a2); }
    static inline auto SetScriptShouldBeSaved() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SCRIPT_SHOULD_BE_SAVED), void>(); }
    static inline auto SetScriptVehicleGenerator(int scriptVehicleGenerator, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SCRIPT_VEHICLE_GENERATOR), void>(scriptVehicleGenerator, a1); }
    static inline auto SetScriptedAnimSeatOffset(Ped ped, float offset) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SCRIPTED_ANIM_SEAT_OFFSET), void>(ped, offset); }
    static inline auto SetScriptedConversionCoord(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SCRIPTED_CONVERSION_COORD), void>(x, y, z); }
    static inline auto SetSeamlessCutsceneCoords(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SEAMLESS_CUTSCENE_COORDS), void>(x, y, z); }
    static inline auto SetSeamlessCutsceneTriggerArea(float x1, float y1, float z1, float x2, float y2, float z2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SEAMLESS_CUTSCENE_TRIGGER_AREA), void>(x1, y1, z1, x2, y2, z2); }
    static inline auto SetSecondaryLifeBackgroundColor(int color) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SECONDARY_LIFE_BACKGROUND_COLOR), void>(color); }
    static inline auto SetSecondaryLifeBackgroundColor32(int r, int g, int b) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SECONDARY_LIFE_BACKGROUND_COLOR32), void>(r, g, b); }
    static inline auto SetSecondaryLifeBarAlpha(int alpha) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SECONDARY_LIFE_BAR_ALPHA), void>(alpha); }
    static inline auto SetSecondaryLifeBarColor(int color) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SECONDARY_LIFE_BAR_COLOR), void>(color); }
    static inline auto SetSecondaryLifeBarColor32(int r, int g, int b) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SECONDARY_LIFE_BAR_COLOR32), void>(r, g, b); }
    static inline auto SetSecondaryLifeBarName(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SECONDARY_LIFE_BAR_NAME), void>(name); }
    static inline auto SetSecondaryLifeBarPercent(float percent) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SECONDARY_LIFE_BAR_PERCENT), void>(percent); }
    static inline auto SetSecondaryLifeBarStartFlashPercent(float percent) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SECONDARY_LIFE_BAR_START_FLASH_PERCENT), void>(percent); }
    static inline auto SetSecondaryLifeIcon(const char* iconName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SECONDARY_LIFE_ICON), void>(iconName); }
    static inline auto SetSecondaryLifeIconColor(int color) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SECONDARY_LIFE_ICON_COLOR), void>(color); }
    static inline auto SetSecondaryLifeIconColor32(int r, int g, int b) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SECONDARY_LIFE_ICON_COLOR32), void>(r, g, b); }
    static inline auto SetSecondaryLifeScale(float a0, float a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SECONDARY_LIFE_SCALE), void>(a0, a1); }
    static inline auto SetSecondaryLifeTextColor(int color) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SECONDARY_LIFE_TEXT_COLOR), void>(color); }
    static inline auto SetSecondaryLifeTextColor32(int r, int g, int b) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SECONDARY_LIFE_TEXT_COLOR32), void>(r, g, b); }
    static inline auto SetSequenceToRepeat(ScrHandle taskSequence, BOOL repeat) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SEQUENCE_TO_REPEAT), void>(taskSequence, repeat); }
    static inline auto SetShellLodDistEntity(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SHELL_LOD_DIST_ENTITY), void>(value); }
    static inline auto SetShellLodDistMeshfx(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SHELL_LOD_DIST_MESHFX), void>(value); }
    static inline auto SetSilhouetteActive(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SILHOUETTE_ACTIVE), void>(toggle); }
    static inline auto SetSilhouetteDistanceFalloff(float minDistance, float maxDistance) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SILHOUETTE_DISTANCE_FALLOFF), void>(minDistance, maxDistance); }
    static inline auto SetSilhouetteRenderSettings(float intensity, Any unused) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SILHOUETTE_RENDER_SETTINGS), void>(intensity, unused); }
    static inline auto SetSinglePlayerTitleScreenEntryHandled() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SINGLE_PLAYER_TITLE_SCREEN_ENTRY_HANDLED), void>(); }
    static inline auto SetSirenWithNoDriver(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SIREN_WITH_NO_DRIVER), void>(vehicle, toggle); }
    static inline auto SetSleepModeActive(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SLEEP_MODE_ACTIVE), void>(toggle); }
    static inline auto SetSmallBoatPtfxCutsceneEffect(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SMALL_BOAT_PTFX_CUTSCENE_EFFECT), void>(toggle); }
    static inline auto SetSmallBoatPtfxCutscenePropellorEffect(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SMALL_BOAT_PTFX_CUTSCENE_PROPELLOR_EFFECT), void>(toggle); }
    static inline auto SetSmallBoatsPropellorPtfxMaxSpeedEvo(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SMALL_BOATS_PROPELLOR_PTFX_MAX_SPEED_EVO), void>(toggle); }
    static inline auto SetSmallBoatsPtfxMaxSpeedEvo(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SMALL_BOATS_PTFX_MAX_SPEED_EVO), void>(toggle); }
    static inline auto SetSniperHudAlpha(int alpha) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SNIPER_HUD_ALPHA), void>(alpha); }
    static inline auto SetSpecialMpitemBlipParams(int a0, int a1, int a2, float a3, int a4, int a5, int a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SPECIAL_MPITEM_BLIP_PARAMS), void>(a0, a1, a2, a3, a4, a5, a6); }
    static inline auto SetSpritesDrawBeforeFade(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SPRITES_DRAW_BEFORE_FADE), void>(toggle); }
    static inline auto SetStateOfClosestDoorOfType(Hash modelHash, float x, float y, float z, BOOL locked, float heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_STATE_OF_CLOSEST_DOOR_OF_TYPE), void>(modelHash, x, y, z, locked, heading); }
    static inline auto SetStaticEmitterVolume(const char* emitterName, float volume) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_STATIC_EMITTER_VOLUME), void>(emitterName, volume); }
    static inline auto SetStreamPedComponentVariation(Ped ped, int componentId, int drawableId, int textureId, int paletteId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_STREAM_PED_COMPONENT_VARIATION), void>(ped, componentId, drawableId, textureId, paletteId); }
    static inline auto SetStreamPedCustomisationData(Ped ped, Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_STREAM_PED_CUSTOMISATION_DATA), void>(ped, hash); }
    static inline auto SetStreamedTextureDictAsNoLongerNeeded(const char* dictName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED), void>(dictName); }
    static inline auto SetStreaming(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_STREAMING), void>(toggle); }
    static inline auto SetStreamingPointOfInterest(float a0, float a1, float a2, BOOL a3, float a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_STREAMING_POINT_OF_INTEREST), void>(a0, a1, a2, a3, a4); }
    static inline auto SetSuppressorDamageLevel(Weapon weapon, int damageLevel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SUPPRESSOR_DAMAGE_LEVEL), void>(weapon, damageLevel); }
    static inline auto SetSweatEnabled(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SWEAT_ENABLED), void>(toggle); }
    static inline auto SetSyncWeatherAndGameTime(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_SYNC_WEATHER_AND_GAME_TIME), void>(toggle); }
    static inline auto SetTaxiLights(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TAXI_LIGHTS), void>(vehicle, toggle); }
    static inline auto SetTearGasEffectAutoEnd(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEAR_GAS_EFFECT_AUTO_END), void>(toggle); }
    static inline auto SetTerritoryBlipScale(Blip blip, float a1, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TERRITORY_BLIP_SCALE), void>(blip, a1, a2); }
    static inline auto SetTextBackground(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_BACKGROUND), void>(toggle); }
    static inline auto SetTextCentre(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_CENTRE), void>(toggle); }
    static inline auto SetTextColour(int r, int g, int b, int a) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_COLOUR), void>(r, g, b, a); }
    static inline auto SetTextDrawBeforeFade(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_DRAW_BEFORE_FADE), void>(toggle); }
    static inline auto SetTextDropshadow(int distance, int r, int g, int b, int a) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_DROPSHADOW), void>(distance, r, g, b, a); }
    static inline auto SetTextEdge(int a0, int r, int g, int b, int a) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_EDGE), void>(a0, r, g, b, a); }
    static inline auto SetTextFont(int font) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_FONT), void>(font); }
    static inline auto SetTextJustify(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_JUSTIFY), void>(toggle); }
    static inline auto SetTextLineDisplay() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_LINE_DISPLAY), Any>(); }
    static inline auto SetTextLineHeightMult(float mult) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_LINE_HEIGHT_MULT), void>(mult); }
    static inline auto SetTextProportional(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_PROPORTIONAL), void>(toggle); }
    static inline auto SetTextRenderId(int renderId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_RENDER_ID), void>(renderId); }
    static inline auto SetTextRightJustify(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_RIGHT_JUSTIFY), void>(toggle); }
    static inline auto SetTextScale(float a0, float a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_SCALE), void>(a0, a1); }
    static inline auto SetTextToUseTextFileColours(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_TO_USE_TEXT_FILE_COLOURS), void>(toggle); }
    static inline auto SetTextUseUnderscore(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_USE_UNDERSCORE), void>(toggle); }
    static inline auto SetTextWrap(float start, float end) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TEXT_WRAP), void>(start, end); }
    static inline auto SetThisMachineRunningServerScript(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_THIS_MACHINE_RUNNING_SERVER_SCRIPT), void>(toggle); }
    static inline auto SetThisScriptCanBePaused(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_THIS_SCRIPT_CAN_BE_PAUSED), void>(toggle); }
    static inline auto SetThisScriptCanRemoveBlipsCreatedByAnyScript(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT), void>(toggle); }
    static inline auto SetTimeCycleModifiersEnabled(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TIME_CYCLE_MODIFIERS_ENABLED), void>(toggle); }
    static inline auto SetTimeOfDay(int hour, int minute) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TIME_OF_DAY), void>(hour, minute); }
    static inline auto SetTimeOneDayBack() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TIME_ONE_DAY_BACK), void>(); }
    static inline auto SetTimeOneDayForward() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TIME_ONE_DAY_FORWARD), void>(); }
    static inline auto SetTimeScale(float scale) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TIME_SCALE), void>(scale); }
    static inline auto SetTimecycleModifier(const char* modifierName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TIMECYCLE_MODIFIER), void>(modifierName); }
    static inline auto SetTimecycleModifierOverride(const char* a0, const char* a1, float a2, float a3, int a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TIMECYCLE_MODIFIER_OVERRIDE), void>(a0, a1, a2, a3, a4); }
    static inline auto SetTimewarpFireScale(Ped ped, float scale) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TIMEWARP_FIRE_SCALE), void>(ped, scale); }
    static inline auto SetToxicityLevelTime(float a0, float a1, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TOXICITY_LEVEL_TIME), void>(a0, a1, a2); }
    static inline auto SetTrafficSystem(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TRAFFIC_SYSTEM), void>(toggle); }
    static inline auto SetTrainAudioRolloff() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TRAIN_AUDIO_ROLLOFF), Any>(); }
    static inline auto SetTrainCruiseSpeed(Vehicle train, float speed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TRAIN_CRUISE_SPEED), void>(train, speed); }
    static inline auto SetTrainForcedToSlowDown(Vehicle train, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TRAIN_FORCED_TO_SLOW_DOWN), void>(train, toggle); }
    static inline auto SetTrainIsStoppedAtStation(Vehicle train) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TRAIN_IS_STOPPED_AT_STATION), void>(train); }
    static inline auto SetTrainLeavesStation(Vehicle train) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TRAIN_LEAVES_STATION), void>(train); }
    static inline auto SetTrainShake(Vehicle train, float a1, float a2, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TRAIN_SHAKE), void>(train, a1, a2, a3); }
    static inline auto SetTrainSpeed(Vehicle train, float speed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TRAIN_SPEED), void>(train, speed); }
    static inline auto SetTrainStopsForStations(Vehicle train, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TRAIN_STOPS_FOR_STATIONS), void>(train, toggle); }
    static inline auto SetTransitionMovieSkippable(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TRANSITION_MOVIE_SKIPPABLE), void>(toggle); }
    static inline auto SetTutorialComplete() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_TUTORIAL_COMPLETE), void>(); }
    static inline auto SetUseAnimatedVelocity(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_USE_ANIMATED_VELOCITY), void>(ped, toggle); }
    static inline auto SetUseWeaponBound(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_USE_WEAPON_BOUND), void>(ped, toggle); }
    static inline auto SetUsesCollisionOfClosestObjectOfType(float x, float y, float z, float radius, Hash modelHash, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_USES_COLLISION_OF_CLOSEST_OBJECT_OF_TYPE), void>(x, y, z, radius, modelHash, toggle); }
    static inline auto SetUsingAltHealth(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_USING_ALT_HEALTH), void>(toggle); }
    static inline auto SetVariableOnSound(int soundId, const char* variableName, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VARIABLE_ON_SOUND), void>(soundId, variableName, value); }
    static inline auto SetVehicleAlarm(Vehicle vehicle, BOOL state) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_ALARM), void>(vehicle, state); }
    static inline auto SetVehicleAlpha() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_ALPHA), Any>(); }
    static inline auto SetVehicleAsConvoyVehicle(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_AS_CONVOY_VEHICLE), void>(vehicle, toggle); }
    static inline auto SetVehicleAsEntitySyncPoint(Vehicle vehicle, Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_AS_ENTITY_SYNC_POINT), void>(vehicle, ped); }
    static inline auto SetVehicleAsMissionVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_AS_MISSION_VEHICLE), void>(vehicle); }
    static inline auto SetVehicleAsNoLongerNeeded(Vehicle* vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_AS_NO_LONGER_NEEDED), void>(vehicle); }
    static inline auto SetVehicleBlipThrottleRandomly(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_BLIP_THROTTLE_RANDOMLY), void>(vehicle, toggle); }
    static inline auto SetVehicleBlowupOnNextCollision(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_BLOWUP_ON_NEXT_COLLISION), void>(vehicle); }
    static inline auto SetVehicleBulletCamPref(Vehicle vehicle, const char* a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_BULLET_CAM_PREF), void>(vehicle, a1); }
    static inline auto SetVehicleBulletCameraOnNextHit(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_BULLET_CAMERA_ON_NEXT_HIT), void>(vehicle); }
    static inline auto SetVehicleCanBeDamaged(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_CAN_BE_DAMAGED), void>(vehicle, toggle); }
    static inline auto SetVehicleCanBeTargetted(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_CAN_BE_TARGETTED), void>(vehicle, toggle); }
    static inline auto SetVehicleCanBeVisiblyDamaged(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED), void>(vehicle, toggle); }
    static inline auto SetVehicleCanBreak(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_CAN_BREAK), void>(vehicle, toggle); }
    static inline auto SetVehicleCanTriggerBulletCam(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_CAN_TRIGGER_BULLET_CAM), void>(vehicle, toggle); }
    static inline auto SetVehicleCollision(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_COLLISION), void>(vehicle, toggle); }
    static inline auto SetVehicleColourCombination(Vehicle vehicle, int colorCombination) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_COLOUR_COMBINATION), void>(vehicle, colorCombination); }
    static inline auto SetVehicleColours(Vehicle vehicle, int primaryColor, int secondaryColor) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_COLOURS), void>(vehicle, primaryColor, secondaryColor); }
    static inline auto SetVehicleControlToPlayer(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_CONTROL_TO_PLAYER), void>(vehicle); }
    static inline auto SetVehicleCoords(Vehicle vehicle, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_COORDS), void>(vehicle, x, y, z); }
    static inline auto SetVehicleCoordsNoOffset(Vehicle vehicle, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_COORDS_NO_OFFSET), void>(vehicle, x, y, z); }
    static inline auto SetVehicleDamage(Vehicle vehicle, float xOffset, float yOffset, float zOffset, float damage, float radius, BOOL a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_DAMAGE), void>(vehicle, xOffset, yOffset, zOffset, damage, radius, a6); }
    static inline auto SetVehicleDensityMultiplier(float multiplier) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_DENSITY_MULTIPLIER), void>(multiplier); }
    static inline auto SetVehicleDirtLevel(Vehicle vehicle, float dirtLevel) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_DIRT_LEVEL), void>(vehicle, dirtLevel); }
    static inline auto SetVehicleDoorBroken(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_DOOR_BROKEN), void>(a0, a1, a2); }
    static inline auto SetVehicleDoorControl(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_DOOR_CONTROL), void>(a0, a1, a2, a3); }
    static inline auto SetVehicleDoorLatched(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_DOOR_LATCHED), void>(a0, a1, a2, a3); }
    static inline auto SetVehicleDoorOpen(Vehicle vehicle, int door) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_DOOR_OPEN), void>(vehicle, door); }
    static inline auto SetVehicleDoorShut(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_DOOR_SHUT), void>(a0, a1, a2, a3); }
    static inline auto SetVehicleDoorsLocked(Vehicle vehicle, int status) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_DOORS_LOCKED), void>(vehicle, status); }
    static inline auto SetVehicleDoorsShut(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_DOORS_SHUT), void>(vehicle); }
    static inline auto SetVehicleDriveForceInAir(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_DRIVE_FORCE_IN_AIR), void>(vehicle, toggle); }
    static inline auto SetVehicleEngineCanBeDamaged(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_ENGINE_CAN_BE_DAMAGED), void>(vehicle, toggle); }
    static inline auto SetVehicleEngineHealth(Vehicle vehicle, float health) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_ENGINE_HEALTH), void>(vehicle, health); }
    static inline auto SetVehicleEngineOn(Vehicle vehicle, BOOL value, BOOL instantly) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_ENGINE_ON), void>(vehicle, value, instantly); }
    static inline auto SetVehicleExplodesOnHighExplosionDamage(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE), void>(vehicle, toggle); }
    static inline auto SetVehicleExplodesOnlyFromProjectileExplosions(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_EXPLODES_ONLY_FROM_PROJECTILE_EXPLOSIONS), void>(vehicle, toggle); }
    static inline auto SetVehicleExtra(Vehicle vehicle, int extra, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_EXTRA), void>(vehicle, extra, a2); }
    static inline auto SetVehicleExtraColours(Vehicle vehicle, int pearlescentColor, int wheelColor) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_EXTRA_COLOURS), void>(vehicle, pearlescentColor, wheelColor); }
    static inline auto SetVehicleFixed(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_FIXED), void>(vehicle); }
    static inline auto SetVehicleFixedWeaponAccuracy(Vehicle vehicle, float accurary, int weaponIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_FIXED_WEAPON_ACCURACY), void>(vehicle, accurary, weaponIndex); }
    static inline auto SetVehicleFixedWeaponDamage(Vehicle vehicle, float damage, int weaponIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_FIXED_WEAPON_DAMAGE), void>(vehicle, damage, weaponIndex); }
    static inline auto SetVehicleFixedWeaponFiringPatternMode(Vehicle vehicle, int mode, int weaponIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_FIXED_WEAPON_FIRING_PATTERN_MODE), void>(vehicle, mode, weaponIndex); }
    static inline auto SetVehicleFixedWeaponFiringPatternSet(Vehicle vehicle, int weaponIndex, Hash firingPatternHash1, Hash firingPatternHash2, Hash firingPatternHash3, Hash firingPatternHash4, Hash firingPatternHash5, Hash firingPatternHash6, Hash firingPatternHash7, Hash firingPatternHash8, Hash firingPatternHash9, Hash firingPatternHash10) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_FIXED_WEAPON_FIRING_PATTERN_SET), void>(vehicle, weaponIndex, firingPatternHash1, firingPatternHash2, firingPatternHash3, firingPatternHash4, firingPatternHash5, firingPatternHash6, firingPatternHash7, firingPatternHash8, firingPatternHash9, firingPatternHash10); }
    static inline auto SetVehicleForwardSpeed(Vehicle vehicle, float speed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_FORWARD_SPEED), void>(vehicle, speed); }
    static inline auto SetVehicleFreezeAfterBlowingUp(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_FREEZE_AFTER_BLOWING_UP), void>(vehicle, toggle); }
    static inline auto SetVehicleHasBeenOwnedByPlayer(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER), void>(vehicle, toggle); }
    static inline auto SetVehicleHasStrongAxles(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_HAS_STRONG_AXLES), void>(vehicle, toggle); }
    static inline auto SetVehicleHeading(Vehicle vehicle, float heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_HEADING), void>(vehicle, heading); }
    static inline auto SetVehicleHealth(Vehicle vehicle, int health) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_HEALTH), void>(vehicle, health); }
    static inline auto SetVehicleInCutscene(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_IN_CUTSCENE), void>(vehicle, toggle); }
    static inline auto SetVehicleInstLightTuneValues(Vehicle vehicle, Any* data) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_INST_LIGHT_TUNE_VALUES), void>(vehicle, data); }
    static inline auto SetVehicleInteriorlight(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_INTERIORLIGHT), void>(vehicle, toggle); }
    static inline auto SetVehicleIsConsideredByPlayer(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_IS_CONSIDERED_BY_PLAYER), void>(vehicle, toggle); }
    static inline auto SetVehicleLightMultiplier(Vehicle vehicle, float multiplier) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_LIGHT_MULTIPLIER), void>(vehicle, multiplier); }
    static inline auto SetVehicleLights(Vehicle vehicle, int state) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_LIGHTS), void>(vehicle, state); }
    static inline auto SetVehicleLivery(Vehicle vehicle, int liveryIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_LIVERY), void>(vehicle, liveryIndex); }
    static inline auto SetVehicleModelIsSuppressed(Hash modelHash, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_MODEL_IS_SUPPRESSED), void>(modelHash, toggle); }
    static inline auto SetVehicleNameDebug(Vehicle vehicle, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_NAME_DEBUG), void>(vehicle, name); }
    static inline auto SetVehicleNeedsToBeHotwired(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_NEEDS_TO_BE_HOTWIRED), void>(vehicle, toggle); }
    static inline auto SetVehicleNotExplodable(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_NOT_EXPLODABLE), void>(vehicle, toggle); }
    static inline auto SetVehicleOnGroundProperly(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_ON_GROUND_PROPERLY), BOOL>(vehicle); }
    static inline auto SetVehicleOnlyDamagedByPlayer(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_ONLY_DAMAGED_BY_PLAYER), void>(vehicle, toggle); }
    static inline auto SetVehicleOnlyDamagedByRelationshipGroup(Vehicle vehicle, BOOL toggle, int relGroupId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP), void>(vehicle, toggle, relGroupId); }
    static inline auto SetVehicleOnlyExplodesWhenHitByMultipleExplosions(Vehicle vehicle, BOOL toggle, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_ONLY_EXPLODES_WHEN_HIT_BY_MULTIPLE_EXPLOSIONS), void>(vehicle, toggle, a2); }
    static inline auto SetVehiclePetrolTankHealth(Vehicle vehicle, float health) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_PETROL_TANK_HEALTH), void>(vehicle, health); }
    static inline auto SetVehicleProofs(Vehicle vehicle, BOOL a1, BOOL a2, BOOL a3, BOOL a4, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_PROOFS), void>(vehicle, a1, a2, a3, a4, a5); }
    static inline auto SetVehicleProvidesCover(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_PROVIDES_COVER), void>(vehicle, toggle); }
    static inline auto SetVehicleQuaternion(Vehicle vehicle, float x, float y, float z, float w) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_QUATERNION), void>(vehicle, x, y, z, w); }
    static inline auto SetVehicleRandomRouteSeed(Vehicle vehicle, int seed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_RANDOM_ROUTE_SEED), void>(vehicle, seed); }
    static inline auto SetVehicleReactToExplosion(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_REACT_TO_EXPLOSION), void>(vehicle, toggle); }
    static inline auto SetVehicleSiren(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_SIREN), void>(vehicle, toggle); }
    static inline auto SetVehicleSteerBias(Vehicle vehicle, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_STEER_BIAS), void>(vehicle, value); }
    static inline auto SetVehicleStrong(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_STRONG), void>(vehicle, toggle); }
    static inline auto SetVehicleTurnsToFaceCoord(Vehicle vehicle, float x, float y) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_TURNS_TO_FACE_COORD), void>(vehicle, x, y); }
    static inline auto SetVehicleTyreBurst(Vehicle vehicle, int tire) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_TYRE_BURST), void>(vehicle, tire); }
    static inline auto SetVehicleTyreFixed(Vehicle vehicle, int tire) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_TYRE_FIXED), void>(vehicle, tire); }
    static inline auto SetVehicleTyresCanBurst(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_TYRES_CAN_BURST), void>(vehicle, toggle); }
    static inline auto SetVehicleVisible(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VEHICLE_VISIBLE), void>(vehicle, toggle); }
    static inline auto SetVisibilityOfClosestObjectOfType(float x, float y, float z, float radius, Hash modelHash, BOOL visible) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VISIBILITY_OF_CLOSEST_OBJECT_OF_TYPE), void>(x, y, z, radius, modelHash, visible); }
    static inline auto SetVoiceIdFromHeadComponent(Ped ped, int unused1, BOOL unused2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_VOICE_ID_FROM_HEAD_COMPONENT), void>(ped, unused1, unused2); }
    static inline auto SetWaitingAtStationTime(Vehicle train, int time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WAITING_AT_STATION_TIME), void>(train, time); }
    static inline auto SetWakesSection(int section) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WAKES_SECTION), void>(section); }
    static inline auto SetWantedLevelMultiplier(float multiplier) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WANTED_LEVEL_MULTIPLIER), void>(multiplier); }
    static inline auto SetWeaponAmmo(Weapon weapon, int ammo) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WEAPON_AMMO), void>(weapon, ammo); }
    static inline auto SetWeaponAmmoInClip(Weapon weapon, int ammo) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WEAPON_AMMO_IN_CLIP), void>(weapon, ammo); }
    static inline auto SetWeaponAsNoLongerNeeded(Hash weaponHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WEAPON_AS_NO_LONGER_NEEDED), void>(weaponHash); }
    static inline auto SetWeaponChanceToFireBlanks(Weapon weapon, int chance) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WEAPON_CHANCE_TO_FIRE_BLANKS), void>(weapon, chance); }
    static inline auto SetWeaponLightData(Weapon weapon, int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WEAPON_LIGHT_DATA), void>(weapon, index); }
    static inline auto SetWeaponLightDataByName(Weapon weapon, const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WEAPON_LIGHT_DATA_BY_NAME), void>(weapon, name); }
    static inline auto SetWeaponSlot(Ped ped, Weapon weapon, int holsterType) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WEAPON_SLOT), void>(ped, weapon, holsterType); }
    static inline auto SetWeaponSpawnsPickup(Weapon weapon, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WEAPON_SPAWNS_PICKUP), void>(weapon, toggle); }
    static inline auto SetWeaponVisible(Weapon weapon, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WEAPON_VISIBLE), void>(weapon, toggle); }
    static inline auto SetWeatherTransitionImmediate(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WEATHER_TRANSITION_IMMEDIATE), void>(toggle); }
    static inline auto SetWeatherTransitionSpeed(float speed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WEATHER_TRANSITION_SPEED), void>(speed); }
    static inline auto SetWeatherTypeNowPersist(const char* weatherType) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WEATHER_TYPE_NOW_PERSIST), void>(weatherType); }
    static inline auto SetWeatherTypePersist(const char* weatherType) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WEATHER_TYPE_PERSIST), void>(weatherType); }
    static inline auto SetWidescreenBorders(BOOL toggle, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WIDESCREEN_BORDERS), void>(toggle, a1); }
    static inline auto SetWidescreenFormat(int format) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WIDESCREEN_FORMAT), void>(format); }
    static inline auto SetWind(float speed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_WIND), void>(speed); }
    static inline auto SetXboxScreenSaver() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_XBOX_SCREEN_SAVER), Any>(); }
    static inline auto SetZoneCopsActive(const char* zoneName, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ZONE_COPS_ACTIVE), void>(zoneName, toggle); }
    static inline auto SetZonePopulationType(const char* zoneName, int type) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ZONE_POPULATION_TYPE), void>(zoneName, type); }
    static inline auto SetZoneScumminess(const char* zoneName, int scumminess) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SET_ZONE_SCUMMINESS), void>(zoneName, scumminess); }
    static inline auto Settimera(int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SETTIMERA), void>(value); }
    static inline auto Settimerb(int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SETTIMERB), void>(value); }
    static inline auto Settimersystem(int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SETTIMERSYSTEM), void>(value); }
    static inline auto SetupBulletCameraAnimScene(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SETUP_BULLET_CAMERA_ANIM_SCENE), void>(a0, a1, a2); }
    static inline auto SetupBulletCameraScene(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11, Any a12, Any a13, Any a14, Any a15, Any a16, Any a17, Any a18, Any a19, Any a20, Any a21) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SETUP_BULLET_CAMERA_SCENE), Any>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); }
    static inline auto SetupHudScoreboard(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SETUP_HUD_SCOREBOARD), void>(a0); }
    static inline auto SevBindc(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_BINDC), Any>(a0, a1, a2, a3, a4); }
    static inline auto SevCondition(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_CONDITION), Any>(a0, a1, a2); }
    static inline auto SevConnectedOnly() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_CONNECTED_ONLY), void>(); }
    static inline auto SevConstructEvent() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_CONSTRUCT_EVENT), Any>(); }
    static inline auto SevCreateObject(Object object, Hash modelHash, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_CREATE_OBJECT), void>(object, modelHash, x, y, z); }
    static inline auto SevCreatePed(Ped ped, Hash modelHash, float x, float y, float z, float heading, BOOL isNetwork, BOOL dontOwn) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_CREATE_PED), void>(ped, modelHash, x, y, z, heading, isNetwork, dontOwn); }
    static inline auto SevCreatePickup(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_CREATE_PICKUP), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto SevCreateVehicle(Vehicle vehicle, Hash modelHash, float x, float y, float z, float heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_CREATE_VEHICLE), void>(vehicle, modelHash, x, y, z, heading); }
    static inline auto SevCurrentEvent(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_CURRENT_EVENT), Any>(a0, a1); }
    static inline auto SevDeleteObject(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_DELETE_OBJECT), void>(object); }
    static inline auto SevGetMyPlayer() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_GET_MY_PLAYER), Player>(); }
    static inline auto SevGetPlayerFriendlyFire() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_GET_PLAYER_FRIENDLY_FIRE), Any>(); }
    static inline auto SevGetUniquePlayerModelVariation() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_GET_UNIQUE_PLAYER_MODEL_VARIATION), Any>(); }
    static inline auto SevIdToIndex(int sevId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ID_TO_INDEX), int>(sevId); }
    static inline auto SevIndexToId(int sevIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_INDEX_TO_ID), int>(sevIndex); }
    static inline auto SevInduceEvent(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_INDUCE_EVENT), void>(a0); }
    static inline auto SevInduceEventArgs(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_INDUCE_EVENT_ARGS), void>(a0, a1, a2); }
    static inline auto SevInduceGatherEvent(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_INDUCE_GATHER_EVENT), void>(a0); }
    static inline auto SevInduceLocalEvent(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_INDUCE_LOCAL_EVENT), void>(a0); }
    static inline auto SevInduceLocalEventArgs(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_INDUCE_LOCAL_EVENT_ARGS), void>(a0, a1, a2); }
    static inline auto SevIntToWatcher() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_INT_TO_WATCHER), Any>(); }
    static inline auto SevInvalidEventId() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_INVALID_EVENT_ID), Any>(); }
    static inline auto SevIsPointVisibleToPositionList(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_IS_POINT_VISIBLE_TO_POSITION_LIST), Any>(a0, a1, a2, a3); }
    static inline auto SevIsPrimary() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_IS_PRIMARY), BOOL>(); }
    static inline auto SevIsSphereVisibleToOtherTeamPlayers() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_IS_SPHERE_VISIBLE_TO_OTHER_TEAM_PLAYERS), Any>(); }
    static inline auto SevIsSphereVisibleToPlayerList(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_IS_SPHERE_VISIBLE_TO_PLAYER_LIST), Any>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto SevIsolate() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ISOLATE), void>(); }
    static inline auto SevIsolateOff() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ISOLATE_OFF), void>(); }
    static inline auto SevIsolatedOnly() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ISOLATED_ONLY), void>(); }
    static inline auto SevMapPlayerPed(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_MAP_PLAYER_PED), Any>(a0, a1); }
    static inline auto SevNextEvent(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_NEXT_EVENT), void>(a0, a1); }
    static inline auto SevObserveFloat(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_OBSERVE_FLOAT), Any>(a0); }
    static inline auto SevObserveInt(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_OBSERVE_INT), Any>(a0); }
    static inline auto SevOnAnyPedCreated() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_ANY_PED_CREATED), Any>(); }
    static inline auto SevOnAnyPedDeleted() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_ANY_PED_DELETED), Any>(); }
    static inline auto SevOnAnyPedDied() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_ANY_PED_DIED), Any>(); }
    static inline auto SevOnAnyPedJoinedNetgame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_ANY_PED_JOINED_NETGAME), Any>(); }
    static inline auto SevOnAnyPedLeftNetgame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_ANY_PED_LEFT_NETGAME), Any>(); }
    static inline auto SevOnAnyVehicleCreated() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_ANY_VEHICLE_CREATED), Any>(); }
    static inline auto SevOnAnyVehicleDeleted() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_ANY_VEHICLE_DELETED), Any>(); }
    static inline auto SevOnAnyVehicleDestroyed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_ANY_VEHICLE_DESTROYED), Any>(); }
    static inline auto SevOnHostStatsTableValid() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_HOST_STATS_TABLE_VALID), Any>(); }
    static inline auto SevOnHostSync() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_HOST_SYNC), Any>(); }
    static inline auto SevOnMpInteractionSucceeded() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_MP_INTERACTION_SUCCEEDED), Any>(); }
    static inline auto SevOnMpItemPickupAction(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_MP_ITEM_PICKUP_ACTION), Any>(a0); }
    static inline auto SevOnObjectDamaged() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_OBJECT_DAMAGED), Any>(); }
    static inline auto SevOnPedAssist(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_ASSIST), Any>(a0); }
    static inline auto SevOnPedCreated() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_CREATED), Any>(); }
    static inline auto SevOnPedDeleted(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_DELETED), Any>(a0); }
    static inline auto SevOnPedDied(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_DIED), Any>(a0); }
    static inline auto SevOnPedEnteredVehicle() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_ENTERED_VEHICLE), Any>(); }
    static inline auto SevOnPedInjured(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_INJURED), Any>(a0); }
    static inline auto SevOnPedLeftVehicle() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_LEFT_VEHICLE), Any>(); }
    static inline auto SevOnPedLmsActivated(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_LMS_ACTIVATED), Any>(a0); }
    static inline auto SevOnPedLmsDeactivated(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_LMS_DEACTIVATED), Any>(a0); }
    static inline auto SevOnPedLookTriggerEnd() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_LOOK_TRIGGER_END), Any>(); }
    static inline auto SevOnPedLookTriggerStart() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_LOOK_TRIGGER_START), Any>(); }
    static inline auto SevOnPedRankUp(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_RANK_UP), Any>(a0); }
    static inline auto SevOnPedTaskFinished(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_TASK_FINISHED), Any>(a0, a1); }
    static inline auto SevOnPedTaskStarted() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_TASK_STARTED), Any>(); }
    static inline auto SevOnPedTriggerEntered(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_TRIGGER_ENTERED), Any>(a0, a1, a2); }
    static inline auto SevOnPedTriggerLeft(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_TRIGGER_LEFT), Any>(a0, a1, a2); }
    static inline auto SevOnPedTriggerListEntered(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_TRIGGER_LIST_ENTERED), Any>(a0, a1, a2, a3); }
    static inline auto SevOnPedTriggerListLeft(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_TRIGGER_LIST_LEFT), Any>(a0, a1, a2, a3); }
    static inline auto SevOnPedUseStreak(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_PED_USE_STREAK), Any>(a0); }
    static inline auto SevOnTimer(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_TIMER), Any>(a0); }
    static inline auto SevOnTinCanCollision() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_TIN_CAN_COLLISION), Any>(); }
    static inline auto SevOnVehicleCreated() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_VEHICLE_CREATED), Any>(); }
    static inline auto SevOnVehicleDamaged() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_VEHICLE_DAMAGED), Any>(); }
    static inline auto SevOnVehicleDeleted() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_VEHICLE_DELETED), Any>(); }
    static inline auto SevOnVehicleDestroyed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ON_VEHICLE_DESTROYED), Any>(); }
    static inline auto SevOnceOnly() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_ONCE_ONLY), void>(); }
    static inline auto SevPlayerIndexToSlot(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_PLAYER_INDEX_TO_SLOT), Any>(a0); }
    static inline auto SevPlayerIsValidSlot(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_PLAYER_IS_VALID_SLOT), Any>(a0); }
    static inline auto SevPlayerSlotToIndex(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_PLAYER_SLOT_TO_INDEX), Any>(a0); }
    static inline auto SevResetUniquePlayerModelVariations() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_RESET_UNIQUE_PLAYER_MODEL_VARIATIONS), Any>(); }
    static inline auto SevResurrectPlayer(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_RESURRECT_PLAYER), void>(a0, a1, a2, a3, a4); }
    static inline auto SevResurrectPlayerFinish(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_RESURRECT_PLAYER_FINISH), void>(a0, a1, a2); }
    static inline auto SevSetPlayerAvatar(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_SET_PLAYER_AVATAR), void>(a0, a1, a2); }
    static inline auto SevSetPlayerFriendlyFire(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_SET_PLAYER_FRIENDLY_FIRE), void>(a0, a1); }
    static inline auto SevSetPlayerModel(Player player, Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_SET_PLAYER_MODEL), void>(player, modelHash); }
    static inline auto SevSetPlayerModelDefaultVariation() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_SET_PLAYER_MODEL_DEFAULT_VARIATION), Any>(); }
    static inline auto SevThreadThis(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_THREAD_THIS), void>(a0); }
    static inline auto SevUnbind(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_UNBIND), void>(a0); }
    static inline auto SevUnbindAllForPed(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_UNBIND_ALL_FOR_PED), void>(a0); }
    static inline auto SevUnbindCategory(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_UNBIND_CATEGORY), void>(a0); }
    static inline auto SevUnbindHandler(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_UNBIND_HANDLER), void>(a0); }
    static inline auto SevWaitFor(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_WAIT_FOR), void>(a0); }
    static inline auto SevWatcherToInt() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_WATCHER_TO_INT), Any>(); }
    static inline auto SevYield() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SEV_YIELD), void>(); }
    static inline auto ShakeCam(Cam cam, const char* shakeName, float amplitude) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SHAKE_CAM), void>(cam, shakeName, amplitude); }
    static inline auto ShakeGameplayCam(const char* shakeName, float intensity) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SHAKE_GAMEPLAY_CAM), void>(shakeName, intensity); }
    static inline auto ShiftLeft(int value, int bitShift) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SHIFT_LEFT), int>(value, bitShift); }
    static inline auto ShiftRight(int value, int bitShift) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SHIFT_RIGHT), int>(value, bitShift); }
    static inline auto ShootSingleBulletBetweenCoords(float x1, float y1, float z1, float x2, float y2, float z2, int damage, BOOL a7, Hash weaponHash, Ped ownerPed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SHOOT_SINGLE_BULLET_BETWEEN_COORDS), void>(x1, y1, z1, x2, y2, z2, damage, a7, weaponHash, ownerPed); }
    static inline auto ShowBlipRotation(Blip blip, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SHOW_BLIP_ROTATION), void>(blip, toggle); }
    static inline auto ShutdownAndLaunchNetworkGame(int levelIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SHUTDOWN_AND_LAUNCH_NETWORK_GAME), void>(levelIndex); }
    static inline auto ShutdownAndLaunchSinglePlayerGame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME), void>(); }
    static inline auto SilenceVehicle(Vehicle vehicle, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SILENCE_VEHICLE), void>(vehicle, toggle); }
    static inline auto SimulatePlayerInputGait(Player player, float amount, int gaitType, float speed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SIMULATE_PLAYER_INPUT_GAIT), void>(player, amount, gaitType, speed); }
    static inline auto Sin(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SIN), float>(value); }
    static inline auto SkipForwardToTimeOfDay(int hour, int minute) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SKIP_FORWARD_TO_TIME_OF_DAY), void>(hour, minute); }
    static inline auto SkipRotorShadow(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SKIP_ROTOR_SHADOW), void>(toggle); }
    static inline auto SkipTimeInPlaybackRecordedPed(Ped ped, float time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SKIP_TIME_IN_PLAYBACK_RECORDED_PED), void>(ped, time); }
    static inline auto SkipTimeInPlaybackRecordedVehicle(Vehicle vehicle, float time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE), void>(vehicle, time); }
    static inline auto SkipToEndAndStopPlaybackRecordedVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE), void>(vehicle); }
    static inline auto SkipToNextAllowedStation(Vehicle train) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SKIP_TO_NEXT_ALLOWED_STATION), void>(train); }
    static inline auto SlideObject(Object object, float toX, float toY, float toZ, float speedX, float speedY, float speedZ, BOOL collision) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SLIDE_OBJECT), BOOL>(object, toX, toY, toZ, speedX, speedY, speedZ, collision); }
    static inline auto SmashGlassInRadius(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SMASH_GLASS_IN_RADIUS), void>(a0, a1, a2, a3, a4); }
    static inline auto SmashGlassOnObject(float x, float y, float z, float radius, Hash modelHash, float a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SMASH_GLASS_ON_OBJECT), BOOL>(x, y, z, radius, modelHash, a5); }
    static inline auto SmashVehicleWindow(Vehicle vehicle, int window) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SMASH_VEHICLE_WINDOW), void>(vehicle, window); }
    static inline auto SnapPlayerToCoverCoords(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SNAP_PLAYER_TO_COVER_COORDS), Any>(a0, a1, a2, a3, a4, a5); }
    static inline auto SnapPlayerToCoverline(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SNAP_PLAYER_TO_COVERLINE), Any>(a0, a1, a2, a3, a4, a5, a6); }
    static inline auto SnapPlayerToCoverpoint(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SNAP_PLAYER_TO_COVERPOINT), Any>(a0, a1, a2, a3); }
    static inline auto SnapPlayerToCoverpointFromUid(Player player, Hash coverSectionUID, Hash coverUID, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SNAP_PLAYER_TO_COVERPOINT_FROM_UID), BOOL>(player, coverSectionUID, coverUID, a3); }
    static inline auto SnapshotGlobals() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SNAPSHOT_GLOBALS), void>(); }
    static inline auto SpawnGrenade(Ped ped, Hash a1, float a2, float a3, float a4, float a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SPAWN_GRENADE), void>(ped, a1, a2, a3, a4, a5); }
    static inline auto SplitLocalisedString(const char* textLabel, int bufferSize1, char* buffer1, int bufferSize2, char* buffer2, int bufferSize3, char* buffer3, int bufferSize4, char* buffer4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SPLIT_LOCALISED_STRING), void>(textLabel, bufferSize1, buffer1, bufferSize2, buffer2, bufferSize3, buffer3, bufferSize4, buffer4); }
    static inline auto Sqrt(float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SQRT), float>(value); }
    static inline auto StartContext(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_CONTEXT), void>(name); }
    static inline auto StartContextHash(Hash hash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_CONTEXT_HASH), void>(hash); }
    static inline auto StartCutsceneCapture(const char* cutsceneName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_CUTSCENE_CAPTURE), void>(cutsceneName); }
    static inline auto StartCutsceneWithFades(const char* cutsceneName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_CUTSCENE_WITH_FADES), void>(cutsceneName); }
    static inline auto StartFiringAmnesty() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_FIRING_AMNESTY), void>(); }
    static inline auto StartNewScript(const char* scriptName, int stackSize) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_NEW_SCRIPT), int>(scriptName, stackSize); }
    static inline auto StartNewScriptTyped(const char* scriptName, int stackSize, int unk) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_NEW_SCRIPT_TYPED), int>(scriptName, stackSize, unk); }
    static inline auto StartNewScriptTypedWithArgs(const char* scriptName, Any* args, int argCount, int stackSize, int unk) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_NEW_SCRIPT_TYPED_WITH_ARGS), int>(scriptName, args, argCount, stackSize, unk); }
    static inline auto StartNewScriptWithArgs(const char* scriptName, Any* args, int argCount, int stackSize) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_NEW_SCRIPT_WITH_ARGS), int>(scriptName, args, argCount, stackSize); }
    static inline auto StartNewWidgetCombo() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_NEW_WIDGET_COMBO), void>(); }
    static inline auto StartPanelWipe(int a0, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PANEL_WIPE), void>(a0, a1); }
    static inline auto StartParticleFxLoopedAtCoord(const char* ptfxName, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PARTICLE_FX_LOOPED_AT_COORD), ScrHandle>(ptfxName, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale); }
    static inline auto StartParticleFxLoopedOnObject(const char* ptfxName, Object object, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PARTICLE_FX_LOOPED_ON_OBJECT), ScrHandle>(ptfxName, object, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale); }
    static inline auto StartParticleFxLoopedOnObjectBone(const char* ptfxName, Object object, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int bone, float scale) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PARTICLE_FX_LOOPED_ON_OBJECT_BONE), ScrHandle>(ptfxName, object, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, bone, scale); }
    static inline auto StartParticleFxLoopedOnPedBone(const char* ptfxName, Ped ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int bone, float scale) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PARTICLE_FX_LOOPED_ON_PED_BONE), ScrHandle>(ptfxName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, bone, scale); }
    static inline auto StartParticleFxLoopedOnVehicle(const char* ptfxName, Vehicle vehicle, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PARTICLE_FX_LOOPED_ON_VEHICLE), ScrHandle>(ptfxName, vehicle, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale); }
    static inline auto StartParticleFxNonLoopedAtCoord(const char* ptfxName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float scale) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PARTICLE_FX_NON_LOOPED_AT_COORD), BOOL>(ptfxName, posX, posY, posZ, rotX, rotY, rotZ, scale); }
    static inline auto StartParticleFxNonLoopedAtCoordWithGroundPlane() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PARTICLE_FX_NON_LOOPED_AT_COORD_WITH_GROUND_PLANE), Any>(); }
    static inline auto StartParticleFxNonLoopedAtCoordWithNearbyCollision() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PARTICLE_FX_NON_LOOPED_AT_COORD_WITH_NEARBY_COLLISION), Any>(); }
    static inline auto StartParticleFxNonLoopedAtCoordWithOffsetGroundPlane() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PARTICLE_FX_NON_LOOPED_AT_COORD_WITH_OFFSET_GROUND_PLANE), Any>(); }
    static inline auto StartParticleFxNonLoopedOnObject(const char* ptfxName, Object object, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PARTICLE_FX_NON_LOOPED_ON_OBJECT), BOOL>(ptfxName, object, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale); }
    static inline auto StartParticleFxNonLoopedOnPedBone(const char* ptfxName, Ped ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int bone, float scale) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE), BOOL>(ptfxName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, bone, scale); }
    static inline auto StartParticleFxNonLoopedOnVehicle(const char* ptfxName, Vehicle vehicle, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PARTICLE_FX_NON_LOOPED_ON_VEHICLE), BOOL>(ptfxName, vehicle, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale); }
    static inline auto StartPedFire(Ped ped, float unk) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PED_FIRE), FireId>(ped, unk); }
    static inline auto StartPedSearchCriteria() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PED_SEARCH_CRITERIA), void>(); }
    static inline auto StartPlaybackRecordedPed(Ped ped, int recordingIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PLAYBACK_RECORDED_PED), void>(ped, recordingIndex); }
    static inline auto StartPlaybackRecordedVehicle(Vehicle vehicle, int recordingIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PLAYBACK_RECORDED_VEHICLE), void>(vehicle, recordingIndex); }
    static inline auto StartPlaybackRecordedVehicleUsingAi(Vehicle vehicle, int recordingIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PLAYBACK_RECORDED_VEHICLE_USING_AI), void>(vehicle, recordingIndex); }
    static inline auto StartPlayerShootdodge(float a0, float a1, float a2, BOOL a3, BOOL a4, float a5, float a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_PLAYER_SHOOTDODGE), void>(a0, a1, a2, a3, a4, a5, a6); }
    static inline auto StartPostfxBlender(int a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_POSTFX_BLENDER), void>(a0); }
    static inline auto StartRecordingPed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_RECORDING_PED), Any>(); }
    static inline auto StartRecordingVehicle() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_RECORDING_VEHICLE), Any>(); }
    static inline auto StartRecordingVehicleTransitionFromPlayback() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_RECORDING_VEHICLE_TRANSITION_FROM_PLAYBACK), Any>(); }
    static inline auto StartScriptConversation(int index, BOOL a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_SCRIPT_CONVERSATION), void>(index, a1, a2); }
    static inline auto StartScriptFire(float x, float y, float z, int maxChildren) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_SCRIPT_FIRE), FireId>(x, y, z, maxChildren); }
    static inline auto StartScriptedConversation() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_SCRIPTED_CONVERSATION), Any>(); }
    static inline auto StartSeamlessCutscene() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_SEAMLESS_CUTSCENE), void>(); }
    static inline auto StartSeamlessCutsceneAtCoords(float x, float y, float z, float a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_SEAMLESS_CUTSCENE_AT_COORDS), void>(x, y, z, a3); }
    static inline auto StartVehicleAlarm(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_VEHICLE_ALARM), void>(vehicle); }
    static inline auto StartVehicleHorn(Vehicle vehicle, int duration) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_VEHICLE_HORN), void>(vehicle, duration); }
    static inline auto StartWidgetGroup(const char* a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::START_WIDGET_GROUP), void>(a0); }
    static inline auto StatAddFloat(const char* statName, BOOL a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_ADD_FLOAT), void>(statName, a1, a2); }
    static inline auto StatAddInt(const char* statName, BOOL a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_ADD_INT), void>(statName, a1, a2); }
    static inline auto StatDecrementFloat(const char* statName, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_DECREMENT_FLOAT), void>(statName, value); }
    static inline auto StatDecrementInt(const char* statName, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_DECREMENT_INT), void>(statName, value); }
    static inline auto StatExists(const char* statName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_EXISTS), BOOL>(statName); }
    static inline auto StatGetFloat(const char* statName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_GET_FLOAT), float>(statName); }
    static inline auto StatGetInt(const char* statName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_GET_INT), int>(statName); }
    static inline auto StatHashAddFloat(Hash statHash, BOOL a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_HASH_ADD_FLOAT), void>(statHash, a1, a2); }
    static inline auto StatHashAddInt(Hash statHash, BOOL a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_HASH_ADD_INT), void>(statHash, a1, a2); }
    static inline auto StatHashDecrementFloat(Hash statHash, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_HASH_DECREMENT_FLOAT), void>(statHash, value); }
    static inline auto StatHashDecrementInt(Hash statHash, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_HASH_DECREMENT_INT), void>(statHash, value); }
    static inline auto StatHashExists(Hash statHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_HASH_EXISTS), BOOL>(statHash); }
    static inline auto StatHashGetFloat(Hash statHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_HASH_GET_FLOAT), float>(statHash); }
    static inline auto StatHashGetInt(Hash statHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_HASH_GET_INT), int>(statHash); }
    static inline auto StatHashIncrementFloat(Hash statHash, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_HASH_INCREMENT_FLOAT), void>(statHash, value); }
    static inline auto StatHashIncrementInt(Hash statHash, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_HASH_INCREMENT_INT), void>(statHash, value); }
    static inline auto StatHashSetFloat(Hash statHash, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_HASH_SET_FLOAT), void>(statHash, value); }
    static inline auto StatHashSetInt(Hash statHash, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_HASH_SET_INT), void>(statHash, value); }
    static inline auto StatHashWaitForChangeFloat(Hash statHash, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_HASH_WAIT_FOR_CHANGE_FLOAT), void>(statHash, value); }
    static inline auto StatHashWaitForChangeInt(Hash statHash, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_HASH_WAIT_FOR_CHANGE_INT), void>(statHash, value); }
    static inline auto StatIncrementFloat(const char* statName, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_INCREMENT_FLOAT), void>(statName, value); }
    static inline auto StatIncrementInt(const char* statName, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_INCREMENT_INT), void>(statName, value); }
    static inline auto StatSetFloat(const char* statName, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_SET_FLOAT), void>(statName, value); }
    static inline auto StatSetInt(const char* statName, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_SET_INT), void>(statName, value); }
    static inline auto StatWaitForChangeFloat(const char* statName, float value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_WAIT_FOR_CHANGE_FLOAT), void>(statName, value); }
    static inline auto StatWaitForChangeInt(const char* statName, int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STAT_WAIT_FOR_CHANGE_INT), void>(statName, value); }
    static inline auto StopAllImagefx(BOOL a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_ALL_IMAGEFX), void>(a0); }
    static inline auto StopAllScriptedConversations(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_ALL_SCRIPTED_CONVERSATIONS), void>(a0); }
    static inline auto StopAnyPedModelBeingSuppressed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_ANY_PED_MODEL_BEING_SUPPRESSED), void>(); }
    static inline auto StopCamPointing(Cam cam) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_CAM_POINTING), void>(cam); }
    static inline auto StopCamShaking(Cam cam, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_CAM_SHAKING), void>(cam, a1); }
    static inline auto StopCurrentPlayingAmbientSpeech(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_CURRENT_PLAYING_AMBIENT_SPEECH), void>(ped); }
    static inline auto StopCutsceneAudio() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_CUTSCENE_AUDIO), void>(); }
    static inline auto StopCutsceneCapture() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_CUTSCENE_CAPTURE), void>(); }
    static inline auto StopFireInRange(float x, float y, float z, float radius) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_FIRE_IN_RANGE), void>(x, y, z, radius); }
    static inline auto StopGameplayCamShaking(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_GAMEPLAY_CAM_SHAKING), void>(a0, a1); }
    static inline auto StopGameplayHint() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_GAMEPLAY_HINT), void>(); }
    static inline auto StopImagefx(int a0, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_IMAGEFX), void>(a0, a1); }
    static inline auto StopMovie(int a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_MOVIE), void>(a0); }
    static inline auto StopMusic() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_MUSIC), void>(); }
    static inline auto StopOverridingPedFiringPattern(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_OVERRIDING_PED_FIRING_PATTERN), void>(ped); }
    static inline auto StopParticleFxLooped(ScrHandle ptfxHandle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_PARTICLE_FX_LOOPED), void>(ptfxHandle); }
    static inline auto StopPedDoingFallOffTestsWhenShot(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_PED_DOING_FALL_OFF_TESTS_WHEN_SHOT), void>(ped); }
    static inline auto StopPedFire(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_PED_FIRE), void>(ped); }
    static inline auto StopPedSearchCriteria() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_PED_SEARCH_CRITERIA), void>(); }
    static inline auto StopPedSpeaking(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_PED_SPEAKING), void>(ped, toggle); }
    static inline auto StopPedWeaponFiringWhenDropped(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_PED_WEAPON_FIRING_WHEN_DROPPED), void>(ped); }
    static inline auto StopPlaybackRecordedPed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_PLAYBACK_RECORDED_PED), void>(ped); }
    static inline auto StopPlaybackRecordedVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_PLAYBACK_RECORDED_VEHICLE), void>(vehicle); }
    static inline auto StopRecordingAllVehicles() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_RECORDING_ALL_VEHICLES), Any>(); }
    static inline auto StopRecordingPed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_RECORDING_PED), Any>(); }
    static inline auto StopRecordingPeds() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_RECORDING_PEDS), Any>(); }
    static inline auto StopRecordingVehicle() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_RECORDING_VEHICLE), Any>(); }
    static inline auto StopScriptStream(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_SCRIPT_STREAM), void>(a0); }
    static inline auto StopScriptedConversation(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_SCRIPTED_CONVERSATION), Any>(a0, a1, a2); }
    static inline auto StopSound(int soundId, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_SOUND), void>(soundId, a1); }
    static inline auto StopVehicleFire(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_VEHICLE_FIRE), void>(vehicle); }
    static inline auto StopWidgetCombo(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_WIDGET_COMBO), Any>(a0, a1); }
    static inline auto StopWidgetGroup() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STOP_WIDGET_GROUP), void>(); }
    static inline auto StoreFrontendTimecycleSettings() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STORE_FRONTEND_TIMECYCLE_SETTINGS), void>(); }
    static inline auto StreamHelpersDeactivate() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STREAM_HELPERS_DEACTIVATE), void>(); }
    static inline auto StreamHelpersInit() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STREAM_HELPERS_INIT), void>(); }
    static inline auto StreamHelpersReactivate() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STREAM_HELPERS_REACTIVATE), void>(); }
    static inline auto StreamHelpersRequestAtLoc(float x, float y, float z, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STREAM_HELPERS_REQUEST_AT_LOC), void>(x, y, z, a3); }
    static inline auto StringStore(const char* a0, const char* a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STRING_STORE), void>(a0, a1); }
    static inline auto StringToInt(const char* str, int* outInt) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::STRING_TO_INT), BOOL>(str, outInt); }
    static inline auto SwapNearestBuildingModel(float x, float y, float z, float radius, Hash modelHashFrom, Hash modelHashTo) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SWAP_NEAREST_BUILDING_MODEL), void>(x, y, z, radius, modelHashFrom, modelHashTo); }
    static inline auto SwitchToLevel(int index) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SWITCH_TO_LEVEL), void>(index); }
    static inline auto SwitchToLevelName(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SWITCH_TO_LEVEL_NAME), void>(name); }
    static inline auto SyncFragmentObjects(Hash modelHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SYNC_FRAGMENT_OBJECTS), void>(modelHash); }
    static inline auto SyncFragmentObjectsInIpl(const char* iplName, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SYNC_FRAGMENT_OBJECTS_IN_IPL), void>(iplName, toggle); }
    static inline auto SynchRecordingWithWater() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::SYNCH_RECORDING_WITH_WATER), BOOL>(); }
    static inline auto Tan(float x) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TAN), float>(x); }
    static inline auto TaskAchieveHeading(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_ACHIEVE_HEADING), void>(a0, a1, a2, a3); }
    static inline auto TaskAimGunAtCoord(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_AIM_GUN_AT_COORD), void>(a0, a1, a2, a3, a4, a5); }
    static inline auto TaskAimGunAtPed(Ped ped, Ped targetPed, int duration, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_AIM_GUN_AT_PED), void>(ped, targetPed, duration, a3); }
    static inline auto TaskAimGunAtVehicle(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_AIM_GUN_AT_VEHICLE), void>(a0, a1, a2, a3, a4, a5, a6, a7); }
    static inline auto TaskAttackMove(Ped ped, float a1, float a2, float a3, float a4, float a5, float a6, int a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_ATTACK_MOVE), void>(ped, a1, a2, a3, a4, a5, a6, a7); }
    static inline auto TaskAttackMoveWhileAimingAtCoord(Ped ped, float a1, float a2, float a3, float a4, float a5, float a6, BOOL a7, float a8, float a9, float a10, int a11) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_ATTACK_MOVE_WHILE_AIMING_AT_COORD), void>(ped, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); }
    static inline auto TaskAttackMoveWhileAimingAtPed(Ped ped, float a1, float a2, float a3, Ped ped2, BOOL a5, float a6, float a7, float a8, int a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_ATTACK_MOVE_WHILE_AIMING_AT_PED), void>(ped, a1, a2, a3, ped2, a5, a6, a7, a8, a9); }
    static inline auto TaskCautiousAdvance() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_CAUTIOUS_ADVANCE), Any>(); }
    static inline auto TaskCautiousMoveto(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_CAUTIOUS_MOVETO), void>(ped, x, y, z); }
    static inline auto TaskChatToPed(Ped ped, Ped ped2, BOOL a2, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_CHAT_TO_PED), void>(ped, ped2, a2, a3); }
    static inline auto TaskChatWithPed(Ped ped, Ped ped2, BOOL a2, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_CHAT_WITH_PED), void>(ped, ped2, a2, a3); }
    static inline auto TaskClearDefaultAim(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_CLEAR_DEFAULT_AIM), void>(ped); }
    static inline auto TaskClearLookAt(Any a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_CLEAR_LOOK_AT), void>(a0); }
    static inline auto TaskCombatHatedTargetsAroundPed(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_HATED_TARGETS_AROUND_PED), void>(a0, a1); }
    static inline auto TaskCombatHatedTargetsAroundPedTimed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED), Any>(); }
    static inline auto TaskCombatHatedTargetsInArea() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_HATED_TARGETS_IN_AREA), Any>(); }
    static inline auto TaskCombatMoveToCover(Ped ped, const char* a1, const char* a2, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_MOVE_TO_COVER), void>(ped, a1, a2, ped2); }
    static inline auto TaskCombatMoveToCoverCoords(Ped ped, float x, float y, float z, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_MOVE_TO_COVER_COORDS), void>(ped, x, y, z, ped2); }
    static inline auto TaskCombatMoveToCoverTactical(Ped ped, const char* a1, const char* a2, BOOL a3, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_MOVE_TO_COVER_TACTICAL), void>(ped, a1, a2, a3, ped2); }
    static inline auto TaskCombatMoveToCoverTacticalCoords(Ped ped, float x, float y, float z, BOOL a4, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_MOVE_TO_COVER_TACTICAL_COORDS), void>(ped, x, y, z, a4, ped2); }
    static inline auto TaskCombatPed(Ped ped, Ped targetPed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_PED), void>(ped, targetPed); }
    static inline auto TaskCombatPedTimed(Ped ped, Ped targetPed, int time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_PED_TIMED), void>(ped, targetPed, time); }
    static inline auto TaskCombatRoll(Ped ped, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_ROLL), void>(ped, a1); }
    static inline auto TaskCombatSnapToCover(Ped ped, const char* a1, const char* a2, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_SNAP_TO_COVER), void>(ped, a1, a2, ped2); }
    static inline auto TaskCombatSnapToCoverAmbush(Ped ped, const char* a1, const char* a2, int a3, int a4, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_SNAP_TO_COVER_AMBUSH), void>(ped, a1, a2, a3, a4, a5); }
    static inline auto TaskCombatSnapToCoverAmbushCoords(Ped ped, float x, float y, float z, int a3, int a4, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_SNAP_TO_COVER_AMBUSH_COORDS), void>(ped, x, y, z, a3, a4, a5); }
    static inline auto TaskCombatSnapToCoverCoords(Ped ped, float x, float y, float z, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_SNAP_TO_COVER_COORDS), void>(ped, x, y, z, ped2); }
    static inline auto TaskCombatSnapToCoverTactical(Ped ped, const char* a1, const char* a2, BOOL a3, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_SNAP_TO_COVER_TACTICAL), void>(ped, a1, a2, a3, ped2); }
    static inline auto TaskCombatSnapToCoverTacticalCoords(Ped ped, float x, float y, float z, BOOL a4, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COMBAT_SNAP_TO_COVER_TACTICAL_COORDS), void>(ped, x, y, z, a4, ped2); }
    static inline auto TaskCower(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_COWER), void>(ped); }
    static inline auto TaskDefaultAimAhead(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_DEFAULT_AIM_AHEAD), void>(ped); }
    static inline auto TaskDefaultAimAtCoord(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_DEFAULT_AIM_AT_COORD), void>(ped, x, y, z); }
    static inline auto TaskDefaultAimAtPed(Ped ped, Ped targetPed) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_DEFAULT_AIM_AT_PED), void>(ped, targetPed); }
    static inline auto TaskDodge(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_DODGE), void>(ped); }
    static inline auto TaskDriveBy(Ped driverPed, Ped targetPed, Vehicle targetVehicle, float targetX, float targetY, float targetZ, float distanceToShoot, Any a7, BOOL a8, int pedAccuracy) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_DRIVE_BY), void>(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, a7, a8, pedAccuracy); }
    static inline auto TaskDrivePointRoute(Ped driver, Vehicle vehicle, float a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_DRIVE_POINT_ROUTE), void>(driver, vehicle, a2); }
    static inline auto TaskDrivePointRouteAdvanced() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_DRIVE_POINT_ROUTE_ADVANCED), Any>(); }
    static inline auto TaskDriverCombat(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_DRIVER_COMBAT), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); }
    static inline auto TaskDropWeapon(Ped ped, Weapon weapon) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_DROP_WEAPON), void>(ped, weapon); }
    static inline auto TaskDuck(Ped ped, int duration) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_DUCK), void>(ped, duration); }
    static inline auto TaskEnterVehicle(Ped ped, Vehicle vehicle, int timeout, int doorIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_ENTER_VEHICLE), void>(ped, vehicle, timeout, doorIndex); }
    static inline auto TaskEveryoneLeaveVehicle(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_EVERYONE_LEAVE_VEHICLE), void>(ped); }
    static inline auto TaskExtendRoute() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_EXTEND_ROUTE), Any>(); }
    static inline auto TaskFlushRoute() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_FLUSH_ROUTE), void>(); }
    static inline auto TaskFollowNavMeshToCoord(Ped ped, float x, float y, float z, int moveSpeedId, int duration, float a6, int flags, float a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_FOLLOW_NAV_MESH_TO_COORD), void>(ped, x, y, z, moveSpeedId, duration, a6, flags, a8); }
    static inline auto TaskFollowNavMeshToCoordAdvanced(Ped ped, float x, float y, float z, int moveSpeedId, int duration, float a6, int flags, Vector3* a8, float a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED), void>(ped, x, y, z, moveSpeedId, duration, a6, flags, a8, a9); }
    static inline auto TaskFollowPatrolRoute(Ped ped, int a1, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_FOLLOW_PATROL_ROUTE), void>(ped, a1, a2); }
    static inline auto TaskFollowPointRoute() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_FOLLOW_POINT_ROUTE), Any>(); }
    static inline auto TaskFollowToOffsetOfPed() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_FOLLOW_TO_OFFSET_OF_PED), Any>(); }
    static inline auto TaskGetOffBoat(Vehicle boat, int duration) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GET_OFF_BOAT), void>(boat, duration); }
    static inline auto TaskGetOffCustomBoat() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GET_OFF_CUSTOM_BOAT), Any>(); }
    static inline auto TaskGetOnCustomBoat() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GET_ON_CUSTOM_BOAT), Any>(); }
    static inline auto TaskGetOnCustomVehicle(Vehicle vehicle, Ped ped, float a2, float a3, float a4, float a5, const char* a6, const char* a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GET_ON_CUSTOM_VEHICLE), void>(vehicle, ped, a2, a3, a4, a5, a6, a7); }
    static inline auto TaskGoStraightToCoord(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GO_STRAIGHT_TO_COORD), void>(a0, a1, a2, a3, a4, a5); }
    static inline auto TaskGoStraightToCoordRelativeToVehicle() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_VEHICLE), Any>(); }
    static inline auto TaskGoToCoordAnyMeans(Ped ped, float x, float y, float z, int a4, Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GO_TO_COORD_ANY_MEANS), void>(ped, x, y, z, a4, vehicle); }
    static inline auto TaskGoToCoordDpv(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GO_TO_COORD_DPV), void>(ped, x, y, z); }
    static inline auto TaskGoToCoordWhileAimingAtCoord(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11, Any a12) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); }
    static inline auto TaskGoToCoordWhileAimingAtObject() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GO_TO_COORD_WHILE_AIMING_AT_OBJECT), Any>(); }
    static inline auto TaskGoToCoordWhileAimingAtPed(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GO_TO_COORD_WHILE_AIMING_AT_PED), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); }
    static inline auto TaskGoToCoordWhileAimingAtVehicle(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GO_TO_COORD_WHILE_AIMING_AT_VEHICLE), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); }
    static inline auto TaskGoToCoordWhileShooting(Ped ped, float x, float y, float z, int a5, float a6, float a7, Ped ped2, BOOL a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GO_TO_COORD_WHILE_SHOOTING), void>(ped, x, y, z, a5, a6, a7, ped2, a9); }
    static inline auto TaskGoToObject(Ped ped, Object object, int a2, float a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GO_TO_OBJECT), void>(ped, object, a2, a3); }
    static inline auto TaskGoToPed(Ped ped, Ped ped2, int a2, float a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GO_TO_PED), void>(ped, ped2, a2, a3); }
    static inline auto TaskGoToPedWhileAimingAtCoord() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GO_TO_PED_WHILE_AIMING_AT_COORD), Any>(); }
    static inline auto TaskGoToPedWhileAimingAtObject() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GO_TO_PED_WHILE_AIMING_AT_OBJECT), Any>(); }
    static inline auto TaskGoToPedWhileAimingAtPed(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GO_TO_PED_WHILE_AIMING_AT_PED), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8); }
    static inline auto TaskGoToPedWhileAimingAtVehicle() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GO_TO_PED_WHILE_AIMING_AT_VEHICLE), Any>(); }
    static inline auto TaskGotoPedAiming() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GOTO_PED_AIMING), Any>(); }
    static inline auto TaskGotoPedOffset(Ped ped, Ped ped2, int a2, float a3, float a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GOTO_PED_OFFSET), void>(ped, ped2, a2, a3, a4); }
    static inline auto TaskGotoVehicle(Ped ped, Vehicle vehicle, int a2, float a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GOTO_VEHICLE), void>(ped, vehicle, a2, a3); }
    static inline auto TaskGuardAngledDefensiveArea() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GUARD_ANGLED_DEFENSIVE_AREA), Any>(); }
    static inline auto TaskGuardAssignedDefensiveArea() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GUARD_ASSIGNED_DEFENSIVE_AREA), Any>(); }
    static inline auto TaskGuardCurrentPosition() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GUARD_CURRENT_POSITION), Any>(); }
    static inline auto TaskGuardSphereDefensiveArea() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_GUARD_SPHERE_DEFENSIVE_AREA), Any>(); }
    static inline auto TaskHandsUp(Ped ped, int duration) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_HANDS_UP), void>(ped, duration); }
    static inline auto TaskHangGlider(Ped ped, Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_HANG_GLIDER), void>(ped, object); }
    static inline auto TaskHeliMission(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11, Any a12) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_HELI_MISSION), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); }
    static inline auto TaskJump(Ped ped, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_JUMP), void>(ped, a1); }
    static inline auto TaskJumpForward(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_JUMP_FORWARD), void>(ped); }
    static inline auto TaskLeaveAnyVehicle(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_LEAVE_ANY_VEHICLE), void>(ped); }
    static inline auto TaskLeaveVehicle(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_LEAVE_VEHICLE), void>(ped, vehicle); }
    static inline auto TaskLeaveVehicleAndFlee() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_LEAVE_VEHICLE_AND_FLEE), Any>(); }
    static inline auto TaskLeaveVehicleDontCloseDoor(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_LEAVE_VEHICLE_DONT_CLOSE_DOOR), void>(ped, vehicle); }
    static inline auto TaskLeaveVehicleImmediately(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_LEAVE_VEHICLE_IMMEDIATELY), void>(ped, vehicle); }
    static inline auto TaskLeaveVehicleInDirection(Ped ped, Vehicle vehicle, BOOL direction) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_LEAVE_VEHICLE_IN_DIRECTION), void>(ped, vehicle, direction); }
    static inline auto TaskLookAtCoord(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_LOOK_AT_COORD), void>(a0, a1, a2, a3, a4, a5); }
    static inline auto TaskLookAtObject(Ped ped, Object object, int duration, int flags) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_LOOK_AT_OBJECT), void>(ped, object, duration, flags); }
    static inline auto TaskLookAtPed(Ped ped, Ped ped2, int duration, int flags) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_LOOK_AT_PED), void>(ped, ped2, duration, flags); }
    static inline auto TaskLookAtVehicle(Ped ped, Vehicle vehicle, int duration, int flags) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_LOOK_AT_VEHICLE), void>(ped, vehicle, duration, flags); }
    static inline auto TaskMeleeGrapple(Ped ped, Ped targetPed, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_MELEE_GRAPPLE), void>(ped, targetPed, a2); }
    static inline auto TaskMeleeLite(Ped ped, Ped targetPed, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_MELEE_LITE), void>(ped, targetPed, a2); }
    static inline auto TaskMobileConversation(Ped ped, BOOL wander) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_MOBILE_CONVERSATION), void>(ped, wander); }
    static inline auto TaskNavigateThroughTramCars() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_NAVIGATE_THROUGH_TRAM_CARS), Any>(); }
    static inline auto TaskOpenVehicleDoor(Ped ped, Vehicle vehicle, int timeout, int doorIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_OPEN_VEHICLE_DOOR), void>(ped, vehicle, timeout, doorIndex); }
    static inline auto TaskPatrol(Ped ped, const char* patrolRouteName, int a2, BOOL a3, BOOL a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_PATROL), void>(ped, patrolRouteName, a2, a3, a4); }
    static inline auto TaskPause(Ped ped, int duration) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_PAUSE), void>(ped, duration); }
    static inline auto TaskPedSlideToCoord() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_PED_SLIDE_TO_COORD), Any>(); }
    static inline auto TaskPedSlideToCoordAndPlayAnim() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_PED_SLIDE_TO_COORD_AND_PLAY_ANIM), Any>(); }
    static inline auto TaskPedSlideToCoordAndPlayAnimHdgRate() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_PED_SLIDE_TO_COORD_AND_PLAY_ANIM_HDG_RATE), Any>(); }
    static inline auto TaskPedSlideToCoordHdgRate() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_PED_SLIDE_TO_COORD_HDG_RATE), Any>(); }
    static inline auto TaskPerformSequence(Ped ped, ScrHandle taskSequence) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_PERFORM_SEQUENCE), void>(ped, taskSequence); }
    static inline auto TaskPerformSequenceFromProgress(Ped ped, ScrHandle taskSequence, int a2, int a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_PERFORM_SEQUENCE_FROM_PROGRESS), void>(ped, taskSequence, a2, a3); }
    static inline auto TaskPerformSequenceLocally(Ped ped, ScrHandle taskSequence) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_PERFORM_SEQUENCE_LOCALLY), void>(ped, taskSequence); }
    static inline auto TaskPickupAndCarryObject(Ped ped, Object object, float x, float y, float z, BOOL a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_PICKUP_AND_CARRY_OBJECT), void>(ped, object, x, y, z, a5); }
    static inline auto TaskPlayAnim(Ped ped, const char* animDict, const char* animName, float speed, float speedMultiplier, int duration, int flags) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_PLAY_ANIM), void>(ped, animDict, animName, speed, speedMultiplier, duration, flags); }
    static inline auto TaskReactInitial(Ped ped, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_REACT_INITIAL), void>(ped, ped2); }
    static inline auto TaskSearchForPedAtCoverPoint(Ped ped, const char* a1, const char* a2, BOOL a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SEARCH_FOR_PED_AT_COVER_POINT), void>(ped, a1, a2, a3); }
    static inline auto TaskSearchForUnseenEnemy(Ped ped, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SEARCH_FOR_UNSEEN_ENEMY), void>(ped, a1); }
    static inline auto TaskSelectWeaponToHand(Ped ped, Weapon weapon, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SELECT_WEAPON_TO_HAND), void>(ped, weapon, a2); }
    static inline auto TaskSetActionIntention(Ped ped, int a1, int a2, int a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SET_ACTION_INTENTION), void>(ped, a1, a2, a3); }
    static inline auto TaskSetBlockingOfNonTemporaryEvents(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS), void>(ped, toggle); }
    static inline auto TaskSetBlockingOfPedTargetting(Ped ped, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SET_BLOCKING_OF_PED_TARGETTING), void>(ped, toggle); }
    static inline auto TaskSetPedDecisionMaker() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SET_PED_DECISION_MAKER), Any>(); }
    static inline auto TaskSetPlayerControl(Ped ped, BOOL a1, int a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SET_PLAYER_CONTROL), void>(ped, a1, a2); }
    static inline auto TaskShootAtCoord(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SHOOT_AT_COORD), void>(a0, a1, a2, a3, a4, a5, a6, a7); }
    static inline auto TaskShootAtPed(Ped ped, Ped targetPed, int duration, Hash firingPatternHash, BOOL a4, BOOL a5, BOOL a6) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SHOOT_AT_PED), void>(ped, targetPed, duration, firingPatternHash, a4, a5, a6); }
    static inline auto TaskShootAtVehicle(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SHOOT_AT_VEHICLE), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto TaskShootdodge(Ped ped, BOOL a1, float a2, float a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SHOOTDODGE), void>(ped, a1, a2, a3); }
    static inline auto TaskShuffleToNextVehicleSeat(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT), void>(ped, vehicle); }
    static inline auto TaskSitDown(Ped ped, int a1, int a2, int a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SIT_DOWN), void>(ped, a1, a2, a3); }
    static inline auto TaskSitDownInstantly(Ped ped, int a1, int a2, int a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SIT_DOWN_INSTANTLY), void>(ped, a1, a2, a3); }
    static inline auto TaskSitDownOnNearestObject(Ped ped, int a1, int a2, float x, float y, float z, Hash modelHash, float a7, int a8, BOOL a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SIT_DOWN_ON_NEAREST_OBJECT), void>(ped, a1, a2, x, y, z, modelHash, a7, a8, a9); }
    static inline auto TaskSitDownOnObject(Ped ped, int a1, int a2, Object object, float x, float y, float z, float a7, int a8, BOOL a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SIT_DOWN_ON_OBJECT), void>(ped, a1, a2, object, x, y, z, a7, a8, a9); }
    static inline auto TaskSitDownOnSeat(Ped ped, int a1, int a2, float x, float y, float z, float a6, int a7) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SIT_DOWN_ON_SEAT), void>(ped, a1, a2, x, y, z, a6, a7); }
    static inline auto TaskSmartFleeCoord() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SMART_FLEE_COORD), Any>(); }
    static inline auto TaskSmartFleePed(Any a0, Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SMART_FLEE_PED), void>(a0, a1, a2, a3, a4); }
    static inline auto TaskSmartFollowPed(Ped ped, Ped ped2, float a2, float a3, float a4, Any a5, int a6, float a7, BOOL a8, BOOL a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SMART_FOLLOW_PED), void>(ped, ped2, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto TaskStandGuard() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_STAND_GUARD), Any>(); }
    static inline auto TaskStandStill(Ped ped, int duration) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_STAND_STILL), void>(ped, duration); }
    static inline auto TaskStartScenarioAtPosition() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_START_SCENARIO_AT_POSITION), Any>(); }
    static inline auto TaskStartScenarioInPlace() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_START_SCENARIO_IN_PLACE), Any>(); }
    static inline auto TaskStationaryStrafeAttack() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_STATIONARY_STRAFE_ATTACK), Any>(); }
    static inline auto TaskSurrender(Ped ped, Ped targetPed, float heading) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SURRENDER), void>(ped, targetPed, heading); }
    static inline auto TaskSwapWeapon(Ped ped, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_SWAP_WEAPON), void>(ped, a1); }
    static inline auto TaskToggleDuck(Ped ped, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_TOGGLE_DUCK), void>(ped, a1); }
    static inline auto TaskTurnPedToFaceCoord(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_TURN_PED_TO_FACE_COORD), void>(a0, a1, a2, a3, a4, a5); }
    static inline auto TaskTurnPedToFacePed(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_TURN_PED_TO_FACE_PED), void>(a0, a1, a2, a3); }
    static inline auto TaskUseDpv() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_USE_DPV), Any>(); }
    static inline auto TaskUseMobilePhone(Ped ped, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_USE_MOBILE_PHONE), void>(ped, a1); }
    static inline auto TaskUseMobilePhoneTimed(Ped ped, int time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_USE_MOBILE_PHONE_TIMED), void>(ped, time); }
    static inline auto TaskUseNearestMountedWeapon(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_USE_NEAREST_MOUNTED_WEAPON), void>(ped); }
    static inline auto TaskUseNearestScenarioToCoord() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_USE_NEAREST_SCENARIO_TO_COORD), Any>(); }
    static inline auto TaskUseNearestScenarioToCoordWarp() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP), Any>(); }
    static inline auto TaskUseWalkieTalkie(Ped ped, const char* a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_USE_WALKIE_TALKIE), void>(ped, a1); }
    static inline auto TaskVehicleDriveToCoord(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_VEHICLE_DRIVE_TO_COORD), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); }
    static inline auto TaskVehicleDriveToCoordRubberBand() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_VEHICLE_DRIVE_TO_COORD_RUBBER_BAND), Any>(); }
    static inline auto TaskVehicleDriveWander() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_VEHICLE_DRIVE_WANDER), Any>(); }
    static inline auto TaskVehicleMission(Any a0, Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_VEHICLE_MISSION), void>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto TaskVehicleMissionCoorsTarget() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_VEHICLE_MISSION_COORS_TARGET), Any>(); }
    static inline auto TaskVehicleMissionPedTarget() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_VEHICLE_MISSION_PED_TARGET), Any>(); }
    static inline auto TaskVehicleShootAtCoord(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_VEHICLE_SHOOT_AT_COORD), void>(a0, a1, a2, a3); }
    static inline auto TaskVehicleShootAtPed(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_VEHICLE_SHOOT_AT_PED), void>(a0, a1); }
    static inline auto TaskVehicleTempAction(Ped driver, Vehicle vehicle, int action, int time) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_VEHICLE_TEMP_ACTION), void>(driver, vehicle, action, time); }
    static inline auto TaskWanderStandard() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_WANDER_STANDARD), Any>(); }
    static inline auto TaskWarpPedIntoVehicle(Ped ped, Vehicle vehicle, int seatIndex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_WARP_PED_INTO_VEHICLE), void>(ped, vehicle, seatIndex); }
    static inline auto TaskWeaponRoll() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TASK_WEAPON_ROLL), Any>(); }
    static inline auto TemporarilyDisablePedSelfCollision(Ped ped, int duration) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TEMPORARILY_DISABLE_PED_SELF_COLLISION), void>(ped, duration); }
    static inline auto TerminateAllScriptsForNetworkGame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TERMINATE_ALL_SCRIPTS_FOR_NETWORK_GAME), void>(); }
    static inline auto TerminateAllScriptsWithThisName(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME), void>(name); }
    static inline auto TerminateGameBulletCamera() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TERMINATE_GAME_BULLET_CAMERA), void>(); }
    static inline auto TerminateThisThread() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TERMINATE_THIS_THREAD), void>(); }
    static inline auto TerminateThread(int threadId) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TERMINATE_THREAD), void>(threadId); }
    static inline auto ThrowMolotov(Ped ped, float a1, float a2, float a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::THROW_MOLOTOV), BOOL>(ped, a1, a2, a3); }
    static inline auto TimeSinceLastMonologue() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TIME_SINCE_LAST_MONOLOGUE), int>(); }
    static inline auto Timera() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TIMERA), int>(); }
    static inline auto Timerb() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TIMERB), int>(); }
    static inline auto Timersystem() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TIMERSYSTEM), int>(); }
    static inline auto Timestep() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TIMESTEP), float>(); }
    static inline auto Timestepunwarped() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TIMESTEPUNWARPED), float>(); }
    static inline auto ToFloat(int value) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TO_FLOAT), float>(value); }
    static inline auto ToggleDisplayAmmo(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TOGGLE_DISPLAY_AMMO), void>(toggle); }
    static inline auto ToggleNmBindposeTask() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TOGGLE_NM_BINDPOSE_TASK), Any>(); }
    static inline auto TogglePickupAttachment(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TOGGLE_PICKUP_ATTACHMENT), void>(a0, a1, a2); }
    static inline auto ToggleSecondaryLifeBar(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TOGGLE_SECONDARY_LIFE_BAR), void>(toggle); }
    static inline auto ToggleSecondaryLifeBarFlash(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TOGGLE_SECONDARY_LIFE_BAR_FLASH), void>(toggle); }
    static inline auto ToggleTracer(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TOGGLE_TRACER), void>(toggle); }
    static inline auto ToggleWeaponAttachment(Weapon weapon, int attachmentIndex, BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TOGGLE_WEAPON_ATTACHMENT), void>(weapon, attachmentIndex, toggle); }
    static inline auto TransferPedBloodHandle(Ped ped, Ped ped2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TRANSFER_PED_BLOOD_HANDLE), void>(ped, ped2); }
    static inline auto TriggerExplosionAudioFromCoords(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TRIGGER_EXPLOSION_AUDIO_FROM_COORDS), void>(a0, a1, a2, a3); }
    static inline auto TriggerExplosionAudioFromObject() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TRIGGER_EXPLOSION_AUDIO_FROM_OBJECT), Any>(); }
    static inline auto TriggerExplosionAudioFromPed(Any a0, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TRIGGER_EXPLOSION_AUDIO_FROM_PED), void>(a0, a1); }
    static inline auto TriggerExplosionAudioMixLayer(Any a0, Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TRIGGER_EXPLOSION_AUDIO_MIX_LAYER), void>(a0, a1, a2, a3); }
    static inline auto TriggerLightning(BOOL a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TRIGGER_LIGHTNING), void>(a0); }
    static inline auto TriggerPedPortalRescan(Ped ped, float a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TRIGGER_PED_PORTAL_RESCAN), void>(ped, a1); }
    static inline auto TriggerThunder(float a0, BOOL a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::TRIGGER_THUNDER), void>(a0, a1); }
    static inline auto UiAddMpHitmark(int a0, int a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UI_ADD_MP_HITMARK), void>(a0, a1); }
    static inline auto UiClearTooltip() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UI_CLEAR_TOOLTIP), void>(); }
    static inline auto UiDoesFrameExistHash(Hash frameHash) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UI_DOES_FRAME_EXIST_HASH), BOOL>(frameHash); }
    static inline auto UiDoesFrameExistName(const char* frameName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UI_DOES_FRAME_EXIST_NAME), BOOL>(frameName); }
    static inline auto UiIsQteMinigameFailure() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UI_IS_QTE_MINIGAME_FAILURE), BOOL>(); }
    static inline auto UiIsQteMinigameFinished() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UI_IS_QTE_MINIGAME_FINISHED), BOOL>(); }
    static inline auto UiIsQteMinigameInWindow() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UI_IS_QTE_MINIGAME_IN_WINDOW), BOOL>(); }
    static inline auto UiIsQteMinigameSuccess() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UI_IS_QTE_MINIGAME_SUCCESS), BOOL>(); }
    static inline auto UiIsTooltipShowing() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UI_IS_TOOLTIP_SHOWING), BOOL>(); }
    static inline auto UiLoadAfterActionReport(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UI_LOAD_AFTER_ACTION_REPORT), BOOL>(name); }
    static inline auto UiLoadMinimapTxd(const char* txdName) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UI_LOAD_MINIMAP_TXD), void>(txdName); }
    static inline auto UiRemoveMpHitmarks() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UI_REMOVE_MP_HITMARKS), void>(); }
    static inline auto UiShowTooltip(int a0, const char* a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UI_SHOW_TOOLTIP), BOOL>(a0, a1); }
    static inline auto UiStartQteMinigame(float a0, float a1, float a2, int a3) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UI_START_QTE_MINIGAME), void>(a0, a1, a2, a3); }
    static inline auto UiStopQteMinigame() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UI_STOP_QTE_MINIGAME), void>(); }
    static inline auto UnbindScriptDatabase(const char* name) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UNBIND_SCRIPT_DATABASE), void>(name); }
    static inline auto Unlock(const char* unlockSemantic, BOOL a1, BOOL a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UNLOCK), BOOL>(unlockSemantic, a1, a2); }
    static inline auto UnmuteExplosions() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UNMUTE_EXPLOSIONS), void>(); }
    static inline auto UnpausePlaybackRecordedPed(Ped ped) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UNPAUSE_PLAYBACK_RECORDED_PED), void>(ped); }
    static inline auto UnpausePlaybackRecordedVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UNPAUSE_PLAYBACK_RECORDED_VEHICLE), void>(vehicle); }
    static inline auto UnpinRopeVertex(Rope rope, int vertex) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UNPIN_ROPE_VERTEX), void>(rope, vertex); }
    static inline auto UpdateArcadeCheckPoint(int a0) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UPDATE_ARCADE_CHECK_POINT), void>(a0); }
    static inline auto UpdateSpecialFxModifierStrength(Any a0, Any a1, Any a2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::UPDATE_SPECIAL_FX_MODIFIER_STRENGTH), void>(a0, a1, a2); }
    static inline auto UseAnimatedLastManStanding(BOOL toggle) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::USE_ANIMATED_LAST_MAN_STANDING), void>(toggle); }
    static inline auto UseDefaultWaterSettings() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::USE_DEFAULT_WATER_SETTINGS), void>(); }
    static inline auto Vdist(float x1, float y1, float z1, float x2, float y2, float z2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::VDIST), float>(x1, y1, z1, x2, y2, z2); }
    static inline auto Vdist2(float x1, float y1, float z1, float x2, float y2, float z2) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::VDIST2), float>(x1, y1, z1, x2, y2, z2); }
    static inline auto VectorRotateAxis(float x, float y, float z, float rotate, const char* axis) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::VECTOR_ROTATE_AXIS), Vector3>(x, y, z, rotate, axis); }
    static inline auto Vmag(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::VMAG), float>(x, y, z); }
    static inline auto Vmag2(float x, float y, float z) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::VMAG2), float>(x, y, z); }
    static inline auto Wait(int ms) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::WAIT), void>(ms); }
    static inline auto Waitunpaused(int ms) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::WAITUNPAUSED), void>(ms); }
    static inline auto Waitunwarped(int ms) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::WAITUNWARPED), void>(ms); }
    static inline auto WakeRestingObjectsAround(Object object) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::WAKE_RESTING_OBJECTS_AROUND), void>(object); }
    static inline auto WasCutsceneSkipped() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::WAS_CUTSCENE_SKIPPED), BOOL>(); }
    static inline auto WasSinglePlayerTitleScreenEntered() { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::WAS_SINGLE_PLAYER_TITLE_SCREEN_ENTERED), BOOL>(); }
    static inline auto WashProjtexFromVehicle(Vehicle vehicle, Any a1) { return NativeInvoke::Invoke<std::to_underlying(NativeHashes::WASH_PROJTEX_FROM_VEHICLE), void>(vehicle, a1); }
};